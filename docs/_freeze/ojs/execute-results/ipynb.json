{
  "hash": "6e8ae4e5d516a3a23fc939f69705728e",
  "result": {
    "markdown": "---\ntitle: \"`Decalendar` and `Declock`\"\nauthor: Martin Laptev\n---\n\n# Summary {#sec-summary}\n\n`Decalendar` is a [decimal](https://en.wikipedia.org/wiki/Decimal) calendarüóìÔ∏èsystem and `Declock` is a decimal timekeeping‚è≥system. The goal of `Decalendar` and `Declock` is to replace all calendar and timekeeping systems that are based on non-decimal [numeral systems](https://en.wikipedia.org/wiki/List_of_numeral_systems#Standard_positional_numeral_systems). Instead of months, weeks, hours, minutes, and seconds, `Decalendar` and `Declock` use a single decimal number called the `day-of-the-year` (`doty`).\n\n## Demonstrations {#sec-demo}\n\n### Timestamps {#sec-demo-stamp}\n\n#### Page load {#sec-demo-stamp-load}\n\nThe `Decalendar` timestamp below shows the year and `doty` at the time this webpage was loaded. This timestamp is slightly more **precise** and much more **concise** than a timestamp with hours, minutes, and seconds.\n\n\n```{ojs}\n//| echo: false\n//| output: false\nfunction doty2dote(year = 1969, doty = 0) {\n  return doty + Math.floor(year * 365 + Math.floor(year / 4) - Math.floor(year / 100) + Math.floor(year / 400));\n}\nfunction dote2doty(days = 719468) {\n  const era = Math.floor((days >= 0 ? days : days - 146096) / 146097),\n    dotc = days - era * 146097,\n    yotc = Math.floor((dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n  return [yotc + era * 400, dotc - (yotc * 365 + Math.floor(yotc / 4) - Math.floor(yotc / 100))];\n}\nfunction dote2deco(days = 719468) {\n  return doty2deco(dote2doty(days))\n}\nfunction doty2doty(year = 1969, doty = 0) {\n  return dote2doty(doty2dote(year, doty));\n}\nfunction unix2doty(ms = 0) {\n  const days = ms / 86400000 + 719468;\n  return dote2doty(days)\n}\nfunction doty2deco(year = 1969, doty = 0) {\n  const day = Math.floor(doty);\n  return `${year.toString().padStart(4, \"0\")}+${day.toString().padStart(3, \"0\")}.${(Math.round((doty - day) * 1e5)).toString().padStart(5, \"0\")}`\n};\nfunction unix2deco(ms = 0) {\n    return doty2deco(...unix2doty(ms));\n};\nfunction unix2dote(ms = 0) {\n    return doty2dote(...unix2doty(ms));\n};\n```\n\n```{ojs}\n//| output: all\nload = unix2deco(Date.now());\n```\n\n\n<div id=\"observablehq-load-a38e03d2\"></div>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@observablehq/inspector@5/dist/inspector.css\">\n<script type=\"module\">\nimport {Runtime, Inspector} from \"https://cdn.jsdelivr.net/npm/@observablehq/runtime@5/dist/runtime.js\";\nimport define from \"https://api.observablehq.com/@dec/dec.js?v=3\";\nnew Runtime().module(define, name => { if (name === \"load\") return new Inspector(document.querySelector(\"#observablehq-load-a38e03d2\")); });\n</script>\n\n#### Now {#sec-demo-stamp-now}\n\nA timestamp that doesn't move isn't much fun, so here's one that increments every one ten thousandth ($10^{-5}$) of a day (`centimilliday`), which in `Decalendar` is called a `beat`. It's like a heart‚ù§Ô∏èbeat! Or if you prefer, a musical‚ô´beat!\n\n\n```{ojs}\n//| output: all\nnow = {\n  while(true) {\n    yield unix2deco(Date.now());\n  }\n}\n```\n\n\n<div id=\"observablehq-now-a38e03d2\"></div>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@observablehq/inspector@5/dist/inspector.css\">\n<script type=\"module\">\nimport {Runtime, Inspector} from \"https://cdn.jsdelivr.net/npm/@observablehq/runtime@5/dist/runtime.js\";\nimport define from \"https://api.observablehq.com/@dec/dec.js?v=3\";\nnew Runtime().module(define, name => { if (name === \"now\") return new Inspector(document.querySelector(\"#observablehq-now-a38e03d2\")); });\n</script>\n\n\n```{ojs}\n//| output: all\nnow = {\n  while(true) {\n    yield unix2deco(Date.now());\n  }\n}\n```\n\n\n#### Diff {#sec-demo-stamp-diff}\n\nIf we subtract the first timestamp from the second, we can see how long this webpage has been open. You don't have to read it all in one sitting, it's not a speed-readingüèéÔ∏ècompetition, so please feel free to take breaksüòÑ.\n\n\n```{ojs}\nnowDote = {\n  while(true) {\n    yield unix2dote(Date.now());\n  }\n}\nloadDote = unix2dote(Date.now());\n```\n\n```{ojs}\n//| output: all\ndiff = {\n  while(true) {\n    yield dote2deco(nowDote - loadDote).slice(2, 9);\n  }\n}\n```\n\n\n<div id=\"observablehq-diff-a38e03d2\"></div>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@observablehq/inspector@5/dist/inspector.css\">\n<script type=\"module\">\nimport {Runtime, Inspector} from \"https://cdn.jsdelivr.net/npm/@observablehq/runtime@5/dist/runtime.js\";\nimport define from \"https://api.observablehq.com/@dec/dec.js?v=3\";\nnew Runtime().module(define, name => { if (name === \"diff\") return new Inspector(document.querySelector(\"#observablehq-diff-a38e03d2\")); });\n</script>\n\n### Date conversion {#sec-demo-conv}\n\nEnter a [Gregorian calendar](https://en.wikipedia.org/wiki/Gregorian_calendar#:~:text=The%20Gregorian%20calendar%20is%20the%20calendar%20used%20in%20most%20parts%20of%20the%20world.) date below to see the equivalent `Decalendar` date in `doty` date format (`year+day`) and decimal year format (`year.yyy`). Try special dates like birthdays and anniversaries.\n\n### Timestamp arithmetic {#sec-demo-arith}\n\n`Doty` numbers make working with dates and times a breezeüéê. Use the inputs below to add numbers to the current year and `doty`. Add a positive number to see a future date or add a negative number to get a past date. You can use decimal `doty` numbers for times and even decimal years for dates! ‚ú®ü§©‚ú® For example, the decimal year date `1969.84` ($1969+306/365$) is equivalent to the `doty` date `1969+306`.\n\n## Day of the year {#sec-summary-doty}\n\n@fig-doty shows the components of the `doty` number that corresponds to midnight on January 1st in the Gregorian calendar. The first two [digits](https://en.wikipedia.org/wiki/Numerical_digit#Computation_of_place_values) (hundreds and tens) of the `doty` are the `dek` number (30 in @fig-doty). `Deks` are groups of 10 days that fulfill the role of both months and weeks in `Decalendar`. The next digit (ones) of the `doty` number is the day-of-the-`dek` (`dotd`) number (6 in @fig-doty), which serves as both the day-of-the-month (`dotm`) and the day-of-the-week (`dotw`) in `Decalendar`. Gregorian calendar dates require us to look up the day of the week, while the `doty` contains all of the analogous information for `Decalendar` in its first 3 digits (hundreds, tens, and ones).\n\n![The components of a day-of-the-year (`doty`)](fig-doty.png){#fig-doty fig-alt=\"A 3-digit number with 3 additional digits after the decimal. The first two digits are labeled 'Dek', the third digit is labeled 'Day of the dek', the fourth digit is labeled 'Dimes', the fourth and fifth digits are labeled 'Cents', and all three digits after the decimal are labeled 'Mils'.\" fig-align=\"center\"}\n\n## Deks {#sec-summary-dek}\n\nAs mentioned in @sec-summary-doty, `deks` function as both months and weeks in `Decalendar`. A `dek` consists of 2 groups of 5 days called `pents.` Each `pent` can follow a sequence of workdays and restdays called a `pently` schedule. The code in @exm-glance generates @fig-schedules which compares the typical weekly schedule and the `Schedule 3 pently` schedule. Like other `pently` schedules, `Schedule 3` is named after the number of workdays it contains. The 3 workdays in `Schedule 3` are followed by a 2-day `pentend`, the `Decalender` equivalent of a weekend.\n\nUnlike `Schedule 3` and the other `pently` schedules, the weekly schedule is asymmetric and divides up workdays into proportions that are easier to express as fractions: 3/8 (.375), 1/3 (.3ÃÖ), and 7/24 (0.2916ÃÖ). In contrast, the proportions of the day in `pently` schedules are never [repeating decimal](https://en.wikipedia.org/wiki/Repeating_decimal) numbers. Each `Schedule 3` workday is split up symmetrically into proportions so that workday starts at .3 (7.2 hours), lasts .4 (9.6 hours), and ends at .7 (16.8 hours). @sec-pently provides more information on `Schedule 3` and the other `pently` schedules.\n\n::: {#exm-glance}\n:::\n\n<!-- 12A0366C|/Users/maptv/maptv/cal/docs/ojs.ipynb|:schedules.ipynb#fig-schedules |  | echo:true,warning:false,asis:true,eval:false -->\n\n## `Declock` time {#sec-summary-time}\n\nThe digits after the decimal in the `doty` are `Declock` units. Of these units, `mils` are notable because they provide the right level of precision for displaying time on clocks and watches. `Dimes` are also noteworthy because they are used for time zone offsets. @fig-time shows how a `Declock` [fractional day](https://en.wikipedia.org/wiki/Decimal_time#Fractional_days) time can be combined with a time zone offset. The `+0` at the end of the time in @fig-time indicates that the time is in the `Zone 0` time zone, which is equivalent to the [UTC+00:00](https://en.wikipedia.org/wiki/UTC+00:00) time zone of [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).\n\n![The components of a `Declock` time](fig-time.png){#fig-time fig-alt=\"A time shown as a 3-digit number with a one-digit time zone offset at the end separated by a plus sign. The first digit is labeled 'Dimes', the first two digits are labeled 'Cents', and the first three digits are labeled 'Mils'.\"}\n\n## `Decalendar` ordinal date {#sec-summary-deco}\n\nIn addition to being combined with a time zone offset as in @fig-time, a `doty` can be combined with a year to form a `Decalendar` ordinal (`deco`) date. @fig-date shows a `deco` date that is equivalent to January 1st, 1969 in the Gregorian calendar. The `Declock` time in @fig-time and the `deco` date in @fig-date both use a plus sign (`+`) as a delimiter. If we combined the `deco` date from @fig-date and the `Declock` time from @fig-time, we would obtain a `deco stamp`: `1960+306.000+0`. @tbl-2x2 compares `doty` and `deco` dates in its first column and `doty` and `deco stamps` in its second column.\n\n![The components of a `Decalendar` ordinal (`deco`) date](fig-date.png){#fig-date fig-alt=\"A date consisting a year and a day-of-the-year separated by a plus sign. The first two digits of the day of the year are labeled as the Dek, while the last digit is labeled as the day of the dek.\"}\n\n#### @tbl-2x2\n\n::: {.callout-note collapse=\"false\" title=\"Click to toggle table expansion\" icon=\"false\"}\n|      | date     | stamp          |\n|------|----------|----------------|\n| doty | 306      | 306.000+0      |\n| deco | 1969+306 | 1969+306.000+0 |\n\n: Comparison of `doty` and `deco` dates and `stamps` {#tbl-2x2}\n:::\n\n# Basic concepts {#sec-basics}\n\n## Fractions analogy {#sec-frac}\n\nIn the simplest terms, `Decalendar` counts fractions of a year, while `Declock` counts fractions of a day. The denominator for `Decalendar` is the number of days in the year, and the `Declock` denominator is $10^x$, where $x$ is the number of digits in the numerator. In both systems, only the numerator, not the denominator, is provided. In the context of`Decalendar`, the numerator is the days that have passed in the year, while in the context of`Declock`, the numerator is the parts of the day that have passed in the day.\n\nTo avoid any confusion between the two, we can say \"Day 5\" to mean the date when 5 days have passed this year or `Day 0` to mean the first day-of-the-year (`doty`). This is like the use of the term \"day zero\" in other contexts, such as epidemiology. The analogous term for times is `Dot`. The word `Dot` conveys that at its core `Declock` is a system built on [fractional days](https://en.wikipedia.org/wiki/Decimal_time#Fractional_days) expressed as decimal numbers. The 5 in `Dot 5` can be thought of as a number after a decimal (0.5) or a numerator (‚Åµ/‚ÇÅ‚ÇÄ), either way it means noon, the time when half the day has passed.\n\n## Implied tolerance and duration {#sec-imp}\n\nThe analogy to decimals or fractions is important, because it explains why adding a zero at the end of a time does not change the time, only the implied tolerance of time points or the implied duration of time intervals. If `Dot 5` is a time point, it has an implied tolerance of 5% of the day ($.5¬±.05$), because any time after `Dot 45` and before `Dot 55` ($[.45, .55)$) would round to `Dot 5`. On the other hand, if `Dot 5` is the start time for a time interval, that interval is implied to start at `Dot 5` and end before `Dot 6` ($[.5, .6)$) and thus have a duration of 10% of the day (`Dot 6`-`Dot 5`). Every additional digit we add decreases the implied tolerance and the implied duration 10-fold.\n\nIf we really want to insist on punctuality, we could include up to 5 digits in a time. Specifying times with more than 5 digits is possible, and may be useful for scientific or technical purposes, but it is analogous to providing [extremely long GPS coordinates](https://xkcd.com/2170/); at some point the level of precision stops having relevance to daily life. If we want to strive for the highest level of precision possible, we can add the word \"sharp\" or the `#` symbol to the time. Saying \"5 Sharp\" or writing `5#` means as close as possible to noon. Times that include `#` cannot have an implied duration. We can only add `#` to a time, so there is no need say \"Dot 5 Sharp\" or write `.5#`.\n\n## Context clues {#sec-context}\n\nNot saying \"Day\" or \"Dot\" in general is acceptable, because it is convenient and often the numbers make perfect sense in context. If someone says \"let's have lunch at 5\", it is clear that they are referring to noon (`Dot 5`) and not the sixth `doty` (`Day 5`). Also, the number itself may provide a clue. Numbers greater than 365 could still be a `doty`, but it would represent a day in an upcoming year, not the current year. The meaning of such dates depends on whether the current year is a common year (n=365) or a leap year (n=366). Saying \"500\" could mean `Day 134` (if n=366) or `Day 135` (if n=365) of the subsequent year, but it would most likely mean noon (`Dot 500`).\n\n## `Stamps` {#sec-stamp}\n\nIf a `Decalender` date and a `Declock` time are combined, they form a time `stamp`. The date always goes before the time in any `stamp`. When said together, the numbers \"0\" and \"5\" mean the first `doty` (`Day 0`) at noon (`Dot 5`). In written form, this would be `000.5`. This format is called `.y`, which is read the same way as `doty`, but emphasizes that the `.` is used in a floating point decimal `doty`. In other words, `doty` can be used instead of \"day of the year\" in a sentence, whereas `.y` indicates a `stamp`, such as `000.5`. Ideally, a `stamp` will include all of the information needed to identify a singular point in time, and thus should include a year and time zone.\n\n## Specific dates and times {#sec-specific}\n\nThe `stamp` in @sec-stamp assumes that the year and time zone are known. A date without a year is like a time without a time zone, both depend on the context. Most likely, we are talking about the current year and the local time zone, but it may be unclear. Including a year allows us to pinpoint a specific day, instead of a day that could happen any year. Similarly, a time with a time zone occurs once every day, rather than once in every time zone per day. The `Day 306` of 1969, would be written `1969+306` and said \"Year 1969 Day 306\" or simply \"1969 306\", while midnight in `Zone 0` would be written `.000+0` and said \"Dot 0 Zone 0\", \"0 Zone 0\", or \"0 0\". Combined together, this date and time form the `stamp 1969+306.000+0`.\n\n## Negative numbers {#sec-neg}\n\nEvery component of `Decalender` dates and `Declock` times can be negative. A negative year is before 1 BCE (Before Common Era) and a negative time zone is West of `Zone 0`. The year is usually provided without a sign, because most people rarely discuss years before 1 BCE, but numeric time zone offset must have a sign. Negative `doty` numbers work like [zero-based indexes](https://en.wikipedia.org/wiki/Zero-based_numbering) in [computer programming](https://en.wikipedia.org/wiki/Zero-based_numbering#Computer_programming) in that they label the days of the year from $-N$ to $-1$, where $N$ is the number of the days in the current year. The first `doty` is indexed by both $0$ and $-N$, while the last `doty` is indexed by both $-1$ and $N$.\n\nIn general, negative numbers show the number of parts that are left in the whole. A negative `doty` shows how many days remain in the year and a negative time [counts down](https://en.wikipedia.org/wiki/Countdown) to the end of the day. To extend the fractions analogy in @sec-frac to negative numbers, the negative number added to the whole gives us the numerator of the positive fraction ($pos = N + neg$). Positive and negative numbers arrive at the same answer from opposite directions.\n\nIn certain contexts, the choice of using a negative number over a positive number may mean that we want to emphasize how much time is left instead of how much has passed. Even though `Dot -1` and `Dot 9` are synonymous `Declock` times, the former could highlight that there is only 1 tenth (‚Öí or .1) of the day remaining before midnight. `Dot 5` and `Dot -5` both mean noon, like saying that a glass is half-empty or half-full.\n\nThe negative equivalent of `1969+306`, the `deco` date in @fig-date and @tbl-2x2, is `1970-059`. This negative `deco` date literally subtracts 59 days from the beginning of year 1970 to arrive at `Day 306` of 1969. The year in negative `deco` dates is always 1 greater than the year in the equivalent positive `deco` date. Both `1969+306` and `1970-059` translate to January 1, 1970 in the Gregorian calendar. `Decalendar` years are shifted by two months in relation to the Gregorian calendar years because `Decalendar` years start on March 1.\n\nThis shift causes the Gregorian calendar year to be 1 greater than the year in the positive `deco` dates during January and February and 1 less than the year in negative `deco` dates during every other month. For example, the `Deco` dates `1969+000` and `1970-365` are March 1, 1969 in the Gregorian calendar. Immediately after midnight on this date, the negative `doty` will change from -365 to -364, while the positive `doty` will remain at 0 At noon, the positive `deco` date will be `1969+306.500` and the negative `deco` date will be `1970-058.500`.\n\n## Units {#sec-unit}\n\n`Declock` times often have three digits because this is the best level of precision for displaying time on clocks and watches. While 3 digits are often best, `Declock` times can have any number of digits, depending on the desired precision level. `Declock` provides names for extremely precise time units, but the most relevant units are within a few orders of magnitude from a day, which is the base unit of both `Declock` and `Decalendar`. Listing the units of each, as in @tbl-unit, highlights the relationship between the two:\n\n#### @tbl-unit\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Quantity           | Name     | Symbol   | Formal Name         |\n|--------------------|----------|----------|---------------------|\n| $100$              | `hekt`   | `œÅ`      | `hectoday`          |\n| $91$               | `delt`   | `Œ¥`      | `deltakeraiayear`   |\n| $90$               | `qop`    | `œü`      | `qoppaday`          |\n| $80$               | `pi`     | `œÄ`      | `piday`             |\n| $73$               | `ep`     | `Œµ`      | `epsilonkeraiayear` |\n| $70$               | `om`     | `Œø`      | `omicronday`        |\n| $61$               | `wau`    | `œõ`      | `waukeraiayear`     |\n| $60$               | `xi`     | `Œæ`      | `xiday`             |\n| $50$               | `nu`     | `ŒΩ`      | `nuday`             |\n| $40$               | `mu`     | `Œú`      | `muday`             |\n| $30$               | `lam`    | `Œª`      | `lamdaday`          |\n| $20$               | `kap`    | `Œ∫`      | `kappaday`          |\n| $10$               | `dek`    | `Œπ`, Êó¨  | `decaday`           |\n| $1$                | `day`    | `d`, Êó•  | `day`               |\n| $10^{-1}$          | `dime`   | `‚Öí`, Êõ¥  | `deciday`           |\n| $10^{-2}$          | `cent`   | `¬¢`, `%` | `centiday`          |\n| $10^{-3}$          | `mil`    | `m`, `‚Ä∞` | `milliday`          |\n| $2 \\times 10^{-4}$ | `period` | `.`      | `didecimilliday`    |\n| $10^{-4}$          | `phrase` | `‚ó†`, `‚Ä±` | `decimilliday`      |\n| $2 \\times 10^{-5}$ | `bar`    | `|`      | `dicentimilliday`   |\n| $10^{-5}$          | `beat`   | `‚ô´`      | `centimilliday`     |\n| $10^{-6}$          | `mic`    | `Œº`      | `microday`          |\n| $10^{-7}$          | `liph`   | `mÃë`      | `decimicroday`      |\n| $10^{-8}$          | `lib`    | `mÃà`      | `centimicroday`     |\n| $10^{-9}$          | `nan`    | `n`      | `nanoday`           |\n| $10^{-10}$         | `roph`   | `ŒºÃë`      | `decinanoday`       |\n| $10^{-11}$         | `rob`    | `¬µÃà`      | `centinanoday`      |\n| $10^{-12}$         | `pic`    | `p`      | `picoday`           |\n| $10^{-13}$         | `noph`   | `nÃë`      | `decipicoday`       |\n| $10^{-14}$         | `nob`    | `nÃà`      | `centipicoday`      |\n| $10^{-15}$         | `femt`   | `f`      | `femtoday`          |\n| $10^{-16}$         | `coph`   | `pÃë`      | `decifemtoday`      |\n| $10^{-17}$         | `cob`    | `pÃà`      | `centifemtoday`     |\n| $10^{-18}$         | `att`    | `a`      | `attoday`           |\n| $10^{-19}$         | `foph`   | `fÃë`      | `deciattoday`       |\n| $10^{-20}$         | `fob`    | `fÃà`      | `centiattoday`      |\n| $10^{-21}$         | `zept`   | `z`      | `zeptoday`          |\n| $10^{-22}$         | `toph`   | `aÃë`      | `decizeptoday`      |\n| $10^{-23}$         | `tob`    | `aÃà`      | `centizeptoday`     |\n| $10^{-24}$         | `yokt`   | `y`      | `yoctoday`          |\n| $10^{-25}$         | `zoph`   | `zÃë`      | `deciyoctoday`      |\n| $10^{-26}$         | `zob`    | `zÃà`      | `centiyoctoday`     |\n| $10^{-27}$         | `ront`   | `r`      | `rontoday`          |\n| $10^{-28}$         | `yoph`   | `yÃë`      | `decirontoday`      |\n| $10^{-29}$         | `yob`    | `yÃà`      | `centirontoday`     |\n| $10^{-30}$         | `quek`   | `q`      | `quectoday`         |\n\n: The units of `Decalendar` and `Declock` {#tbl-unit}\n:::\n\nIn @tbl-unit, the units with positive exponents are used for `Decalendar`, while the ones with negative exponents are used for `Declock`. `Cents` (`¬¢`) can serve as a useful point of comparison to understand the scale of some of the units in @tbl-unit above, because each `cent` is 1 percent of the day, which is about a quarter hour (1% = 14.4 minutes). In comparison to `cents`, `mils` are ten times smaller (.1% = 1.4 minutes), `dimes` (`‚Öí`) are ten times larger (10% = 144 minutes), and `deks` (`Œπ`) are 1000 times larger (1000% = 14400 minutes). To be clear, 1 `dek` contains 10 whole days while the other units are fractions of days.\n\n`Declock` units smaller than `mils` are not easy to think of as percents of a day. For `phrases` (`‚ó†`) and `beats` (`‚ô´`), music serves as a much more useful analogy. In fact, `phrases` and `beats` are musical terms. The duration of a musical beat depends on the tempo, but a `Declock beat` is always precisely 0.864 seconds long. This translates to a tempo of 69.4ÃÖ (69‚Å¥/‚Çâ or 625/9) beats per minute, which is coincidentally also within the normal range of a resting heart rate. `Declock beats` are organized into groups of 2 called `bars` or `measures`, groups of 10 called `phrases`, and groups of 20 called `periods`. A real example of music that follows this exact pattern is Haydn's [Feldpartita](https://en.wikipedia.org/wiki/Period_(music)).\n\n`Declock` units smaller than `beats` are too small for typical daily use. For example, a `mic` (`microday`, `Œº`) is faster than a blink of an eye. Each frame in a video playing at 60 frames per second will be shown for about 1.93 `liphs` (`milliphrases`, `mÃë`). A `lib` (`millibeat`, `mÃà`) is not enough time for a neuron in a human brain to fire and return to rest. Sound can travel from a person's ear to their other ear in about 7 `nans` (`nanodays`). Noticing that a sound reaches one ear before the other can help humans to localize the source of the sound, but a `roph` (`microphrase`, `ŒºÃë`) difference might be too fast to notice. In a `rob` (`microbeat`, `¬µÃà`), a USB 3.0 cable transferring 5 gigabytes per second can send 4.32 kilobytes, the equivalent of a text file with 4320 characters.\n\n# Time zones {#sec-zone}\n\nOf the units discussed above, `dimes` are notable, because they are the units of `Declock` time zones. The times in `Zone 1` are one `dime` earlier than `Zone 0` and two `dimes` earlier than `Zone -1`. Time zones are important, because different time zones could have very different times and even different dates. Mexico City is in `Zone -3` and Tokyo is in `Zone 4`, meaning for the majority of the day (`Dot 7` to be exact) Tokyo is one day ahead of Mexico City. If it is noon on the last day of the year 1999 in Mexico City, it will be `Dot 200` on the first day of the year 2000 in Tokyo. This date and time in Mexico City can be written `2000+000.200+4` or `2001-364.800+4`, while the equivalent date and time for Tokyo is `1999+365.500-3` or `2000-000.500-3`. If we removed the time zone from the end, we would not know that all of these `stamps` describe the same moment in time.\n\n`Declock` groups together the 26 [Coordinated Universal Time (UTC) offsets](https://en.wikipedia.org/wiki/List_of_UTC_offsets) (-12:00 to +14:00) into 11 time zones (`Zone -5` to `Zone 6`) by converting hours into `dimes` ($dimes = hours \\div 2.4$) and rounding to the nearest whole number ($dimes = \\lfloor hours \\div 2.4 \\rceil$). This time zone system is simple and facilitates conversion, but locations on the edges of the main time zones may experience a significant difference between `Dot 5` and [solar noon](https://en.wikipedia.org/wiki/Noon#Solar_noon), the point when the sun reaches its highest position in the sky.\n\nIf we decide to prioritize the amount of sunlight at `Dot 5` over simplicity and ease of conversion, we could convert degrees of longitude into `cents` or `mils`, instead of converting hours into `dimes`. For example, we could say that Mexico City is in `Zone -275` instead of `Zone -3`, because the longitude of Mexico City is 99 degrees West, which translates to an offset of -275 `mils` ($mils = degrees \\div .36$). Essentially, we could create as many additional `Declock` time zones are desired simply by adding digits to the end of each time zone. Adding one digit yields 110 double-digit `cent` time zones, adding two digits creates 1100 triple-digit `mil` time zones, and so on.\n\n# Related systems {#sec-related}\n\n## French Republican calendar {#sec-frc}\n\n### French Republican calendar *d√©cades* {#sec-frcd}\n\nThe [French Republican calendar](https://en.wikipedia.org/wiki/French_Republican_calendar) and `Decalendar` both organize days in groups of 10. A group of 10 days in the French Republican calendar is called a *d√©cade*, while a group of 10 days in `Decalendar` is called a `dek`. The names of the days in a `dek` are derived from their [zero-based](https://en.wikipedia.org/wiki/Zero-based_numbering) cardinal numbers (zero, one, two...), whereas the days of the *d√©cade* are named after their ordinal numbers (first, second, third...). In both cases, the names are based on Roman and Greek [numeral prefixes](https://en.wikipedia.org/wiki/Numeral_prefix#Table_of_number_prefixes_in_English). @tbl-dotd provides the cardinal numbers, one-letter codes, names, and types of the days of the `dek` as well as the names of their French Republican calendar equivalents.\n\n#### @tbl-dotd\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| \\#  | Code | Name   | Type | French     |\n|-----|------|--------|------|------------|\n| 0   | N    | Nulday | work | *primidi*  |\n| 1   | U    | Unoday | work | *duodi*    |\n| 2   | D    | Duoday | work | *tridi*    |\n| 3   | T    | Triday | rest | *quartidi* |\n| 4   | Q    | Quaday | rest | *quintidi* |\n| 5   | P    | Penday | work | *sextidi*  |\n| 6   | H    | Hexday | work | *septidi*  |\n| 7   | S    | Sepday | work | *octidi*   |\n| 8   | O    | Octday | rest | *nonidi*   |\n| 9   | E    | Ennday | rest | *d√©cadi*   |\n\n: The days of the `dek` and their French Republican calendar equivalents {#tbl-dotd}\n:::\n\n### French Republican calendar time {#sec-frct}\n\nThe French Republican calendar and `Declock` both break the day down into decimal portions. In `Declock`, a `dime` is a tenth (‚Öí) of a day, a `cent` is a hundredth (10‚Åª¬≤) of a day, a `mil` is a thousandth (10‚Åª¬≥) of a day, and a `beat` is a hundred thousandth (10‚Åª‚Åµ) of a day, whereas the French Republican calendar calls these units decimal hours, decimal minutes, *d√©cimes*, and decimal seconds, respectively. @tbl-dime shows the start times of each `dime` (‚Öí) in a day and its equivalent in 24-hour and 12-hour standard time.\n\n#### @tbl-dime\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| ‚Öí   | 24-hour | 12-hour |\n|-----|---------|---------|\n| 0   | 00:00   | 12:00AM |\n| 1   | 02:24   | 2:24AM  |\n| 2   | 04:48   | 4:48AM  |\n| 3   | 07:12   | 7:12AM  |\n| 4   | 09:36   | 9:36AM  |\n| 5   | 12:00   | 12:00PM |\n| 6   | 14:24   | 2:24PM  |\n| 7   | 16:48   | 4:48PM  |\n| 8   | 19:12   | 7:12PM  |\n| 9   | 21:36   | 9:36PM  |\n\n: The `dimes` in a day and their standard time equivalents {#tbl-dime}\n:::\n\n## Swatch Internet Time {#sec-sit}\n\n[Swatch Internet Time](https://en.wikipedia.org/wiki/Swatch_Internet_Time) uses the term \".beats\" to describe a thousandth of day (10‚Åª¬≥). In `Declock`, a `beat` is a hundred thousandth of a day (10‚Åª‚Åµ), because this is the approximate duration of a heartbeat or a beat of music. Another difference is that Swatch Internet Time has only 1 time zone, [UTC+1](https://en.wikipedia.org/wiki/List_of_UTC_offsets#UTC+01:00,_A), limiting its utility outside of Central Europe or West Africa. `Declock` has 11 main single-digit time zones, but can support as many time zones as needed by adding additional digits. More information on `Declock` time zones can be found in @sec-zone.\n\n## Gregorian calendar {#sec-greg}\n\n### Coordinate analogy {#sec-coor}\n\nIn the Gregorian calendar, dates are like a set of coordinates, where the month and the day-of-the-month (`dotm`) are like longitude and latitude in the [geographic coordinate system](https://en.wikipedia.org/wiki/Geographic_coordinate_system) or x and y in the [Cartesian coordinate system](https://en.wikipedia.org/wiki/Cartesian_coordinate_system). The `Decalendar` ordinal (`deco`) date format provides two coordinates in one number: the day-of-the-year (`doty`). @tbl-greg2doty shows the `doty` number of all Gregorian calendar dates.\n\nTo locate a specific date in @tbl-greg2doty, first find the month among the columns (think of the month as an x-axis value) and then move down through the rows to the `dotm` (which is like a y-axis value). To convert a `doty` number to a Gregorian calendar date, we first find the `dek` number (the first two digits of the `doty`) among the rows in @tbl-doty2greg and then move to the right to the `dotd` (the last digit of the `doty`). The dates in @tbl-doty2greg are shown in `mm-dd` format.\n\n#### @tbl-greg2doty\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Day | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec | Jan | Feb |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| 1   | 0   | 31  | 61  | 92  | 122 | 153 | 184 | 214 | 245 | 275 | 306 | 337 |\n| 2   | 1   | 32  | 62  | 93  | 123 | 154 | 185 | 215 | 246 | 276 | 307 | 338 |\n| 3   | 2   | 33  | 63  | 94  | 124 | 155 | 186 | 216 | 247 | 277 | 308 | 339 |\n| 4   | 3   | 34  | 64  | 95  | 125 | 156 | 187 | 217 | 248 | 278 | 309 | 340 |\n| 5   | 4   | 35  | 65  | 96  | 126 | 157 | 188 | 218 | 249 | 279 | 310 | 341 |\n| 6   | 5   | 36  | 66  | 97  | 127 | 158 | 189 | 219 | 250 | 280 | 311 | 342 |\n| 7   | 6   | 37  | 67  | 98  | 128 | 159 | 190 | 220 | 251 | 281 | 312 | 343 |\n| 8   | 7   | 38  | 68  | 99  | 129 | 160 | 191 | 221 | 252 | 282 | 313 | 344 |\n| 9   | 8   | 39  | 69  | 100 | 130 | 161 | 192 | 222 | 253 | 283 | 314 | 345 |\n| 10  | 9   | 40  | 70  | 101 | 131 | 162 | 193 | 223 | 254 | 284 | 315 | 346 |\n| 11  | 10  | 41  | 71  | 102 | 132 | 163 | 194 | 224 | 255 | 285 | 316 | 347 |\n| 12  | 11  | 42  | 72  | 103 | 133 | 164 | 195 | 225 | 256 | 286 | 317 | 348 |\n| 13  | 12  | 43  | 73  | 104 | 134 | 165 | 196 | 226 | 257 | 287 | 318 | 349 |\n| 14  | 13  | 44  | 74  | 105 | 135 | 166 | 197 | 227 | 258 | 288 | 319 | 350 |\n| 15  | 14  | 45  | 75  | 106 | 136 | 167 | 198 | 228 | 259 | 289 | 320 | 351 |\n| 16  | 15  | 46  | 76  | 107 | 137 | 168 | 199 | 229 | 260 | 290 | 321 | 352 |\n| 17  | 16  | 47  | 77  | 108 | 138 | 169 | 200 | 230 | 261 | 291 | 322 | 353 |\n| 18  | 17  | 48  | 78  | 109 | 139 | 170 | 201 | 231 | 262 | 292 | 323 | 354 |\n| 19  | 18  | 49  | 79  | 110 | 140 | 171 | 202 | 232 | 263 | 293 | 324 | 355 |\n| 20  | 19  | 50  | 80  | 111 | 141 | 172 | 203 | 233 | 264 | 294 | 325 | 356 |\n| 21  | 20  | 51  | 81  | 112 | 142 | 173 | 204 | 234 | 265 | 295 | 326 | 357 |\n| 22  | 21  | 52  | 82  | 113 | 143 | 174 | 205 | 235 | 266 | 296 | 327 | 358 |\n| 23  | 22  | 53  | 83  | 114 | 144 | 175 | 206 | 236 | 267 | 297 | 328 | 359 |\n| 24  | 23  | 54  | 84  | 115 | 145 | 176 | 207 | 237 | 268 | 298 | 329 | 360 |\n| 25  | 24  | 55  | 85  | 116 | 146 | 177 | 208 | 238 | 269 | 299 | 330 | 361 |\n| 26  | 25  | 56  | 86  | 117 | 147 | 178 | 209 | 239 | 270 | 300 | 331 | 362 |\n| 27  | 26  | 57  | 87  | 118 | 148 | 179 | 210 | 240 | 271 | 301 | 332 | 363 |\n| 28  | 27  | 58  | 88  | 119 | 149 | 180 | 211 | 241 | 272 | 302 | 333 | 364 |\n| 29  | 28  | 59  | 89  | 120 | 150 | 181 | 212 | 242 | 273 | 303 | 334 | 365 |\n| 30  | 29  | 60  | 90  | 121 | 151 | 182 | 213 | 243 | 274 | 304 | 335 |     |\n| 31  | 30  |     | 91  |     | 152 | 183 |     | 244 |     | 305 | 336 |     |\n\n: Gregorian calendar date to `doty` conversion {#tbl-greg2doty}\n:::\n\n#### @tbl-doty2greg\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Dek | 0     | 1     | 2     | 3     | 4     | 5     | 6     | 7     | 8     | 9     |\n|-----|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|\n| 0   | 03-01 | 03-02 | 03-03 | 03-04 | 03-05 | 03-06 | 03-07 | 03-08 | 03-09 | 03-10 |\n| 1   | 03-11 | 03-12 | 03-13 | 03-14 | 03-15 | 03-16 | 03-17 | 03-18 | 03-19 | 03-20 |\n| 2   | 03-21 | 03-22 | 03-23 | 03-24 | 03-25 | 03-26 | 03-27 | 03-28 | 03-29 | 03-30 |\n| 3   | 03-31 | 04-01 | 04-02 | 04-03 | 04-04 | 04-05 | 04-06 | 04-07 | 04-08 | 04-09 |\n| 4   | 04-10 | 04-11 | 04-12 | 04-13 | 04-14 | 04-15 | 04-16 | 04-17 | 04-18 | 04-19 |\n| 5   | 04-20 | 04-21 | 04-22 | 04-23 | 04-24 | 04-25 | 04-26 | 04-27 | 04-28 | 04-29 |\n| 6   | 04-30 | 05-01 | 05-02 | 05-03 | 05-04 | 05-05 | 05-06 | 05-07 | 05-08 | 05-09 |\n| 7   | 05-10 | 05-11 | 05-12 | 05-13 | 05-14 | 05-15 | 05-16 | 05-17 | 05-18 | 05-19 |\n| 8   | 05-20 | 05-21 | 05-22 | 05-23 | 05-24 | 05-25 | 05-26 | 05-27 | 05-28 | 05-29 |\n| 9   | 05-30 | 05-31 | 06-01 | 06-02 | 06-03 | 06-04 | 06-05 | 06-06 | 06-07 | 06-08 |\n| 10  | 06-09 | 06-10 | 06-11 | 06-12 | 06-13 | 06-14 | 06-15 | 06-16 | 06-17 | 06-18 |\n| 11  | 06-19 | 06-20 | 06-21 | 06-22 | 06-23 | 06-24 | 06-25 | 06-26 | 06-27 | 06-28 |\n| 12  | 06-29 | 06-30 | 07-01 | 07-02 | 07-03 | 07-04 | 07-05 | 07-06 | 07-07 | 07-08 |\n| 13  | 07-09 | 07-10 | 07-11 | 07-12 | 07-13 | 07-14 | 07-15 | 07-16 | 07-17 | 07-18 |\n| 14  | 07-19 | 07-20 | 07-21 | 07-22 | 07-23 | 07-24 | 07-25 | 07-26 | 07-27 | 07-28 |\n| 15  | 07-29 | 07-30 | 07-31 | 08-01 | 08-02 | 08-03 | 08-04 | 08-05 | 08-06 | 08-07 |\n| 16  | 08-08 | 08-09 | 08-10 | 08-11 | 08-12 | 08-13 | 08-14 | 08-15 | 08-16 | 08-17 |\n| 17  | 08-18 | 08-19 | 08-20 | 08-21 | 08-22 | 08-23 | 08-24 | 08-25 | 08-26 | 08-27 |\n| 18  | 08-28 | 08-29 | 08-30 | 08-31 | 09-01 | 09-02 | 09-03 | 09-04 | 09-05 | 09-06 |\n| 19  | 09-07 | 09-08 | 09-09 | 09-10 | 09-11 | 09-12 | 09-13 | 09-14 | 09-15 | 09-16 |\n| 20  | 09-17 | 09-18 | 09-19 | 09-20 | 09-21 | 09-22 | 09-23 | 09-24 | 09-25 | 09-26 |\n| 21  | 09-27 | 09-28 | 09-29 | 09-30 | 10-01 | 10-02 | 10-03 | 10-04 | 10-05 | 10-06 |\n| 22  | 10-07 | 10-08 | 10-09 | 10-10 | 10-11 | 10-12 | 10-13 | 10-14 | 10-15 | 10-16 |\n| 23  | 10-17 | 10-18 | 10-19 | 10-20 | 10-21 | 10-22 | 10-23 | 10-24 | 10-25 | 10-26 |\n| 24  | 10-27 | 10-28 | 10-29 | 10-30 | 10-31 | 11-01 | 11-02 | 11-03 | 11-04 | 11-05 |\n| 25  | 11-06 | 11-07 | 11-08 | 11-09 | 11-10 | 11-11 | 11-12 | 11-13 | 11-14 | 11-15 |\n| 26  | 11-16 | 11-17 | 11-18 | 11-19 | 11-20 | 11-21 | 11-22 | 11-23 | 11-24 | 11-25 |\n| 27  | 11-26 | 11-27 | 11-28 | 11-29 | 11-30 | 12-01 | 12-02 | 12-03 | 12-04 | 12-05 |\n| 28  | 12-06 | 12-07 | 12-08 | 12-09 | 12-10 | 12-11 | 12-12 | 12-13 | 12-14 | 12-15 |\n| 29  | 12-16 | 12-17 | 12-18 | 12-19 | 12-20 | 12-21 | 12-22 | 12-23 | 12-24 | 12-25 |\n| 30  | 12-26 | 12-27 | 12-28 | 12-29 | 12-30 | 12-31 | 01-01 | 01-02 | 01-03 | 01-04 |\n| 31  | 01-05 | 01-06 | 01-07 | 01-08 | 01-09 | 01-10 | 01-11 | 01-12 | 01-13 | 01-14 |\n| 32  | 01-15 | 01-16 | 01-17 | 01-18 | 01-19 | 01-20 | 01-21 | 01-22 | 01-23 | 01-24 |\n| 33  | 01-25 | 01-26 | 01-27 | 01-28 | 01-29 | 01-30 | 01-31 | 02-01 | 02-02 | 02-03 |\n| 34  | 02-04 | 02-05 | 02-06 | 02-07 | 02-08 | 02-09 | 02-10 | 02-11 | 02-12 | 02-13 |\n| 35  | 02-14 | 02-15 | 02-16 | 02-17 | 02-18 | 02-19 | 02-20 | 02-21 | 02-22 | 02-23 |\n| 36  | 02-24 | 02-25 | 02-26 | 02-27 | 02-28 | 02-29 |       |       |       |       |\n\n: `Doty` number to Gregorian calendar date conversion {#tbl-doty2greg}\n:::\n\n### Gregorian calendar date conversion {#sec-conv}\n\nIn addition to using a conversion table like @tbl-greg2doty, we can convert between Gregorian calendar dates and `Decalendar doty` dates programmatically. The code in @exm-coor is derived from the [`days_from_civil`](http://howardhinnant.github.io/date_algorithms.html#days_from_civil) and [`civil_from_days`](http://howardhinnant.github.io/date_algorithms.html#civil_from_days) algorithms described by [Howard Hinnant](https://howardhinnant.github.io/) in [*chrono-Compatible Low-Level Date Algorithms*](http://howardhinnant.github.io/date_algorithms.html) [-@hinnant2014]. The output of the `greg2doty` function is a `doty` number, while its inverse function, `doty2greg`, returns an array containing a month and a `dotm` number.\n\n::: {#exm-coor}\n:::\n\n#### JavaScript\n\n##### `greg2doty`\n\n\n```{javascript}\n#| tags: [greg2doty]\nfunction greg2doty(month = 1, day = 1) {\n    return Math.floor(\n        (153 * (month > 2 ? month - 3 : month + 9) + 2) / 5 + day - 1\n)}\n\ngreg2doty()\n```\n\n\n##### `doty2greg`\n\n\n```{javascript}\n#| tags: [doty2greg]\nfunction doty2greg(doty = 306) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return [Math.floor(m < 10 ? m + 3 : m - 9), Math.floor(doty - (153 * m + 2) / 5 + 2)];\n}\n\ndoty2greg()\n```\n\n\n#### Julia\n\n##### `greg2doty`\n\n\n```{julia}\n#| tags: [greg2doty]\nfunction greg2doty(month=1, day=1)\n    Int(floor((153 * (month > 2 ? month - 3 : month + 9) + 2) / 5 + day - 1))\nend\n\ngreg2doty()\n```\n\n\n##### `doty2greg`\n\n\n```{julia}\n#| tags: [doty2greg]\nfunction doty2greg(doty = 306)\n    m = floor((5 * doty + 2) / 153);\n    return Int(m < 10 ? m + 3 : m - 9), Int(floor(doty - (153 * m + 2) / 5 + 2))\nend\n\ndoty2greg()\n```\n\n\n#### Python\n\n##### `greg2doty`\n\n\n```{python}\n#| tags: [greg2doty]\ndef greg2doty(month=1, day=1):\n    return (153 * (month - 3 if month > 2 else month + 9) + 2) // 5 + day - 1\n\ngreg2doty()\n```\n\n\n##### `doty2greg`\n\n\n```{python}\n#| tags: [doty2greg]\ndef doty2greg(doty=306):\n    m = (5 * doty + 2) // 153\n    return m + 3 if m < 10 else m - 9, doty - (153 * m + 2) // 5 + 1\n\ndoty2greg()\n```\n\n\n#### R\n\n##### `greg2doty`\n\n::: {#03f2f662 .cell tags='[\"greg2doty\"]' execution_count=1}\n``` {.r .cell-code}\ngreg2doty <- function(month = 1, day = 1) {\n    floor((153 * (ifelse(month > 2, month - 3, month + 9)) + 2) / 5 + day - 1)\n}\n\ngreg2doty()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n306\n```\n:::\n:::\n\n\n##### `doty2greg`\n\n::: {#78d05172 .cell tags='[\"doty2greg\"]' execution_count=2}\n``` {.r .cell-code}\ndoty2greg <- function(doty = 306) {\n    m <- floor((5 * doty + 2) / 153)\n    c(ifelse(m < 10, m + 3, m - 9), floor(doty - (153 * m + 2) / 5 + 2))\n}\ndoty2greg()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<style>\n.list-inline {list-style: none; margin:0; padding: 0}\n.list-inline>li {display: inline-block}\n.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n</style>\n<ol class=list-inline><li>1</li><li>1</li></ol>\n```\n:::\n:::\n\n\n:::\n\n---\njupyter:\n  kernelspec:\n    display_name: R\n    language: R\n    name: ir\n  language_info:\n    codemirror_mode: r\n    file_extension: .r\n    mimetype: text/x-r-source\n    name: R\n    pygments_lexer: r\n    version: 4.3.1\n---\n",
    "supporting": [
      "ojs_files/figure-ipynb"
    ],
    "filters": []
  }
}