{
  "hash": "d7278959d9b5d1a026ac9e98f44857c3",
  "result": {
    "markdown": "---\ntitle: \"Decalendar and Declock\"\nlicense: \"CC BY-SA\"\nauthor:\n  - name: Martin Skarzynski\n    url: https://mskar.github.io\ncitation:\n  url: https://mskar.github.io/cal\n  issued: 2023\n---\n\n# Introduction {#sec-intro}\n\n## Day-of-the-year {#sec-intro-doty}\n\n`Decalendar`[^decalendar] is a [decimal](https://en.wikipedia.org/wiki/Decimal) calendar🗓️system and `Declock`[^declock] is a decimal timekeeping⏳system. Instead of months, weeks, hours, minutes, and seconds, `Decalendar` and `Declock` use a number called the day-of-the-year (`doty`)[^doty]. @fig-bar-doty displays the current `doty` (\\${styledDotyDate}.\\${styledDotyTime}) as a bar chart. The [integer part](https://en.wikipedia.org/wiki/Decimal#:~:text=The%20integer%20part%20or%20integral%20part%20of%20a%20decimal%20numeral%20is%20the%20integer%20written%20to%20the%20left%20of%20the%20decimal%20separator) of the `doty` is the `Decalendar` date[^date] (\\${setStyle(dotyDate, d3.schemePaired\\[1\\])}) and the [fractional part](https://en.wikipedia.org/wiki/Decimal#:~:text=The%20part%20from%20the%20decimal%20separator%20to%20the%20right%20is%20the%20fractional%20part%2C%20which%20equals%20the%20difference%20between%20the%20numeral%20and%20its%20integer%20part.) is the `Declock` time[^time] (\\${setStyle(dotyTime, d3.schemePaired\\[2\\])}).\n\n[^decalendar]: `Decalendar`: a calendar system that uses `deks` instead of months and weeks\n[^declock]: `Declock`: a timekeeping system that uses fractional days instead of hours, minutes, and seconds\n[^doty]: `doty`: day-of-the-year; an alternative to months, weeks, hours, minutes, and seconds\n[^date]: `doty` date: the integer part of the `doty`; an alternate to calendar dates and week dates\n[^time]: `doty` time: the fractional part of the `doty`; an alternate to hours, minutes and seconds\n\nThe top two bars in @fig-bar-doty (旬 and 日) show the two components of the `Decalendar` date (\\${setStyle(dotyDate, d3.schemePaired\\[1\\])}): the `dek`[^dek]  (\\${styledDek}) and the day-of-the-`dek`[^dotd] (\\${styledDotd}). A `dek` is a group of 10 days that fulfills the role of months and weeks in `Decalendar`. Therefore, the `dek` and the day-of-the-`dek` (`dotd`) in `Decalendar` dates are analogous to the month and day-of-the-month (`dotm`) in [calendar dates](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) (`mm-dd`) and the week and day-of-the-week (`dotw`) in [week dates](https://en.wikipedia.org/wiki/ISO_8601#Week_dates) (`Www-d`).\n\n[^dek]: `dek`: a group of 10 days; the first two digits of the `Decalendar` date; an alternate to month and weeks\n[^dotd]: `dotd`: one of the 10 days in a `dek`; the last digit of the `Decalendar` date; an alternate to the day-of-the-month and day-of-the-week\n\nThe bottom three bars in @fig-bar-doty (%, ‰, and ♫) show components of the `Declock` time (\\${setStyle(dotyTime, d3.schemePaired\\[2\\])}):\n`cents`[^cent] (\\${styledCent}), `mils`[^mil] (\\${styledMil}), and `beats`[^beat] (\\${styledBeat}). A `cent` is 1% of the day, which is a little less than a quarter hour. A `mil` (`‰`) is a tenth of a `cent`, which is close to a minute and a half. A `beat` is 1% of a `mil`, which is almost as long as a second, and can be thought of as a heart❤️beat or musical🎵[beat](https://en.wikipedia.org/wiki/Beat_(music)#:~:text=the%20beat%20is%20the%20basic%20unit%20of%20time) with a constant [rate](https://en.wikipedia.org/wiki/Heart_rate#:~:text=The%20American%20Heart%20Association%20states%20the%20normal%20resting%20adult%20human%20heart%20rate%20is%2060%2D100%20bpm.) or [tempo](https://en.wikipedia.org/wiki/Tempo#Basic_tempo_markings:~:text=Adagietto%20%E2%80%93%20slower%20than,56%E2%80%93108%C2%A0bpm) of 69.4̅ beats per minute. In addition to displaying time on clocks🕰️and⌚️watches, `beats` can be used to measure durations, such as the time since this webpage was loaded: \\${styledTickTime}.\n\n[^cent]: `cent`: a hundredth ($10^{-2}$) of a day; the first 2 digits of the `doty` time; an alternate to quarter hours\n[^mil]: `mil`: a thousandth ($10^{-3}$) of a day; the first 3 digits of the `doty` time; an alternate to minutes\n[^beat]: `beat`: a hundred thousandth ($10^{-5}$) of a day; the first 5 digits of the `doty` time; an alternate to seconds\n\n\n```{ojs}\n//| echo: false\n//| label: fig-bar-doty\n//| fig-cap: \"Doty bar chart\"\n//| fig-align: \"center\"\n//| column: body\n// https://observablehq.com/@fheyen/barchart-clock\n{\nconst W = width > 1250 ? width * 2 / 3 : width > 1150 ? width * 3 / 4 : width > 1050 ? width * 4 / 5 : width > 950 ? width * 5 / 6 : width > 850 ? width : width > 750 ? width * 1.02 : width > 650 ? width * 1.06 : width > 550 ? width * 1.1 : width > 450 ? width * 1.14 : width * 1.18;\n  const H = 156;\n  const barX = 1;\n  const firstBarY = 1;\n  const svg = d3\n    .create(\"svg\")\n    .attr(\"width\", W)\n    .attr(\"viewBox\", [0, 0, W, H]);\n  const xRange = [0, W - 100];\n  const scaleM = d3.scaleLinear()\n    .domain([0, 10])\n    .range(xRange);\n  const scaleCandB = d3.scaleLinear()\n    .domain([0, 100])\n    .range(xRange);\n  const scaleDek = d3.scaleLinear()\n    .domain([0, 37])\n    .range(xRange);\n  // Background bars to show where 100% lies\n  svg.selectAll('.background')\n    .data(['dek', 'dotd', 'cents', \"mils\", 'beats'])\n    .enter()\n    .append('rect')\n    .attr('class', 'background timeBar')\n    .attr('width', W-100)\n    .attr('y', (d,i)=>i*30+firstBarY)\n  // Dek/Dotd\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY)\n    .attr('width', d => scaleDek(Number(dotyDek)+Number(dotyDotd)/10+Number(barCents)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY)\n    .attr('width', d => scaleDek(dotyDek))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+30)\n    .attr('width', d => scaleM(Number(dotyDotd)+Number(barCents)/100+Number(barMils)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+30)\n    .attr('width', d => scaleM(dotyDotd))\n  svg.selectAll('.tickDek')\n    .data(d3.range(width > 500 ? 4: 6, 37))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickDek')\n    .attr('x', d=>scaleDek(d)+barX)\n    .attr('y', firstBarY)\n    .attr('height', d=>d%(width > 500 ? 2 : 3)===0? 6:4)\n  // Cent ticks\n  svg.selectAll('.tickDotd')\n    .data(d3.range(width > 500 ? 1: 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickDotd')\n    .attr('x', d=>scaleM(d)+barX)\n    .attr('y', firstBarY+49)\n    .attr('height', 6)\n  svg.selectAll('.tickLabel')\n    .data(d3.range(width > 500 ? 4: 6, width > 500 ? 37: 35, width > 500 ? 2: 3))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel')\n    .attr('x', d=>scaleDek(d)+barX+.5)\n    .attr('y', firstBarY+22)\n    .text(d=>d)\n  // Cents/Mils\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+60)\n    .attr('width', d => scaleCandB(Number(barCents)+Number(barMils)/10+Number(barBeats)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+60)\n    .attr('width', d => scaleCandB(barCents))\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+90)\n    .attr('width', d => scaleM(Number(barMils)+Number(barBeats)/100+Number(barMb)/100000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+90)\n    .attr('width', d => scaleM(barMils))\n  // Cent ticks\n  svg.selectAll('.tickC')\n    .data(d3.range(width > 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC')\n    .attr('x', d=>scaleM(d/10)+barX)\n    .attr('y', firstBarY+60)\n    .attr('height', d=>d%2===0? 8:5)\n  svg.selectAll('.tickC1')\n    .data(d3.range(width > 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickC1')\n    .attr('x', d=>scaleM(d/10)+barX)\n    .attr('y', d=>d%2===0? firstBarY+77:firstBarY+80)\n    .attr('height', d=>d%2===0? 8:5)\n  // Mil ticks\n  svg.selectAll('.tickM')\n    .data(d3.range(width > 500 ? 1 : 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM')\n    .attr('x', d=>scaleM(d)+barX)\n    .attr('y', firstBarY+90)\n    .attr('height', 6)\n  svg.selectAll('.tickM1')\n    .data(d3.range(width > 500 ? 1 : 2, 10))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickM1')\n    .attr('x', d=>scaleM(d)+barX)\n    .attr('y', firstBarY+92.5)\n    .attr('height', 2.5)\n  svg.selectAll('.tickLabel1')\n    .data(d3.range(width > 500 ? 1 : 2, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel1')\n    .attr('x', d=>scaleM(d)+barX+.5)\n    .attr('y', firstBarY+47)\n    .text(d=>d)\n  svg.selectAll('.tickLabel2')\n    .data(d3.range(width > 500 ? 1 : 2, 10))\n    .enter()\n    .append('text')\n    .attr('class', 'tickLabel2')\n    .attr('x', d=>scaleM(d)+barX+.5)\n    .attr('y', firstBarY+112)\n    .text(d=>d)\n  // Beats\n  svg\n    .append('rect')\n    .attr('class', 'timeBar')\n    .attr('y', firstBarY+120)\n    .attr('width', d => scaleCandB(Number(barBeats)+Number(barMb)/1000))\n  svg\n    .append('rect')\n    .attr('class', 'timeBarFull')\n    .attr('y', firstBarY+120)\n    .attr('width', d => scaleCandB(barBeats))\n  // Beat ticks\n  svg.selectAll('.tickB')\n    .data(d3.range(width > 500 ? 10 : 20, 100))\n    .enter()\n    .append('rect')\n    .attr('class', 'tickB')\n    .attr('x', d=>scaleM(d/10)+barX)\n    .attr('y', firstBarY+120)\n    .attr('height', d=>d%2===0? 9:6)\n  // Labels\n  svg.selectAll('.timeLabel')\n    .data([`${dotyDek}旬`, `${dotyDotd}日`, `${barCents}%`, `${barMils}‰`, `${barBeats}♫`])\n    .enter()\n    .append('text')\n    .attr('class', 'timeLabel')\n    .attr('x', barX+2)\n    .attr('y', (d,i)=>i*30+firstBarY+20)\n    .text(d=>d)\n  return svg.node();\n}\n```\n\n```{ojs}\n//| echo: false\nhtml`<style>\n  text {\n    fill: #000;\n    font-family: sans-serif;\n    font-size: 20px;\n    text-anchor: middle;\n  }\n  .timeLabel {\n    text-anchor: start;\n  }\n  .timeBar, .timeBarFull {\n    x: 1px;\n    height: 25px;\n    rx: 5px;\n    stroke: #aaa;\n  }\n  .timeBar {\n    fill: #e8e8e8;\n  }\n  .timeBarFull {\n    fill: #ccffff;\n  }\n  .background {\n    fill: white;\n  }\n  .tickDek, .tickDotd, .tickDotd1, .tickC, .tickC1, .tickM, .tickM1, .tickB {\n    stroke: none;\n    fill: #666;\n    width: 1px;\n  }\n</style>`\n```\n\n\nAs an alternative to `doty` dates, `Decalendar` can express dates in fractional years, which are similar to the [fractional days](https://en.wikipedia.org/wiki/Decimal_time#Fractional_days) used in `doty` times. Fractional year dates[^year] can be combined with years into one number and are useful for marking periods of 73 days in the `Decalendar` year. Every 73 days, the `Decalendar` fractional year date increases by .2 (⅕). The current `Decalendar` fractional year date is \\${setStyle(yearDate.toString().slice(4), d3.schemePaired\\[10\\])}.\n\n[^year]: fractional year date: a year and the proportion of that year that has passed; an alternative to `Decalendar` dates\n\nNow it's your turn! Move the sliders🎚️in @exm-intro-doty to adjust the `doty`, fractional year, month, and `dotm` values and see the corresponding 1) Northern Hemisphere season, 2) Southern Hemisphere season, and 3) Zodiac sign in @lst-intro-doty. Try selecting a special date, like your birthday🎂! You can also press the Play▶️button and then sit back and watch the sliders cycle🔄back and forth from the start to the end of the `Decalendar` year. The sliders cycle through an entire year in 36.5 `beats`, a million times faster🏎️than the actual speed of time!\n\n::: {#exm-intro-doty}\n:::\n\n::: {.grid}\n\n::: {.g-col-6}\n\n```{ojs}\n//| echo: false\nviewof inputDoty = Inputs.range([0, 365], {value: 306, step: 1, label: \"doty\"});\n\nviewof year = transformInput(\n    Inputs.range([0, .999], {step: .001, label: \"year\"}),\n    {bind: viewof inputDoty, transform: (x => x / 365), invert: (x => x * 365)}\n);\n\nviewof monthInput = transformInput(\n    Inputs.range([1, 12], {step: 1, label: \"month\"}),\n    {bind: viewof inputDoty, transform: doty2month, invert: month2doty}\n);\n\nviewof dotmInput = transformInput(\n    Inputs.range([1, 31], {step: 1, label: \"dotm\"}),\n    {bind: viewof inputDoty, transform: doty2dotm, invert: (x => Math.floor(( 153 * (\n        viewof monthInput.value > 2\n        ? viewof monthInput.value - 3\n        : viewof monthInput.value + 9) + 2\n    ) / 5 + x - 1\n))});\n```\n\n:::\n\n::: {.g-col-6}\n\n1. \\${inputDotySeason\\[0\\]}\n2. \\${inputDotySeason\\[1\\]}\n3. \\${inputDotyZodiac}\n\n\n```{ojs}\n//| echo: false\nviewof scrubberDoty = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864})\n```\n\n\n:::\n\n:::\n\n::: {.column-margin}\n```{#lst-intro-doty lst-cap=\"Date to season conversion\"}\n```\n:::\n\n#### `Doty` Observable code {#sec-ojs-code-doty .appendix}\n\n##### Functions {.appendix}\n\n\n```{ojs}\n// https://observablehq.com/@observablehq/synchronized-inputs\nfunction set(input, value) {\n  input.value = value;\n  input.dispatchEvent(new Event(\"input\", {bubbles: true}));\n}\n// https://observablehq.com/@mbostock/scrubber\nfunction Scrubber(values, {\n  format = value => value,\n  initial = 0,\n  direction = 1,\n  delay = null,\n  autoplay = true,\n  loop = true,\n  loopDelay = null,\n  alternate = false\n} = {}) {\n  values = Array.from(values);\n  const form = html`<form style=\"font: 12px var(--sans-serif); font-variant-numeric: tabular-nums; display: flex; height: 33px; align-items: center;\">\n  <button name=b type=button style=\"background-color:#002ead;color:#fff;border-radius:10px;margin-left:.4em;width: 5em;\"></button>\n  <label style=\"display: flex; align-items: center;\">\n    <input name=i type=range min=0 max=${values.length - 1} value=${initial} step=1 style=\"display: none;\">\n    <output name=o style=\"display: none;\"></output>\n  </label>\n</form>`;\n  let frame = null;\n  let timer = null;\n  let interval = null;\n  function start() {\n    form.b.textContent = \"Pause\";\n    if (delay === null) frame = requestAnimationFrame(tick);\n    else interval = setInterval(tick, delay);\n  }\n  function stop() {\n    form.b.textContent = \"Play\";\n    if (frame !== null) cancelAnimationFrame(frame), frame = null;\n    if (timer !== null) clearTimeout(timer), timer = null;\n    if (interval !== null) clearInterval(interval), interval = null;\n  }\n  function running() {\n    return frame !== null || timer !== null || interval !== null;\n  }\n  function tick() {\n    if (form.i.valueAsNumber === (direction > 0 ? values.length - 1 : direction < 0 ? 0 : NaN)) {\n      if (!loop) return stop();\n      if (alternate) direction = -direction;\n      if (loopDelay !== null) {\n        if (frame !== null) cancelAnimationFrame(frame), frame = null;\n        if (interval !== null) clearInterval(interval), interval = null;\n        timer = setTimeout(() => (step(), start()), loopDelay);\n        return;\n      }\n    }\n    if (delay === null) frame = requestAnimationFrame(tick);\n    step();\n  }\n  function step() {\n    form.i.valueAsNumber = (form.i.valueAsNumber + direction + values.length) % values.length;\n    form.i.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n  }\n  form.i.oninput = event => {\n    if (event && event.isTrusted && running()) stop();\n    form.value = values[form.i.valueAsNumber];\n    form.o.value = format(form.value, form.i.valueAsNumber, values);\n  };\n  form.b.onclick = () => {\n    if (running()) return stop();\n    direction = alternate && form.i.valueAsNumber === values.length - 1 ? -1 : 1;\n    form.i.valueAsNumber = (form.i.valueAsNumber + direction) % values.length;\n    form.i.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n    start();\n  };\n  form.i.oninput();\n  if (autoplay) start();\n  else stop();\n  Inputs.disposal(form).then(stop);\n  return form;\n}\n// https://observablehq.com/@juang1744/transform-input/1\ntransformInput = function(target, {bind: source, transform = identity, involutory = false, invert = involutory ? transform : inverse(transform)} = {}){\n  if (source === undefined) {\n    source = target;\n    target = html`<div>${source}</div>`;\n  }\n  function sourceInputHandler() {\n    target.removeEventListener(\"input\", targetInputHandler);\n    setTransform(target).to(transform(source.value)).andDispatchEvent();\n    target.addEventListener(\"input\", targetInputHandler);\n  }\n  function targetInputHandler() {\n    source.removeEventListener(\"input\", sourceInputHandler);\n    setTransform(source).to(invert(target.value)).andDispatchEvent();\n    source.addEventListener(\"input\", sourceInputHandler);\n  }\n  source.addEventListener(\"input\", sourceInputHandler);\n  target.addEventListener(\"input\", targetInputHandler);\n  invalidation.then(() => {\n    source.removeEventListener(\"input\", sourceInputHandler);\n    target.removeEventListener(\"input\", targetInputHandler);\n  });\n\n  sourceInputHandler();\n  return target;\n}\nsetTransform = (input) => ({to: (value) => (input.value = value, {andDispatchEvent: (event = new Event(\"input\")) => input.dispatchEvent(event)})});\nfunction inverse(f) {\n  switch (f) {\n    case identity:  return identity;\n    case Math.sqrt: return square;\n    case Math.log:  return Math.exp;\n    case Math.exp:  return Math.log;\n    default:        return (x => solve(f, x, x));\n  }\n  function solve(f, y, x = 0) {\n    const dx = 1e-6;\n    let steps = 100, deltax, fx, dfx;\n    do {\n      fx = f(x)\n      dfx = (f(x + dx) - fx) || dx;\n      deltax = dx * (fx - y)/dfx\n      x -= deltax;\n    } while (Math.abs(deltax) > dx && --steps > 0);\n    return steps === 0 ? NaN : x;\n  }\n\n  function square(x) {\n    return x * x;\n  }\n}\nfunction identity(x) {\n  return x;\n}\n// https://observablehq.com/@observablehq/text-color-annotations-in-markdown#textcolor\nfunction setStyle(content, style = {}) {\n  function yiq(color) {\n    const {r, g, b} = d3.rgb(color);\n    return (r * 299 + g * 587 + b * 114) / 1000 / 255; // returns values between 0 and 1\n  }\n  const {\n    background,\n    color = yiq(background) >= 0.6 ? \"#111\" : \"white\",\n    padding = \"0 1px\",\n    borderRadius = \"4px\",\n    fontWeight = 900,\n    fontSize = \"1em\",\n    ...rest\n  } = typeof style === \"string\" ? {background: style} : style;\n  return htl.html`<span style=${{\n    background,\n    color,\n    padding,\n    borderRadius,\n    fontWeight,\n    ...rest\n  }}>${content}</span>`;\n}\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction dote2doty(days = 719468) {\n    const era = Math.floor((days >= 0 ? days : days - 146096) / 146097),\n        dotc = days - era * 146097,\n        yotc = Math.floor((dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365);\n    return [yotc + era * 400, dotc + Math.floor(yotc / 100) - yotc * 365 - Math.floor(yotc / 4)];\n}\nfunction unix2doty(ms = 0) {\n  return dote2doty(ms / 86400000 + 719468)\n}\n// https://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction doty2dote(year = 1969, doty = 0, zone = 0) {\n    const cycle = Math.floor((year >= 0 ? year : year - 399) / 400),\n    yote = year - cycle * 400;\n    return cycle * 146097 + yote * 365 + Math.floor(yote / 4) - Math.floor(yote / 100) + doty - zone\n}\nfunction doty2deco(yearDoty = [1969, 306], zone = 0) {\n    const yd = dote2doty(doty2dote(yearDoty[0], Math.floor(yearDoty[1])));\n    return `${yd[0]}+${(yd[1]).toString().padStart(3, \"0\")}${\n        yearDoty[1].toString().includes(\".\") ? \".\" + (\n            (yearDoty[1] > 0) ? (yearDoty[1] - zone).toString().split(\".\").pop()\n            : [...(yearDoty[1] - zone).toString().split(\".\").pop()].map(\n                (e, i, a) => (i + 1 === a.length) ? 10 - e : 9 - e\n            ).join(\"\")\n        ) : \"\"\n    }`\n}\nfunction unix2deco(ms = 0) {\n    return doty2deco(unix2doty(ms));\n};\n// http://howardhinnant.github.io/date_algorithms.html#days_from_civil\nfunction greg2doty(month = 1, day = 1) {\n    return Math.floor(\n        (153 * (month > 2 ? month - 3 : month + 9) + 2) / 5 + day - 1\n)}\n// http://howardhinnant.github.io/date_algorithms.html#civil_from_days\nfunction doty2greg(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return [Math.floor(m < 10 ? m + 3 : m - 9), doty - Math.floor((153 * m + 2) / 5) + 1];\n}\nfunction doty2toty(doty = 306) {\n    doty = Math.floor(doty)\n    return (205 <= doty && doty < 295) ? [\"Fall🍁\", \"Spring🌼\"] :\n        (110 <= doty && doty < 205) ? [\"Summer☀️\", \"Winter❄️\"] :\n        (20 <= doty && doty < 110) ? [\"Spring🌼\", \"Fall🍁\"] :\n        (0 <= doty && doty < 20) || (295 <= doty && doty <= 365)\n        ? [\"Winter❄️\", \"Summer☀️\"] : \"Unknown\"\n}\nfunction doty2zodi(doty = 306) {\n    doty = Math.floor(doty)\n    return (20 <= doty && doty < 50) ? \"Aries♈️\" :\n     (50 <= doty && doty < 81) ? \"Taurus♉️\" :\n     (81 <= doty && doty < 112) ? \"Gemini♊️\" :\n     (112 <= doty && doty < 144) ? \"Cancer♋️\" :\n     (144 <= doty && doty < 175) ? \"Leo♌️\" :\n     (175 <= doty && doty < 206) ? \"Virgo♍️\" :\n     (206 <= doty && doty < 236) ? \"Libra♎️\" :\n     (236 <= doty && doty < 266) ? \"Scorpio♏️\" :\n     (266 <= doty && doty < 296) ? \"Sagittarius♐️\" :\n     (296 <= doty && doty < 325) ? \"Capricorn♑️\" :\n     (325 <= doty && doty < 355) ? \"Aquarius♒️\" :\n     (355 <= doty && doty <= 365) || (0 <= doty && doty < 20)\n     ? \"Pisces♓️\" : \"Unknown\"\n}\nfunction doty2month(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return Math.floor(m < 10 ? m + 3 : m - 9);\n}\nfunction month2doty(month = 1) {\n    return Math.floor(\n        (153 * (month > 2 ? month - 3 : month + 9) + 2) / 5\n)}\nfunction doty2dotm(doty = 0) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return doty - Math.floor((153 * m + 2) / 5) + 1;\n}\n```\n\n\n##### Variables {.appendix}\n\n\n```{ojs}\n//| output: all\nwidth\nunix = {\n  while(true) {\n    yield Date.now();\n  }\n}\ntick = {\n  let i = 0;\n  while (true) {\n    yield Promises.tick(864, ++i);\n  }\n}\ntickDate = Math.floor(tick / 1e5)\ntickTime = tick % 1e5\ntickDelimiter = (tickDate > 0) ? \".\" : \"\"\nbarTime = unix2dote(unix).toString().split(\".\")[1].slice(0, 8)\nbarCents = barTime.slice(0, 2)\nbarMils = barTime[2]\nbarBeats = barTime.slice(3, 5)\nbarMb = barTime.slice(5)\ndeco = unix2deco(unix).slice(0, 14)\ndoty = deco.slice(5)\ndotyDate = doty.slice(0, 3)\ndotyTime = doty.slice(4)\ndotyDek = doty.slice(0, 2)\ndotyDotd = doty[2]\niso = {\n  while(true) {\n    yield new Date().toISOString()\n  }\n}\nisoDate = iso.slice(5, 10)\nisoTime = iso.slice(11, 19)\nseason = doty2toty(dotyDate)\nzodiac = doty2zodi(dotyDate)\ninputDotySeason = doty2toty(inputDoty)\ninputDotyZodiac = doty2zodi(inputDoty)\nnumbers = Array.from({length: 366}, (_, i) => i)\n```\n\n```{ojs}\nstyledDotyDate = setStyle(dotyDate, d3.schemePaired[1])\nstyledDotyTime = setStyle(dotyTime, d3.schemePaired[2])\nstyledTickTime = setStyle(tickTime, d3.schemePaired[2])\nstyledDek = setStyle(dotyDek, d3.schemePaired[0])\nstyledDotd = setStyle(dotyDotd, d3.schemePaired[9])\nstyledCent = setStyle(dotyTime.slice(0, 2), d3.schemePaired[7])\nstyledMil = setStyle(dotyTime[2], d3.schemePaired[6])\nstyledBeat = setStyle(dotyTime.slice(3, 5), d3.schemePaired[11])\n```\n\n\n##### Set values {.appendix}\n\n\n```{ojs}\n//| echo: false\nset(viewof inputDoty, scrubberDoty)\n```\n\n```{ojs}\n//| echo: false\nset(viewof decoOutput, `1969+${scrubberDeco.toString().padStart(3, \"0\")}`)\n```\n\n\n\n## Year {#sec-intro-year}\n\n`Doty` dates (`day`) and [timestamps](https://en.wikipedia.org/wiki/Timestamp#:~:text=A%20timestamp%20is%20a%20sequence%20of%20characters%20or%20encoded%20information%20identifying%20when%20a%20certain%20event%20occurred%2C%20usually%20giving%20date%20and%20time%20of%20day%2C%20sometimes%20accurate%20to%20a%20small%20fraction%20of%20a%20second.) (`day.stamp`) do not include years and thus can be reused from year to year. When a `doty` is combined with a year, it forms a `Decalendar` `ordinal`[^deco] (`deco`) and represents a specific date (`year+day`) or time (`year+day.stamp`) in a specific year, instead of than a date (`day`) or time (`day.stamp`) that occurs every year or every leap year. Using the [Observable](https://observablehq.com/about) [datetime input](https://observablehq.com/@observablehq/input-date#cell-111) in @exm-intro-date, you can select a year, month, `dotm`, hour, and minute to see the equivalent 1) `deco` timestamp (`year+day.clock`) and 2) year date (`year.yyy`) in @lst-intro-date.\n\n[^deco]: `deco`: a date and time format consisting of a year and a `doty` and analogous to ISO 8601 dates\n\n::: {#exm-intro-date}\n:::\n\n::: {.grid}\n\n::: {.g-col-6}\n\n```{ojs}\n//| echo: false\nviewof inputDatetime = Inputs.datetime({label: \"Datetime\", value: \"1970-01-01T00:00\"})\n```\n\n:::\n\n::: {.g-col-6}\n\n1. \\${dtYear}+\\${dtDotyDate}\\${dtDotyTimeDelimiter}\\${dtDotyTime}\n2. \\${styledOutputDatetimeYear}\n:::\n\n:::\n\n::: {.column-margin}\n```{#lst-intro-date lst-cap=\"Date and time conversion\" cap-location=margin}\n```\n:::\n\nIn @exm-intro-deco, you can enter numeric year and `doty` values or type in a free-form `deco` to see the resulting 1) [ISO 8601 timestamp](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) (`year-mm-ddThh:mm:ss`) and 2) year date in @lst-intro-deco. @exm-intro-deco also has a Play▶️button in that cycles from `Day` `0` to `Day` `365` of `Year` `1969`. The cycle goes up to `Day` `0` of `Year` `1970`, because `Year` `1969` is a common year and does not have a `Day` `365`.\n\nInteracting with the [number](https://observablehq.com/@observablehq/input-range#m) inputs in @exm-intro-deco, standardizes the `deco` in the [text](https://observablehq.com/@observablehq/input-text) input to ensure years are integers and `doty` values are positive numbers below 366. Nevertheless, all of the inputs in @exm-intro-deco support negative and fractional year and `doty` values. Negative `doty` values [shift](https://en.wikipedia.org/wiki/Shift_operator) dates backward in time from the start of a given year into a previous year. Similarly, negative years shift dates backward starting from `Year` `0`, which is 1 BCE (Before the [Common Era](https://en.wikipedia.org/wiki/Common_Era)).\n\n::: {#exm-intro-deco}\n:::\n\n::: {.grid}\n\n::: {.g-col-6}\n\n```{ojs}\n//| echo: false\nviewof yd = Inputs.form([\n  Inputs.number({label: \"year\", value: \"1969\"}),\n  Inputs.number({label: \"doty\", value: \"306\"})\n])\n```\n\n```{ojs}\n//| echo: false\nviewof decoOutput = transformInput(\n  Inputs.text({label: \"deco\", placeholder: \"year+day.ddd\", value: \"1969+306\"}),\n  {bind: viewof yd, transform: doty2deco, invert: deco2doty});\n```\n\n:::\n\n::: {.g-col-6}\n\n1. \\${styledIsocYear}-\\${styledIsocMd}T\\${styledIsocTime}\n2. \\${styledOutputDecoYear}\n\n\n```{ojs}\n//| echo: false\nviewof scrubberDeco = Scrubber(numbers, {autoplay: false, alternate: true, delay: 86.4, loopDelay: 864})\n```\n\n\n:::\n\n:::\n\n::: {.column-margin}\n```{#lst-intro-deco lst-cap=\"Deco timestamp conversion\" cap-location=margin}\n```\n:::\n\n#### `Deco` Observable code {#sec-ojs-code-deco .appendix}\n\n##### Functions {.appendix}\n\n\n```{ojs}\nfunction zone2hour(zone = \"Z\") {\n    return (zone = zone.toUpperCase()) == \"Z\" ? 0\n        : zone > \"@\" && zone < \"J\" ? zone.charCodeAt() - 64\n        : zone > \"J\" && zone < \"N\" ? zone.charCodeAt() - 65\n        : zone < \"Z\" && zone > \"M\" ? -(zone.charCodeAt() - 77)\n        : zone;\n}\nfunction deco2doty(timestamp = \"1969+306.00000Z\") {\n    const arr = timestamp.toString().split(/(?=[+-]|[a-zA-Z])/, 3);\n    switch (arr.length) {\n        case 1: return [unix2doty(Date.now())[0], parseFloat(arr[0]), 0];\n        case 2: return (/^[a-zA-Z]+$/.test(arr[1]))\n            ? [unix2doty(Date.now())[0], parseFloat(arr[0]), zone2hour(arr[1]) / 24]\n            : [parseFloat(arr[0]), parseFloat(arr[1]), 0];\n    };\n    return [parseFloat(arr[0]), parseFloat(arr[1]), /^[a-zA-Z]+$/.test(arr[2])\n        ? zone2hour(arr[2]) / 24\n        : parseFloat(arr[2].replace(/([+-])/, \"$1\\.\"))];\n}\nfunction deco2deco(timestamp = \"1969+306.00000Z\") {\n    return doty2deco(deco2doty(timestamp))\n}\nfunction doty2doty(year = 1969, doty = 0, zone = 0) {\n    return dote2doty(doty2dote(year, doty, zone));\n}\nfunction doty2unix(year = 1969, doty = 306, zone = 0) {\n    return (doty2dote(year, doty, zone) - 719468) * 86400000;\n}\nfunction doty2isoc(year = 1969, doty = 306, zone = 0) {\n    return new Date(doty2unix(year, doty, zone)).toISOString().split(\".\")[0]\n}\nfunction deco2isoc(timestamp = \"1969+306.00000Z\") {\n    return doty2isoc(...deco2doty(timestamp))\n}\nfunction unix2dote(ms = 0) {\n  return ms / 86400000 + 719468;\n}\nfunction dote2year(days = 719468) {\n    const era = Math.floor((days >= 0 ? days : days - 146096) / 146097),\n        dotc = days - era * 146097,\n        yotc = (dotc - Math.floor(dotc / 1460) + Math.floor(dotc / 36524) - Math.floor(dotc / 146096)) / 365;\n    return yotc + era * 400;\n}\nfunction doty2year(year = 1969, doty = 306, zone = 0) {\n    return dote2year(doty2dote(year, doty, zone));\n}\nfunction unix2year(ms = 0) {\n    return dote2year(unix2dote(ms));\n};\n```\n\n\n##### Variables {.appendix}\n\n\n```{ojs}\n//| output: all\ntzOffsetInMs = inputDatetime.getTimezoneOffset() * 60000\nutcDatetime = inputDatetime - tzOffsetInMs\noutputDatetimeDeco = unix2deco(utcDatetime)\ndtDoty = outputDatetimeDeco.split(\"+\")[1]\ndtDotyDateRaw = dtDoty.split(\".\")[0]\ndtDotyTimeRaw = dtDoty.split(\".\")[1].slice(0, 5)\noutputDatetimeYear = unix2year(utcDatetime).toString().slice(0, 8)\ndtDotyTimeDelimiter = dtDotyTimeRaw ? \".\" : \"\"\noutputDecoYear = doty2year(...yd).toString().slice(0, 8)\noutputIsoc = doty2isoc(...yd)\nyearDate = Math.ceil(unix2year(unix) * 1e3) / 1e3\n```\n\n```{ojs}\ndtYear = setStyle(outputDatetimeDeco.split(\"+\")[0], d3.schemePaired[10])\ndtDotyDate = setStyle(dtDotyDateRaw, d3.schemePaired[1])\ndtDotyTime = dtDotyTimeRaw ? setStyle(dtDotyTimeRaw, d3.schemePaired[2]) : \"\"\nstyledIsocYear = setStyle(outputIsoc.split(/(?=-)/)[0], d3.schemePaired[10])\nstyledIsocMd = setStyle(outputIsoc.slice(outputIsoc.split(/(?=-)/)[0].length+1,outputIsoc.split(/(?=-)/)[0].length+6), d3.schemePaired[5])\nstyledIsocTime = setStyle(outputIsoc.slice(outputIsoc.split(/(?=-)/)[0].length+7), d3.schemePaired[4])\nstyledOutputDatetimeYear = setStyle(outputDatetimeYear, d3.schemePaired[10])\nstyledOutputDecoYear = setStyle(outputDecoYear, d3.schemePaired[10])\n```\n\n\n## Dek {#sec-intro-dek}\n\nAs mentioned in @sec-intro-doty, `deks` function as both months and weeks in `Decalendar`. A `dek` consists of 2 groups of 5 days called `pents`[^pent]. Each `pent` can follow a sequence of workdays and restdays called a `pently` schedule[^sched]. @fig-schedules compares the typical weekly schedule and the `Schedule` `3` `pently` schedule. Like other `pently` schedules, `Schedule` `3` is named after the number of workdays it contains. The 3 workdays in `Schedule` `3` are followed by a 2-day `pentend`, the `Decalender` equivalent of a weekend.\n\n[^pent]: `pent`: a group of 5 days; half of a `dek`\n[^sched]: `pently` schedule: one of a set of workday and restday schedules for the 5 days of the `pent`\n\nUnlike `Schedule` `3` and the other `pently` schedules, the weekly schedule is asymmetric and divides up workdays into proportions that are easier to express as fractions: 3/8 (.375), 1/3 (.3̅), and 7/24 (0.2916̅). In contrast, `pently` schedules divides each workday into simple, symmetrical proportions that are never [repeating decimal](https://en.wikipedia.org/wiki/Repeating_decimal) numbers. The `Schedule` `3` workday is longer the typical 9-to-5, but the longer workday is compensated by more frequent restdays.\n\n<!-- 12A0366C|/Users/maptv/mskar/cal/docs/dec.ipynb|:schedules.ipynb#fig-schedules |  | echo:false,warning:false,asis:true,eval:false -->\n\n@exm-intro-pent provides the opportunity to explore all four of the `pently` schedules. `Schedule` `3` is the default `pently` schedule, and should be followed unless there is a compelling reason to do otherwise. Despite having different numbers of workdays, all `pently` schedules keep the amount of spent at work constant at 1.2 days (120 `cents`) per `pent`. Every `pently` schedule also splits up workdays symmetrically so that the time before work is equal to the time after work. You can select which schedule to view in @exm-intro-pent using the [Observable](https://observablehq.com/about) [radio inputs](https://observablehq.com/@observablehq/input-radio). @sec-sched provides more information on `Schedule` `3` and the other `pently` schedules.\n\nYou can also use the [interval sliders](https://observablehq.com/@mootari/range-slider) to create a custom schedule and the Download⬇️button to obtain the schedule data. Each interval is summarized by a `Declock` `slice` shown next to its slider. `Decalendar` and `Declock` `slices` are inspired by [array slicing](https://en.wikipedia.org/wiki/Array_slicing#:~:text=In%20computer%20programming%2C%20array%20slicing%20is%20an%20operation%20that%20extracts%20a%20subset%20of%20elements%20from%20an%20array%20and%20packages%20them%20as%20another%20array) in computer programming and are used to represent date and time intervals. The `slice` that summarizes the `Schedule` `3` workday is `.3:.7`, where .3 (7.2 hours) is the `start` and .7 (16.8 hours) is the `stop`. Additional details regarding `slices` and other ways to express intervals are available in @sec-slice.\n\n::: {#exm-intro-pent}\n:::\n\n::: {.grid}\n\n::: {.g-col-6}\n\n```{ojs}\n//| echo: false\nviewof intervals = Inputs.form([\n  interval([0, 1], {step: .01, value: [.3, .7], label: '0 or 5', width: 195, format: ([start, end]) => start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [.3, .7], label: '1 or 6', width: 195, format: ([start, end]) => start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [.3, .7], label: '2 or 7', width: 195, format: ([start, end]) => start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [0, 0], label: '3 or 8', width: 195, format: ([start, end]) => start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n  interval([0, 1], {step: .01, value: [0, 0], label: '4 or 9', width: 195, format: ([start, end]) => start === end ? \"\" : `${formatDecimal(start)}:${formatDecimal(end)}`}),\n])\n```\n\n:::\n\n::: {.g-col-6}\n\n```{ojs}\n//| echo: false\nviewof schedule = Inputs.radio([2, 3, 4, 5], {label: \"Schedule\", value: 3})\n\nviewof filename = Inputs.text({label: \"Filename\", placeholder: \"Enter the filename\", value: `schedule${schedule}.csv`})\n\nbutton(durations, filename)\n```\n\n\n:::\n\n:::\n\n\n```{ojs}\n//| echo: false\n//| label: fig-intro-dek\n//| fig-cap: \"Pently schedule explorer\"\n//| fig-cap-location: margin\n//| fig-align: center\n\n// https://observablehq.com/@dec/pent\nPlot.plot({\n  x: {label: null},\n  color: {scheme: \"Set1\", legend: \"swatches\", reverse: true},\n  y: {label: null, domain: [1, 0], tickPadding: 18},\n  marks: [\n  Plot.barY(durations, {x: \"label\", y: \"duration\", fill: \"group\"}),\n  Plot.textY(\n      durations,\n      Plot.stackY(\n        Plot.groupX(\n          { y: \"first\", text: \"first\" },\n          {\n            x: \"label\",\n            z: \"group\",\n            y: \"duration\",\n            text: (d) => (d.duration < .0001 ? null : formatDecimal(d.duration)),\n            fill: \"white\",\n            stroke: \"white\",\n            fontSize: 32,\n          }\n        )\n      )\n    ),\n  ]})\n```\n\n\n`Slices` can be used to select `Declock` time intervals, as in @exm-intro-pent above, or `Decalendar` date intervals, as in @exm-intro-dotd below. `Decalendar` date intervals can represent events take place over multiple days. In addition to `slices`, `Decalendar` and `Declock` intervals can also be chosen using `spreads`. Use the [Observable](https://observablehq.com/about) [button](https://observablehq.com/@observablehq/input-button) and [checkbox](https://observablehq.com/@observablehq/input-checkbox) inputs in @exm-intro-dotd to display different `dotd` combinations in @fig-intro-dotd. @fig-intro-dotd shows dates selected by a `slice` in [blue]{.blue}, dates selected by a `spread` in [orange]{.orange}, dates selected by both in [green]{.green}, and dates selected by neither in [gray]{.gray}. @sec-slice and @sec-spread build on the practical introduction to `slices` and `spreads` provided by @exm-intro-dotd.\n\nThe @exm-intro-dotd button and checkbox inputs will modify the associated `slice` and `spread` text and numeric inputs as needed to select the desired days-of-the-`dek`. The numeric inputs for `slices` are the `start`🎬index, the `stop`🛑index, and the `step`👣size, which are separated by colons (`start:stop:step`) when combined into a `slice`. Similarly, the numeric inputs for `spreads` are the `start`🎬or🛑`stop` index, the `span`🪽size, the `split` size, and the `space` size, which are typically delimited by greater-than signs (`start>span>split>space`) or a mix of greater-than and less-than signs (`stop<span>split>space`).\n\nThe numeric inputs in @exm-intro-dotd cannot capture the full power of `spreads` and `slices`, because `slices` can have any number of `steps` and, likewise, `spreads` can have any number of alternating `split` and `space` sizes. We can select all even or odd days-of-the-`dek` using a `slice` with a single `step` (`::2` or `1::2`) or a `spread` with one `split`-`space` pair (`>>>1` or `1>>>1`). More complex patterns, such as prime or composite days-of-the-`dek`, require multiple `step` sizes for `slices` (`2:::2:2:5` or `4::2:2::5`) or multiple `split`-`space` pairs (`2>>2>1>>1>>4` or `4>>>1>>1>2>4`).\n\n::: {#exm-intro-dotd}\n:::\n\n\n```{ojs}\n//| echo: false\nviewof sliceDotd = Inputs.checkbox([...Array(10).keys()], {label: \"slice dotd\", value: [1, 6]})\n```\n\n```{ojs}\n//| echo: false\nviewof spreadDotd = Inputs.checkbox([...Array(10).keys()], {label: \"spread dotd\", value: [1, 6]})\n```\n\n\n::: {.grid}\n\n::: {.g-col-6}\n\n```{ojs}\n//| echo: false\nviewof sliceString = transformInput(\n  Inputs.text({label: \"slice string\", placeholder: \"Enter slice string\", value: \"0:366\"}),\n{bind: viewof sliceInputs, transform: encodeSlice, invert: decodeSlice});\nviewof sliceInputs = Inputs.form([\n    Inputs.number([-366, 366], {step: 1, label: \"start\", value: 1, placeholder: \"Enter start index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"stop\", value: 366, placeholder: \"Enter stop index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"step\", value: 5, placeholder: \"Enter step size\"}),\n])\n```\n\n:::\n\n::: {.g-col-6}\n\n```{ojs}\n//| echo: false\nviewof spreadString = transformInput(\n  Inputs.text({label: \"spread string\", placeholder: \"Enter spread string\", value: \"0>366>3>2\"}),\n{bind: viewof spreadInputs, transform: encodeSpread, invert: decodeSpread});\nviewof spreadInputs = Inputs.form([\n    Inputs.number([-366, 366], {step: 1, label: \"start\", value: 0, placeholder: \"Enter start index\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"span\", value: 366, placeholder: \"Enter span size\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"split\", value: 3, placeholder: \"Enter split size\"}),\n    Inputs.number([-366, 366], {step: 1, label: \"space\", value: 2, placeholder: \"Enter space size\"}),\n])\n```\n\n:::\n\n:::\n\n\n```{ojs}\n//| echo: false\nviewof togglePlot = Inputs.button([\n  [invertDotd ? \"None\" : \"All\", value => [...Array(10).keys()]],\n  [invertDotd ? \"Even\" : \"Odd\", value => [1, 3, 5, 7, 9]],\n  [invertDotd ? html`<s>Prime</s>` : \"Prime\", value => [2, 3, 5, 7]],\n  [invertDotd ? html`<s>Composite</s>` : \"Composite\", value => [4, 6, 8, 9]],\n  [invertDotd ? html`<s>Schedule2</s>` : \"Schedule2\", value => [0, 1, 5, 6]],\n  [invertDotd ? html`<s>Schedule3</s>` : \"Schedule3\", value => [0, 1, 2, 5, 6, 7]],\n  [invertDotd ? html`<s>Schedule4</s>` : \"Schedule4\", value => [0, 1, 2, 3, 5, 6, 7, 8]],\n], {value: [], label: \"select dotd\"})\n```\n\n\n::: {.grid}\n\n::: {.g-col-6}\n\n```{ojs}\n//| echo: false\nviewof invertDotd = Inputs.toggle({label: \"invert buttons\"})\n```\n\n:::\n\n::: {.g-col-6}\n\n```{ojs}\n//| echo: false\nviewof sliceOrSpread = toggleSwitch({textOn: invertDotd ? \"Spread\" : 'Slice' , textOff: invertDotd ? \"Slice\" : 'Spread'})\n```\n\n:::\n\n:::\n\n\n\n```{ojs}\n//| echo: false\n//| label: fig-intro-dotd\n//| fig-cap: \"Decalendar date selector\"\n//| fig-cap-location: margin\n//| fig-align: center\n// https://observablehq.com/@dec/dotd\nPlot.plot({\n  padding: 0,\n  x: {axis: \"top\", label: null},\n  y: {label: null, tickPadding: 12},\n  marks: [\n    Plot.cell(dates, {x: d => d[2], y: d => d.slice(0, 2), fill: d =>\n      sliceArray.includes(d) && spreadArray.includes(d) ? \"green\" :\n      sliceArray.includes(d) && !spreadArray.includes(d) ? \"blue\" :\n      !sliceArray.includes(d) && spreadArray.includes(d) ? \"orange\" : \"grey\", inset: 0.5}),\n    Plot.text(dates, {x: d => d[2], y: d => d.slice(0, 2), fill: \"white\", stroke: \"white\", fontSize: 20})\n  ]\n})\n```\n\n\n#### `Dek` Observable code {#sec-ojs-code-dek .appendix}\n\n##### Functions {.appendix}\n\n\n```{ojs}\n// https://observablehq.com/@mootari/range-slider\nfunction interval(range = [], options = {}) {\n  const [min = 0, max = 1] = range;\n  const {\n    step = .001,\n    label = null,\n    value = [min, max],\n    format = ([start, end]) => `${start} … ${end}`,\n    color,\n    width,\n    theme,\n  } = options;\n  const __ns__ = DOM.uid('scope').id;\n  const css = `\n#${__ns__} {\n  font: 13px/1.2 var(--sans-serif);\n  display: flex;\n  align-items: baseline;\n  flex-wrap: wrap;\n  max-width: 100%;\n  width: auto;\n}\n@media only screen and (min-width: 30em) {\n  #${__ns__} {\n    flex-wrap: nowrap;\n    width: 360px;\n  }\n}\n#${__ns__} .label {\n  width: 99px;\n  padding: 5px 0 4px 0;\n  margin-right: .5px;\n  flex-shrink: 0;\n}\n#${__ns__} .form {\n  display: flex;\n  width: 100%;\n}\n#${__ns__} .range {\n  flex-shrink: 1;\n  width: 100%;\n}\n#${__ns__} .range-slider {\n  width: 100%;\n}\n  `;\n  const $range = rangeInput({min, max, value: [value[0], value[1]], step, color, width, theme});\n  const $output = html`<output>`;\n  const $view = html`<div id=${__ns__}>\n${label == null ? '' : html`<div class=\"label\">${label}`}\n<div class=form>\n  <div class=range>\n    ${$range}<div class=range-output style=\"display: inline-block;\">${$output}</div>\n  </div>\n</div>\n${html`<style>${css}`}\n  `;\n  const update = () => {\n    const content = format([$range.value[0], $range.value[1]]);\n    if(typeof content === 'string') $output.value = content;\n    else {\n      while($output.lastChild) $output.lastChild.remove();\n      $output.appendChild(content);\n    }\n  };\n  $range.oninput = update;\n  update();\n  return Object.defineProperty($view, 'value', {\n    get: () => $range.value,\n    set: ([a, b]) => {\n      $range.value = [a, b];\n      update();\n    },\n  });\n}\ncssLength = v => v == null ? null : typeof v === 'number' ? `${v}px` : `${v}`\nfunction randomScope(prefix = 'scope-') {\n  return prefix + (performance.now() + Math.random()).toString(32).replace('.', '-');\n}\nfunction rangeInput(options = {}) {\n  const {\n    min = 0,\n    max = 100,\n    step = 'any',\n    value: defaultValue = [min, max],\n    color,\n    width,\n    theme = theme_Flat,\n  } = options;\n  const controls = {};\n  const scope = randomScope();\n  const clamp = (a, b, v) => v < a ? a : v > b ? b : v;\n  const html = htl.html;\n  // Will be used to sanitize values while avoiding floating point issues.\n  const input = html`<input type=range ${{min, max, step}}>`;\n  const dom = html`<div class=${`${scope} range-slider`} style=${{\n    color,\n    width: cssLength(width),\n  }}>\n  ${controls.track = html`<div class=\"range-track\">\n    ${controls.zone = html`<div class=\"range-track-zone\">\n      ${controls.range = html`<div class=\"range-select\" tabindex=0>\n        ${controls.min = html`<div class=\"thumb thumb-min\" tabindex=0>`}\n        ${controls.max = html`<div class=\"thumb thumb-max\" tabindex=0>`}\n      `}\n    `}\n  `}\n  ${html`<style>${theme.replace(/:scope\\b/g, '.'+scope)}`}\n</div>`;\n  let value = [], changed = false;\n  Object.defineProperty(dom, 'value', {\n    get: () => [...value],\n    set: ([a, b]) => {\n      value = sanitize(a, b);\n      updateRange();\n    },\n  });\n  const sanitize = (a, b) => {\n    a = isNaN(a) ? min : ((input.value = a), input.valueAsNumber);\n    b = isNaN(b) ? max : ((input.value = b), input.valueAsNumber);\n    return [Math.min(a, b), Math.max(a, b)];\n  }\n  const updateRange = () => {\n    const ratio = v => (v - min) / (max - min);\n    dom.style.setProperty('--range-min', `${ratio(value[0]) * 100}%`);\n    dom.style.setProperty('--range-max', `${ratio(value[1]) * 100}%`);\n  };\n  const dispatch = name => {\n    dom.dispatchEvent(new Event(name, {bubbles: true}));\n  };\n  const setValue = (vmin, vmax) => {\n    const [pmin, pmax] = value;\n    value = sanitize(vmin, vmax);\n    updateRange();\n    // Only dispatch if values have changed.\n    if(pmin === value[0] && pmax === value[1]) return;\n    dispatch('input');\n    changed = true;\n  };\n  setValue(...defaultValue);\n  // Mousemove handlers.\n  const handlers = new Map([\n    [controls.min, (dt, ov) => {\n      const v = clamp(min, ov[1], ov[0] + dt * (max - min));\n      setValue(v, ov[1]);\n    }],\n    [controls.max, (dt, ov) => {\n      const v = clamp(ov[0], max, ov[1] + dt * (max - min));\n      setValue(ov[0], v);\n    }],\n    [controls.range, (dt, ov) => {\n      const d = ov[1] - ov[0];\n      const v = clamp(min, max - d, ov[0] + dt * (max - min));\n      setValue(v, v + d);\n    }],\n  ]);\n  // Returns client offset object.\n  const pointer = e => e.touches ? e.touches[0] : e;\n  // Note: Chrome defaults \"passive\" for touch events to true.\n  const on  = (e, fn) => e.split(' ').map(e => document.addEventListener(e, fn, {passive: false}));\n  const off = (e, fn) => e.split(' ').map(e => document.removeEventListener(e, fn, {passive: false}));\n  let initialX, initialV, target, dragging = false;\n  function handleDrag(e) {\n    // Gracefully handle exit and reentry of the viewport.\n    if(!e.buttons && !e.touches) {\n      handleDragStop();\n      return;\n    }\n    dragging = true;\n    const w = controls.zone.getBoundingClientRect().width;\n    e.preventDefault();\n    handlers.get(target)((pointer(e).clientX - initialX) / w, initialV);\n  }\n  function handleDragStop(e) {\n    off('mousemove touchmove', handleDrag);\n    off('mouseup touchend', handleDragStop);\n    if(changed) dispatch('change');\n  }\n  invalidation.then(handleDragStop);\n  dom.ontouchstart = dom.onmousedown = e => {\n    dragging = false;\n    changed = false;\n    if(!handlers.has(e.target)) return;\n    on('mousemove touchmove', handleDrag);\n    on('mouseup touchend', handleDragStop);\n    e.preventDefault();\n    e.stopPropagation();\n    target = e.target;\n    initialX = pointer(e).clientX;\n    initialV = value.slice();\n  };\n  controls.track.onclick = e => {\n    if(dragging) return;\n    changed = false;\n    const r = controls.zone.getBoundingClientRect();\n    const t = clamp(0, 1, (pointer(e).clientX - r.left) / r.width);\n    const v = min + t * (max - min);\n    const [vmin, vmax] = value, d = vmax - vmin;\n    if(v < vmin) setValue(v, v + d);\n    else if(v > vmax) setValue(v - d, v);\n    if(changed) dispatch('change');\n  };\n  return dom;\n}\nfunction formatDecimal(number) {\n  return number == 1 ? number : (Math.round(number * 100) / 100).toString().slice(1)\n}\nbutton = (data, filename = 'data.csv') => {\n  if (!data) throw new Error('Array of data required as first argument');\n  let downloadData;\n  if (filename.includes('.csv')) {\n    downloadData = new Blob([d3.csvFormat(data)], { type: \"text/csv\" });\n  } else {\n    downloadData = new Blob([JSON.stringify(data, null, 2)], {\n      type: \"application/json\"\n    });\n  }\n  const size = (downloadData.size / 1024).toFixed(0);\n  const button = DOM.download(\n    downloadData,\n    filename,\n    `Download ${filename} (~${size} KB)`\n  );\n  return button;\n}\nfunction invert(arr) {\n  return invertDotd ? [...Array(10).keys()].map(n => !arr.includes(n)).map((x, i) => x ? i : null).filter(i => i !== null) : arr\n}\n// https://observablehq.com/@chrispahm/toggle-switch-input-button\nfunction toggleSwitch(options = { textOn: 'True', textOff: 'False' }) {\n  const button = html`<div class=\"button-switch\"\"></div>`;\n  button.innerText = options.textOn;\n  button.value = true;\n\n  button.onclick = () => {\n    button.value = !button.value;\n    button.innerText = button.value ? options.textOn : options.textOff;\n    button.dispatchEvent(new CustomEvent(\"input\"));\n  };\n\n  addButtonStyle()\n\n  return button;\n}\n// https://observablehq.com/@chrispahm/toggle-switch-input-button\nfunction addButtonStyle() {\n  var el = document.createElement('style');\n  el.setAttribute('type', 'text/css');\n  document.head.appendChild(el);\n  var sheet = el.sheet;\n  function addRule(rule) {\n    try {\n      sheet.insertRule(rule, sheet.cssRules.length);\n    } catch (e) {\n      console.warn('Error inserting rule', rule, e);\n    }\n  }\n  addRule(\n    '.button-switch { -webkit-touch-callout: none;-webkit-user-select: none;-khtml-user-select: none;-moz-user-select: none;-ms-user-select: none;user-select: none;display: inline-block;-webkit-border-radius: 2px;-moz-border-radius: 2px;border-radius: 2px;background-color: #EFEFEF;padding: 0px 7px 0px 7px;text-align: center;border: 1px solid grey;width: auto;color: #1c1c1c;font-size: 13px;font-family: sans-serif;text-decoration: none; }'\n  );\n  addRule(\n    '.button-switch:hover { background-color: #E5E5E5;border: 1px solid #454545; }'\n  );\n  addRule(\n    '.button-switch:active { background-color: #f5f5f5;border: 1px solid grey; }'\n  );\n}\nfunction setSpreadDotd(dotd) {\n  const dotdLength = dotd.length;\n  if (dotdLength === 10) {return \">\"}\n  if (dotdLength === 0) {return \">0\"}\n  if (dotdLength === 1) {return `${dotd[0]}>>1>9`}\n  const steps = dotd.map((x, i) => dotd[i + 1] - x)\n    .filter(i => !isNaN(i)),\n    result = [];\n  let split = 1;\n  for (const step of steps) {\n    if (step !== 1) {\n       result.push([split, step - 1])\n       split = 1\n    } else {\n      split += 1\n    }\n  }\n  result.push(split)\n  const flat = [].concat(...result),\n    resultSum = flat.reduce((a, b) => a + b, 0),\n    uniq = [...new Set(flat)];\n  return [dotd[0] ? dotd[0] : null, null].concat(JSON.stringify(uniq) === \"[1]\" ? [null, 1] :\n                               flat.concat(10 - resultSum).map((x, i) => i % 2 === 0 && x === 1 ? null : x)).join(\">\")\n}\nfunction setSliceDotd(dotd) {\n  const dotdLength = dotd.length;\n  if (dotdLength === 10) {return \":\"}\n  if (dotdLength === 0) {return \":0\"}\n  const steps = dotd.map((x, i) => dotd[i + 1] - x)\n    .filter(i => !isNaN(i)),\n    stepSum = steps.reduce((a, b) => a + b, 0),\n    uniq = [...new Set(steps.concat(10 - stepSum))];\n  return [dotd[0] ? dotd[0] : null, null].concat(uniq.length === 1 ? uniq :\n                               steps.concat(10 - stepSum).map(x => x === 1 ? null : x)).join(\":\");\n}\nfunction encodeSlice(...args) {\n  return args.join().replaceAll(\",\", \":\")\n}\nfunction decodeSlice(s) {\n  let [start, stop, ...steps] = s.split(\":\").map(i => i === \"\" ? null : Number(i))\n  const step = steps[0] == null ? 1: steps[0];\n  start = start == null && step >= 0 ? 0 : start == null && step < 0 ? 365 : start;\n  stop = stop == null && step >= 0 ? 366 : stop;\n  return [start, stop, step]\n}\nfunction decodeSpread(spread) {\n  return spread.replace(/^</, \"366<\").replace(/^>/, \"0>\")\n    .split(/(?=^\\d|<|>)/).map(s => s.replace(\"<\", \"-\")\n    .replace(\">\", \"\")).map(s => s === \"\" || isNaN(s) ? null : Number(s))\n}\nfunction encodeSpread(args) {\n  return args.map(a => isNaN(a) ? null : a).join(\">\").replace(\">-\", \"<\")\n}\nfunction slice(self, start, stop, steps, ...args) {\n  const len = self.length, result = [];\n  if (steps === 0 || len === 0) { return result };\n  steps = (!steps || steps.length === 0 ? [1] :\n    typeof steps === \"number\" ? [steps] :\n    typeof steps === \"string\" ? Array.from(steps, Number) :\n    steps).concat(args.map(i => i == null ? 1 : i));\n  const stepCount = steps.length,\n    stepSum = steps.reduce((a, b) => a + b, 0);\n  if (stepSum === 0) { return result };\n  start = Math.max(\n    start == null && stepSum > 0 ? 0 :\n    start == null && stepSum < 0 ? len - 1 :\n    start >= len ? len - 1 :\n    start < 0 ? start + len :\n    start, 0);\n  stop = Math.max(\n    stop == null && stepSum > 0 ? len :\n    stop == null && stepSum < 0 ? -1 :\n    stop >= len ? len :\n    stop < 0 ? stop + len :\n    stop, -1);\n  for (\n    let i = start, counter = -1;\n    stepSum > 0 ? i < stop : i > stop;\n    i += steps[counter]\n  ) {\n    result.push(self[i]);\n    counter = (counter + 1) % stepCount;\n  };\n  return result;\n}\nfunction spread(self, startOrStop, span, splitsAndSpaces, ...args) {\n  const len = self.length, result = [];\n  if (span === 0 || len === 0) { return result };\n  splitsAndSpaces = (!splitsAndSpaces || splitsAndSpaces.length === 0 ? [1] :\n    typeof splitsAndSpaces === \"number\" ? [splitsAndSpaces] :\n    typeof splitsAndSpaces === \"string\" ? Array.from(splitsAndSpaces, Number) :\n    splitsAndSpaces).concat(args.map(i => i == null ? 1 : i));\n    const splitCount = splitsAndSpaces.length,\n    splitSpaceSum = splitsAndSpaces.reduce((a, b) => a + b, 0);\n  if (splitSpaceSum <= 0) { return result };\n  startOrStop = Math.max(\n    startOrStop == null && span > 0 || startOrStop == null && span == null ? 0 :\n    startOrStop == null || startOrStop > len && span < 0 ? len :\n    startOrStop < 0 ? startOrStop + len :\n    startOrStop, 0);\n  span = span == null || startOrStop + span > len ? len - startOrStop :\n    startOrStop + span < 0 ? -startOrStop: span;\n  const start = span > 0 ? startOrStop : startOrStop + span,\n    stop = span > 0 ? startOrStop + span : startOrStop;\n  for (let i = start, c = -1, arr = []; i < stop; i += splitsAndSpaces[c]) {\n    if ((c = (c + 1) % splitCount) % 2 === 0 && i + splitsAndSpaces[c] <= stop) {\n      if ((arr = Array.from({length: splitsAndSpaces[c]}, (_, j) => j + i).map(\n        index => self[index]).filter(item => item !== undefined)\n          ).length == splitsAndSpaces[c]) { result.push(arr) }\n    }\n  };\n  return result;\n}\n```\n\n\n##### Variables {.appendix}\n\n\n```{ojs}\n//| output: all\nnested = Array.from({length: intervals.length}, (_, i) => ([\n  {\n  label: `${i} or ${i+5}`,\n  duration: intervals[i][1] !== intervals[i][0] ? intervals[i][0] : 1,\n  group: \"Rest\"\n},\n  {\n  label: `${i} or ${i+5}`,\n  duration: intervals[i][1]-intervals[i][0],\n  group: \"Work\"\n},\n  {\n  label: `${i} or ${i+5}`,\n  duration: intervals[i][1] !== intervals[i][0] ? 1-intervals[i][1] : null,\n  group: \"Rest\"\n  }]))\ndurations = [].concat(...nested)\ntheme_Flat = `\n/* Options */\n:scope {\n  color: #3b99fc;\n  width: 240px;\n}\n\n:scope {\n  position: relative;\n  display: inline-block;\n  --thumb-size: 15px;\n  --thumb-radius: calc(var(--thumb-size) / 2);\n  padding: var(--thumb-radius) 0;\n  margin: 2px;\n  vertical-align: middle;\n}\n:scope .range-track {\n  box-sizing: border-box;\n  position: relative;\n  height: 7px;\n  background-color: hsl(0, 0%, 80%);\n  overflow: visible;\n  border-radius: 4px;\n  padding: 0 var(--thumb-radius);\n}\n:scope .range-track-zone {\n  box-sizing: border-box;\n  position: relative;\n}\n:scope .range-select {\n  box-sizing: border-box;\n  position: relative;\n  left: var(--range-min);\n  width: calc(var(--range-max) - var(--range-min));\n  cursor: ew-resize;\n  background: currentColor;\n  height: 7px;\n  border: inherit;\n}\n/* Expands the hotspot area. */\n:scope .range-select:before {\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  height: var(--thumb-size);\n  left: 0;\n  top: calc(2px - var(--thumb-radius));\n}\n:scope .range-select:focus,\n:scope .thumb:focus {\n  outline: none;\n}\n:scope .thumb {\n  box-sizing: border-box;\n  position: absolute;\n  width: var(--thumb-size);\n  height: var(--thumb-size);\n\n  background: #fcfcfc;\n  top: -4px;\n  border-radius: 100%;\n  border: 1px solid hsl(0,0%,55%);\n  cursor: default;\n  margin: 0;\n}\n:scope .thumb:active {\n  box-shadow: inset 0 var(--thumb-size) #0002;\n}\n:scope .thumb-min {\n  left: calc(-1px - var(--thumb-radius));\n}\n:scope .thumb-max {\n  right: calc(-1px - var(--thumb-radius));\n}\n`\nschedules = [\n  [[.2, .8], [.2, .8], [0, 0], [0, 0], [0, 0]],\n  [[.3, .7], [.3, .7], [.3, .7], [0, 0], [0, 0]],\n  [[.35, .65], [.35, .65], [.35, .65], [.35, .65], [0, 0]],\n  [[.38, .62], [.38, .62], [.38, .62], [.38, .62], [.38, .62]],\n]\ndates = Array.from({length: 366}, (_, i) => i.toString().padStart(3, \"0\"))\nsliceArray = slice(dates, ...sliceString.split(\":\").map(i => i === \"\" ? null : Number(i)))\nspreadArray = [].concat(...spread(dates, ...decodeSpread(spreadString)))\n```\n\n\n##### Set values {.appendix}\n\n\n```{ojs}\n//| output: false\nset(viewof intervals, schedules[schedule-2])\nset(viewof spreadString, setSpreadDotd(spreadDotd))\nset(viewof sliceString, setSliceDotd(sliceDotd))\n{\n  if (invertDotd ? !sliceOrSpread : sliceOrSpread) {\n    set(viewof sliceDotd, invert(togglePlot))\n  } else {\n    set(viewof spreadDotd, invert(togglePlot))\n  }\n}\n\n```\n\n\n# Basic concepts {#sec-basics}\n\n## Fractions analogy {#sec-frac}\n\nIn the simplest terms, `Decalendar` counts fractions of a year, while `Declock` counts fractions of a day. The denominator for `Decalendar` is the number of days in the year, and the `Declock` denominator is $10^x$, where $x$ is the number of digits in the numerator. In both systems, only the numerator, not the denominator, is provided. In the context of `Decalendar`, the numerator is the days that have passed in the year, while in the context of `Declock`, the numerator is the parts of the day that have passed in the day.\n\nTo avoid any confusion between the two, we can say \"Day 5\" to mean the date when 5 days have passed this year or `Day` `0` to mean the first day-of-the-year (`doty`). This is like the use of the term \"day zero\" in other contexts, such as epidemiology. The analogous term for times is `Dot`. The word `Dot` conveys that at its core `Declock` is a system built on [fractional days](https://en.wikipedia.org/wiki/Decimal_time#Fractional_days) expressed as decimal numbers. The 5 in `Dot` `5` can be thought of as a number after a decimal (0.5) or a numerator (⁵/₁₀), either way it means noon, the time when half the day has passed.\n\n## Implied tolerance and duration {#sec-imp}\n\nThe analogy to decimals or fractions is important, because it explains why adding a zero at the end of a time does not change the time, only the implied tolerance of time points or the implied duration of time intervals. If `Dot` `5` is a time point, it has an implied tolerance of 5% of the day ($.5±.05$), because any time after `Dot` `45` and before `Dot` `55` ($[.45, .55)$) would round to `Dot` `5`. On the other hand, if `Dot` `5` is the start time for a time interval, that interval is implied to start at `Dot` `5` and end before `Dot` `6` ($[.5, .6)$) and thus have a duration of 10% of the day (`Dot` `6`-`Dot` `5`). Every additional digit we add decreases the implied tolerance and the implied duration 10-fold.\n\nIf we really want to insist on punctuality, we could include up to 5 digits in a time. Specifying times with more than 5 digits is possible, and may be useful for scientific or technical purposes, but it is analogous to providing [extremely long GPS coordinates](https://xkcd.com/2170/); at some point the level of precision stops having relevance to daily life. If we want to strive for the highest level of precision possible, we can add the word \"sharp\" or the `#` symbol to the time. Saying \"5 Sharp\" or writing `5#` means as close as possible to noon. Times that include `#` cannot have an implied duration. We can only add `#` to a time, so there is no need say \"Dot 5 Sharp\" or write `.5#`.\n\n## Context clues {#sec-context}\n\nNot saying \"Day\" or \"Dot\" in general is acceptable, because it is convenient and often the numbers make perfect sense in context. If someone says \"let's have lunch at 5\", it is clear that they are referring to noon (`Dot` `5`) and not the sixth `doty` (`Day` `5`). Also, the number itself may provide a clue. Numbers greater than 365 could still be a `doty`, but it would represent a day in an upcoming year, not the current year. The meaning of such dates depends on whether the current year is a common year (n=365) or a leap year (n=366). Saying \"500\" could mean `Day` `134` (if n=366) or `Day` `135` (if n=365) of the subsequent year, but it would most likely mean noon (`Dot` `500`).\n\n## `Stamps` {#sec-stamp}\n\nIf a `Decalender` date and a `Declock` time are combined, they form a time `stamp`. The date always goes before the time in any `stamp`. When said together, the numbers \"0\" and \"5\" mean the first `doty` (`Day` `0`) at noon (`Dot` `5`). In written form, this would be `000.5`. This format is called `.y`, which is read the same way as `doty`, but emphasizes that the `.` is used in a floating point decimal `doty`. In other words, `doty` can be used instead of \"day of the year\" in a sentence, whereas `.y` indicates a `stamp`, such as `000.5`. Ideally, a `stamp` will include all of the information needed to identify a singular point in time, and thus should include a year and time zone.\n\n## Specific dates and times {#sec-specific}\n\nThe `stamp` in @sec-stamp assumes that the year and time zone are known. A date without a year is like a time without a time zone, both depend on the context. Most likely, we are talking about the current year and the local time zone, but it may be unclear. Including a year allows us to pinpoint a specific day, instead of a day that could happen any year. Similarly, a time with a time zone occurs once every day, rather than once in every time zone per day. The `Day` `306` of 1969, would be written `1969+306` and said \"Year 1969 Day 306\" or simply \"1969 306\", while midnight in `Zone` `0` would be written `.000+0` and said \"Dot 0 Zone 0\", \"0 Zone 0\", or \"0 0\". Combined together, this date and time form the `stamp` `1969+306.000+0`.\n\n## Negative numbers {#sec-neg}\n\nEvery component of `Decalender` dates and `Declock` times can be negative. A negative year is before 1 BCE (Before Common Era) and a negative time zone is West of `Zone` `0`. The year is usually provided without a sign, because most people rarely discuss years before 1 BCE, but numeric time zone offset must have a sign. Negative `doties` work like [zero-based indexes](https://en.wikipedia.org/wiki/Zero-based_numbering) in [computer programming](https://en.wikipedia.org/wiki/Zero-based_numbering#Computer_programming) in that they label the days of the year from $-N$ to $-1$, where $N$ is the number of the days in the current year. The first `doty` is indexed by both $0$ and $-N$, while the last `doty` is indexed by both $-1$ and $N$.\n\nIn general, negative numbers show the number of parts that are left in the whole. A negative `doty` shows how many days remain in the year and a negative time [counts down](https://en.wikipedia.org/wiki/Countdown) to the end of the day. To extend the fractions analogy in @sec-frac to negative numbers, the negative number added to the whole gives us the numerator of the positive fraction ($pos = N + neg$). Positive and negative numbers arrive at the same answer from opposite directions.\n\nIn certain contexts, the choice of using a negative number over a positive number may mean that we want to emphasize how much time is left instead of how much has passed. Even though `Dot` `-1` and `Dot` `9` are synonymous `Declock` times, the former could highlight that there is only 1 tenth (⅒ or .1) of the day remaining before midnight. `Dot` `5` and `Dot` `-5` both mean noon, like saying that a glass is half-empty or half-full.\n\nThe negative equivalent of `1969+306`, the `deco` date in @tbl-2x2, is `1970-059`. This negative `deco` date literally subtracts 59 days from the beginning of year 1970 to arrive at `Day` `306` of 1969. The year in negative `deco` dates is always 1 greater than the year in the equivalent positive `deco` date. Both `1969+306` and `1970-059` translate to January 1, 1970 in the Gregorian calendar. `Decalendar` years are shifted by two months in relation to the Gregorian calendar years because `Decalendar` years start on March 1.\n\nThis shift causes the Gregorian calendar year to be 1 greater than the year in the positive `deco` dates during January and February and 1 less than the year in negative `deco` dates during every other month. For example, the `Deco` dates `1969+000` and `1970-365` are March 1, 1969 in the Gregorian calendar. Immediately after midnight on this date, the negative `doty` will change from -365 to -364, while the positive `doty` will remain at 0 At noon, the positive `deco` date will be `1969+306.500` and the negative `deco` date will be `1970-058.500`.\n\n#### @tbl-2x2\n\n::: {.callout-note collapse=\"false\" title=\"Click to toggle table expansion\" icon=\"false\"}\n|      | date     | timestamp      |\n|------|----------|----------------|\n| doty | 306      | 306.000+0      |\n| deco | 1969+306 | 1969+306.000+0 |\n\n: Comparison of `doty` and `deco` dates and timestamps {#tbl-2x2}\n:::\n\n## Units {#sec-unit}\n\n`Declock` times often have three digits because this is the best level of precision for displaying time on clocks and watches. While 3 digits are often best, `Declock` times can have any number of digits, depending on the desired precision level. `Declock` provides names for extremely precise time units, but the most relevant units are within a few orders of magnitude from a day, which is the base unit of both `Declock` and `Decalendar`. Listing the units of each, as in @tbl-unit, highlights the relationship between the two:\n\n#### @tbl-unit\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Quantity           | Name     | Symbol   | Formal Name         |\n|--------------------|----------|----------|---------------------|\n| $100$              | `hekt`   | `ρ`      | `hectoday`          |\n| $91$               | `delt`   | `δ`      | `deltakeraiayear`   |\n| $90$               | `qop`    | `ϟ`      | `qoppaday`          |\n| $80$               | `pi`     | `π`      | `piday`             |\n| $73$               | `ep`     | `ε`      | `epsilonkeraiayear` |\n| $70$               | `om`     | `ο`      | `omicronday`        |\n| $61$               | `wau`    | `ϛ`      | `waukeraiayear`     |\n| $60$               | `xi`     | `ξ`      | `xiday`             |\n| $50$               | `nu`     | `ν`      | `nuday`             |\n| $40$               | `mu`     | `Μ`      | `muday`             |\n| $30$               | `lam`    | `λ`      | `lamdaday`          |\n| $20$               | `kap`    | `κ`      | `kappaday`          |\n| $10$               | `dek`    | `ι`  旬  | `decaday`           |\n| $1$                | `day`    | `d`, 日  | `day`               |\n| $10^{-1}$          | `dime`   | `⅒`      | `deciday`           |\n| $10^{-2}$          | `cent`   | `¢`, `%` | `centiday`          |\n| $10^{-3}$          | `mil`    | `m`, `‰` | `milliday`          |\n| $2 \\times 10^{-4}$ | `period` | `.`      | `didecimilliday`    |\n| $10^{-4}$          | `phrase` | `◠`, `‱` | `decimilliday`      |\n| $2 \\times 10^{-5}$ | `bar`    | `|`      | `dicentimilliday`   |\n| $10^{-5}$          | `beat`   | `♫`      | `centimilliday`     |\n| $10^{-6}$          | `mic`    | `μ`      | `microday`          |\n| $10^{-7}$          | `liph`   | `m̑`      | `decimicroday`      |\n| $10^{-8}$          | `lib`    | `m̈`      | `centimicroday`     |\n| $10^{-9}$          | `nan`    | `n`      | `nanoday`           |\n| $10^{-10}$         | `roph`   | `μ̑`      | `decinanoday`       |\n| $10^{-11}$         | `rob`    | `µ̈`      | `centinanoday`      |\n| $10^{-12}$         | `pic`    | `p`      | `picoday`           |\n| $10^{-13}$         | `noph`   | `n̑`      | `decipicoday`       |\n| $10^{-14}$         | `nob`    | `n̈`      | `centipicoday`      |\n| $10^{-15}$         | `femt`   | `f`      | `femtoday`          |\n| $10^{-16}$         | `coph`   | `p̑`      | `decifemtoday`      |\n| $10^{-17}$         | `cob`    | `p̈`      | `centifemtoday`     |\n| $10^{-18}$         | `att`    | `a`      | `attoday`           |\n| $10^{-19}$         | `foph`   | `f̑`      | `deciattoday`       |\n| $10^{-20}$         | `fob`    | `f̈`      | `centiattoday`      |\n| $10^{-21}$         | `zept`   | `z`      | `zeptoday`          |\n| $10^{-22}$         | `toph`   | `ȃ`      | `decizeptoday`      |\n| $10^{-23}$         | `tob`    | `ä`      | `centizeptoday`     |\n| $10^{-24}$         | `yokt`   | `y`      | `yoctoday`          |\n| $10^{-25}$         | `zoph`   | `z̑`      | `deciyoctoday`      |\n| $10^{-26}$         | `zob`    | `z̈`      | `centiyoctoday`     |\n| $10^{-27}$         | `ront`   | `r`      | `rontoday`          |\n| $10^{-28}$         | `yoph`   | `y̑`      | `decirontoday`      |\n| $10^{-29}$         | `yob`    | `ÿ`      | `centirontoday`     |\n| $10^{-30}$         | `quek`   | `q`      | `quectoday`         |\n\n: The units of `Decalendar` and `Declock` {#tbl-unit}\n:::\n\nIn @tbl-unit, the units with positive exponents are used for `Decalendar`, while the ones with negative exponents are used for `Declock`. `Cents` (`¢`) can serve as a useful point of comparison to understand the scale of some of the units in @tbl-unit above, because each `cent` is 1 percent of the day, which is about a quarter hour (1% = 14.4 minutes). In comparison to `cents`, `mils` are ten times smaller (.1% = 1.4 minutes), `dimes` (`⅒`) are ten times larger (10% = 144 minutes), and `deks` (`ι`) are 1000 times larger (1000% = 14400 minutes). To be clear, 1 `dek` contains 10 whole days while the other units are fractions of days.\n\n`Declock` units smaller than `mils` are not easy to think of as percents of a day. For `phrases` (`◠`) and `beats` (`♫`), music serves as a much more useful analogy. In fact, `phrases` and `beats` are musical terms. The duration of a musical beat depends on the tempo, but a `Declock` `beat` is always precisely 0.864 seconds long. This translates to a tempo of 69.4̅ (69⁴/₉ or 625/9) beats per minute, which is coincidentally also within the normal range of a resting heart rate. `Declock` `beats` are organized into groups of 2 called `bars` or `measures`, groups of 10 called `phrases`, and groups of 20 called `periods`. A real example of music that follows this exact pattern is Haydn's [Feldpartita](https://en.wikipedia.org/wiki/Period_(music)).\n\n`Declock` units smaller than `beats` are too small for typical daily use. For example, a `mic` (`microday`, `μ`) is faster than a blink of an eye. Each frame in a video playing at 60 frames per second will be shown for about 1.93 `liphs` (`milliphrases`, `m̑`). A `lib` (`millibeat`, `m̈`) is not enough time for a neuron in a human brain to fire and return to rest. Sound can travel from a person's ear to their other ear in about 7 `nans` (`nanodays`). Noticing that a sound reaches one ear before the other can help humans to localize the source of the sound, but a `roph` (`microphrase`, `μ̑`) difference might be too fast to notice. In a `rob` (`microbeat`, `µ̈`), a USB 3.0 cable transferring 5 gigabytes per second can send 4.32 kilobytes, the equivalent of a text file with 4320 characters.\n\n# Time zones {#sec-zone}\n\nOf the units discussed above, `dimes` are notable, because they are the units of `Declock` time zones. The times in `Zone` `1` are one `dime` earlier than `Zone` `0` and two `dimes` earlier than `Zone` `-1`. Time zones are important, because different time zones could have very different times and even different dates. Mexico City is in `Zone` `-3` and Tokyo is in `Zone` `4`, meaning for the majority of the day (`Dot` `7` to be exact) Tokyo is one day ahead of Mexico City. If it is noon on the last day of the year 1999 in Mexico City, it will be `Dot` `200` on the first day of the year 2000 in Tokyo. This date and time in Mexico City can be written `2000+000.200+4` or `2001-364.800+4`, while the equivalent date and time for Tokyo is `1999+365.500-3` or `2000-000.500-3`. If we removed the time zone from the end, we would not know that all of these `stamps` describe the same moment in time.\n\n`Declock` groups together the 26 [Coordinated Universal Time (UTC) offsets](https://en.wikipedia.org/wiki/List_of_UTC_offsets) (-12:00 to +14:00) into 11 time zones (`Zone` `-5` to `Zone` `6`) by converting hours into `dimes` ($dimes = hours \\div 2.4$) and rounding to the nearest whole number ($dimes = \\lfloor hours \\div 2.4 \\rceil$). This time zone system is simple and facilitates conversion, but locations on the edges of the main time zones may experience a significant difference between `Dot` `5` and [solar noon](https://en.wikipedia.org/wiki/Noon#Solar_noon), the point when the sun reaches its highest position in the sky.\n\nIf we decide to prioritize the amount of sunlight at `Dot` `5` over simplicity and ease of conversion, we could convert degrees of longitude into `cents` or `mils`, instead of converting hours into `dimes`. For example, we could say that Mexico City is in `Zone` `-275` instead of `Zone` `-3`, because the longitude of Mexico City is 99 degrees West, which translates to an offset of -275 `mils` ($mils = degrees \\div .36$). Essentially, we could create as many additional `Declock` time zones are desired simply by adding digits to the end of each time zone. Adding one digit yields 110 double-digit `cent` time zones, adding two digits creates 1100 triple-digit `mil` time zones, and so on.\n\n# Related systems {#sec-related}\n\n## French Republican calendar {#sec-frc}\n\n### French Republican calendar *décades* {#sec-frcd}\n\nThe [French Republican calendar](https://en.wikipedia.org/wiki/French_Republican_calendar) and `Decalendar` both organize days in groups of 10. A group of 10 days in the French Republican calendar is called a *décade*, while a group of 10 days in `Decalendar` is called a `dek`. The names of the days in a `dek` are derived from their [zero-based](https://en.wikipedia.org/wiki/Zero-based_numbering) cardinal numbers (zero, one, two...), whereas the days of the *décade* are named after their ordinal numbers (first, second, third...). In both cases, the names are based on Roman and Greek [numeral prefixes](https://en.wikipedia.org/wiki/Numeral_prefix#Table_of_number_prefixes_in_English). @tbl-dotd provides the cardinal numbers, one-letter codes, names, and types of the days of the `dek` as well as the names of their French Republican calendar equivalents.\n\n#### @tbl-dotd\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| \\#  | Code | Name   | Type | French     |\n|-----|------|--------|------|------------|\n| 0   | N    | Nulday | work | *primidi*  |\n| 1   | U    | Unoday | work | *duodi*    |\n| 2   | D    | Duoday | work | *tridi*    |\n| 3   | T    | Triday | rest | *quartidi* |\n| 4   | Q    | Quaday | rest | *quintidi* |\n| 5   | P    | Penday | work | *sextidi*  |\n| 6   | H    | Hexday | work | *septidi*  |\n| 7   | S    | Sepday | work | *octidi*   |\n| 8   | O    | Octday | rest | *nonidi*   |\n| 9   | E    | Ennday | rest | *décadi*   |\n\n: The days of the `dek` and their French Republican calendar equivalents {#tbl-dotd}\n:::\n\n### French Republican calendar time {#sec-frct}\n\nThe French Republican calendar and `Declock` both break the day down into decimal portions. In `Declock`, a `dime` is a tenth (⅒) of a day, a `cent` is a hundredth (10⁻²) of a day, a `mil` is a thousandth (10⁻³) of a day, and a `beat` is a hundred thousandth (10⁻⁵) of a day, whereas the French Republican calendar calls these units decimal hours, decimal minutes, *décimes*, and decimal seconds, respectively. @tbl-dime shows the start times of each `dime` (⅒) in a day and its equivalent in 24-hour and 12-hour standard time.\n\n#### @tbl-dime\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| ⅒   | 24-hour | 12-hour |\n|-----|---------|---------|\n| 0   | 00:00   | 12:00AM |\n| 1   | 02:24   | 2:24AM  |\n| 2   | 04:48   | 4:48AM  |\n| 3   | 07:12   | 7:12AM  |\n| 4   | 09:36   | 9:36AM  |\n| 5   | 12:00   | 12:00PM |\n| 6   | 14:24   | 2:24PM  |\n| 7   | 16:48   | 4:48PM  |\n| 8   | 19:12   | 7:12PM  |\n| 9   | 21:36   | 9:36PM  |\n\n: The `dimes` in a day and their standard time equivalents {#tbl-dime}\n:::\n\n## Swatch Internet Time {#sec-sit}\n\n[Swatch Internet Time](https://en.wikipedia.org/wiki/Swatch_Internet_Time) uses the term \".beats\" to describe a thousandth of day (10⁻³). In `Declock`, a `beat` is a hundred thousandth of a day (10⁻⁵), because this is the approximate duration of a heartbeat or a beat of music. Another difference is that Swatch Internet Time has only 1 time zone, [UTC+1](https://en.wikipedia.org/wiki/List_of_UTC_offsets#UTC+01:00,_A), limiting its utility outside of Central Europe or West Africa. Swatch Internet Time is 41.6̅ `mils` ahead of UTC and the `Declock` `Zone` `0` time zone.`Declock` has 11 main single-digit time zones, but can support as many time zones as needed by adding additional digits. More information on `Declock` time zones can be found in @sec-zone.\n\n## Gregorian calendar {#sec-greg}\n\n### Coordinate analogy {#sec-coor}\n\nIn the Gregorian calendar, dates are like a set of coordinates, where the month and the day-of-the-month (`dotm`) are like longitude and latitude in the [geographic coordinate system](https://en.wikipedia.org/wiki/Geographic_coordinate_system) or x and y in the [Cartesian coordinate system](https://en.wikipedia.org/wiki/Cartesian_coordinate_system). The `Decalendar` ordinal (`deco`) date format provides two coordinates in one number: the day-of-the-year (`doty`). @tbl-greg2doty shows the `doty` number equivalents of all Gregorian calendar dates.\n\nTo locate a specific date in @tbl-greg2doty, first find the month among the columns (think of the month as an x-axis value) and then move down through the rows to the `dotm` (which is like a y-axis value). To convert a `doty` number to a Gregorian calendar date, we first find the `dek` number (the first two digits of the `doty`) among the rows in @tbl-doty2greg and then move to the right to the `dotd` (the last digit of the `doty`). The dates in @tbl-doty2greg are shown in `mm-dd` format.\n\n#### @tbl-greg2doty\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Day | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec | Jan | Feb |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| 1   | 0   | 31  | 61  | 92  | 122 | 153 | 184 | 214 | 245 | 275 | 306 | 337 |\n| 2   | 1   | 32  | 62  | 93  | 123 | 154 | 185 | 215 | 246 | 276 | 307 | 338 |\n| 3   | 2   | 33  | 63  | 94  | 124 | 155 | 186 | 216 | 247 | 277 | 308 | 339 |\n| 4   | 3   | 34  | 64  | 95  | 125 | 156 | 187 | 217 | 248 | 278 | 309 | 340 |\n| 5   | 4   | 35  | 65  | 96  | 126 | 157 | 188 | 218 | 249 | 279 | 310 | 341 |\n| 6   | 5   | 36  | 66  | 97  | 127 | 158 | 189 | 219 | 250 | 280 | 311 | 342 |\n| 7   | 6   | 37  | 67  | 98  | 128 | 159 | 190 | 220 | 251 | 281 | 312 | 343 |\n| 8   | 7   | 38  | 68  | 99  | 129 | 160 | 191 | 221 | 252 | 282 | 313 | 344 |\n| 9   | 8   | 39  | 69  | 100 | 130 | 161 | 192 | 222 | 253 | 283 | 314 | 345 |\n| 10  | 9   | 40  | 70  | 101 | 131 | 162 | 193 | 223 | 254 | 284 | 315 | 346 |\n| 11  | 10  | 41  | 71  | 102 | 132 | 163 | 194 | 224 | 255 | 285 | 316 | 347 |\n| 12  | 11  | 42  | 72  | 103 | 133 | 164 | 195 | 225 | 256 | 286 | 317 | 348 |\n| 13  | 12  | 43  | 73  | 104 | 134 | 165 | 196 | 226 | 257 | 287 | 318 | 349 |\n| 14  | 13  | 44  | 74  | 105 | 135 | 166 | 197 | 227 | 258 | 288 | 319 | 350 |\n| 15  | 14  | 45  | 75  | 106 | 136 | 167 | 198 | 228 | 259 | 289 | 320 | 351 |\n| 16  | 15  | 46  | 76  | 107 | 137 | 168 | 199 | 229 | 260 | 290 | 321 | 352 |\n| 17  | 16  | 47  | 77  | 108 | 138 | 169 | 200 | 230 | 261 | 291 | 322 | 353 |\n| 18  | 17  | 48  | 78  | 109 | 139 | 170 | 201 | 231 | 262 | 292 | 323 | 354 |\n| 19  | 18  | 49  | 79  | 110 | 140 | 171 | 202 | 232 | 263 | 293 | 324 | 355 |\n| 20  | 19  | 50  | 80  | 111 | 141 | 172 | 203 | 233 | 264 | 294 | 325 | 356 |\n| 21  | 20  | 51  | 81  | 112 | 142 | 173 | 204 | 234 | 265 | 295 | 326 | 357 |\n| 22  | 21  | 52  | 82  | 113 | 143 | 174 | 205 | 235 | 266 | 296 | 327 | 358 |\n| 23  | 22  | 53  | 83  | 114 | 144 | 175 | 206 | 236 | 267 | 297 | 328 | 359 |\n| 24  | 23  | 54  | 84  | 115 | 145 | 176 | 207 | 237 | 268 | 298 | 329 | 360 |\n| 25  | 24  | 55  | 85  | 116 | 146 | 177 | 208 | 238 | 269 | 299 | 330 | 361 |\n| 26  | 25  | 56  | 86  | 117 | 147 | 178 | 209 | 239 | 270 | 300 | 331 | 362 |\n| 27  | 26  | 57  | 87  | 118 | 148 | 179 | 210 | 240 | 271 | 301 | 332 | 363 |\n| 28  | 27  | 58  | 88  | 119 | 149 | 180 | 211 | 241 | 272 | 302 | 333 | 364 |\n| 29  | 28  | 59  | 89  | 120 | 150 | 181 | 212 | 242 | 273 | 303 | 334 | 365 |\n| 30  | 29  | 60  | 90  | 121 | 151 | 182 | 213 | 243 | 274 | 304 | 335 |     |\n| 31  | 30  |     | 91  |     | 152 | 183 |     | 244 |     | 305 | 336 |     |\n\n: Gregorian calendar date to `doty` conversion {#tbl-greg2doty}\n:::\n\n#### @tbl-doty2greg\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Dek | 0     | 1     | 2     | 3     | 4     | 5     | 6     | 7     | 8     | 9     |\n|-----|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|\n| 0   | 03-01 | 03-02 | 03-03 | 03-04 | 03-05 | 03-06 | 03-07 | 03-08 | 03-09 | 03-10 |\n| 1   | 03-11 | 03-12 | 03-13 | 03-14 | 03-15 | 03-16 | 03-17 | 03-18 | 03-19 | 03-20 |\n| 2   | 03-21 | 03-22 | 03-23 | 03-24 | 03-25 | 03-26 | 03-27 | 03-28 | 03-29 | 03-30 |\n| 3   | 03-31 | 04-01 | 04-02 | 04-03 | 04-04 | 04-05 | 04-06 | 04-07 | 04-08 | 04-09 |\n| 4   | 04-10 | 04-11 | 04-12 | 04-13 | 04-14 | 04-15 | 04-16 | 04-17 | 04-18 | 04-19 |\n| 5   | 04-20 | 04-21 | 04-22 | 04-23 | 04-24 | 04-25 | 04-26 | 04-27 | 04-28 | 04-29 |\n| 6   | 04-30 | 05-01 | 05-02 | 05-03 | 05-04 | 05-05 | 05-06 | 05-07 | 05-08 | 05-09 |\n| 7   | 05-10 | 05-11 | 05-12 | 05-13 | 05-14 | 05-15 | 05-16 | 05-17 | 05-18 | 05-19 |\n| 8   | 05-20 | 05-21 | 05-22 | 05-23 | 05-24 | 05-25 | 05-26 | 05-27 | 05-28 | 05-29 |\n| 9   | 05-30 | 05-31 | 06-01 | 06-02 | 06-03 | 06-04 | 06-05 | 06-06 | 06-07 | 06-08 |\n| 10  | 06-09 | 06-10 | 06-11 | 06-12 | 06-13 | 06-14 | 06-15 | 06-16 | 06-17 | 06-18 |\n| 11  | 06-19 | 06-20 | 06-21 | 06-22 | 06-23 | 06-24 | 06-25 | 06-26 | 06-27 | 06-28 |\n| 12  | 06-29 | 06-30 | 07-01 | 07-02 | 07-03 | 07-04 | 07-05 | 07-06 | 07-07 | 07-08 |\n| 13  | 07-09 | 07-10 | 07-11 | 07-12 | 07-13 | 07-14 | 07-15 | 07-16 | 07-17 | 07-18 |\n| 14  | 07-19 | 07-20 | 07-21 | 07-22 | 07-23 | 07-24 | 07-25 | 07-26 | 07-27 | 07-28 |\n| 15  | 07-29 | 07-30 | 07-31 | 08-01 | 08-02 | 08-03 | 08-04 | 08-05 | 08-06 | 08-07 |\n| 16  | 08-08 | 08-09 | 08-10 | 08-11 | 08-12 | 08-13 | 08-14 | 08-15 | 08-16 | 08-17 |\n| 17  | 08-18 | 08-19 | 08-20 | 08-21 | 08-22 | 08-23 | 08-24 | 08-25 | 08-26 | 08-27 |\n| 18  | 08-28 | 08-29 | 08-30 | 08-31 | 09-01 | 09-02 | 09-03 | 09-04 | 09-05 | 09-06 |\n| 19  | 09-07 | 09-08 | 09-09 | 09-10 | 09-11 | 09-12 | 09-13 | 09-14 | 09-15 | 09-16 |\n| 20  | 09-17 | 09-18 | 09-19 | 09-20 | 09-21 | 09-22 | 09-23 | 09-24 | 09-25 | 09-26 |\n| 21  | 09-27 | 09-28 | 09-29 | 09-30 | 10-01 | 10-02 | 10-03 | 10-04 | 10-05 | 10-06 |\n| 22  | 10-07 | 10-08 | 10-09 | 10-10 | 10-11 | 10-12 | 10-13 | 10-14 | 10-15 | 10-16 |\n| 23  | 10-17 | 10-18 | 10-19 | 10-20 | 10-21 | 10-22 | 10-23 | 10-24 | 10-25 | 10-26 |\n| 24  | 10-27 | 10-28 | 10-29 | 10-30 | 10-31 | 11-01 | 11-02 | 11-03 | 11-04 | 11-05 |\n| 25  | 11-06 | 11-07 | 11-08 | 11-09 | 11-10 | 11-11 | 11-12 | 11-13 | 11-14 | 11-15 |\n| 26  | 11-16 | 11-17 | 11-18 | 11-19 | 11-20 | 11-21 | 11-22 | 11-23 | 11-24 | 11-25 |\n| 27  | 11-26 | 11-27 | 11-28 | 11-29 | 11-30 | 12-01 | 12-02 | 12-03 | 12-04 | 12-05 |\n| 28  | 12-06 | 12-07 | 12-08 | 12-09 | 12-10 | 12-11 | 12-12 | 12-13 | 12-14 | 12-15 |\n| 29  | 12-16 | 12-17 | 12-18 | 12-19 | 12-20 | 12-21 | 12-22 | 12-23 | 12-24 | 12-25 |\n| 30  | 12-26 | 12-27 | 12-28 | 12-29 | 12-30 | 12-31 | 01-01 | 01-02 | 01-03 | 01-04 |\n| 31  | 01-05 | 01-06 | 01-07 | 01-08 | 01-09 | 01-10 | 01-11 | 01-12 | 01-13 | 01-14 |\n| 32  | 01-15 | 01-16 | 01-17 | 01-18 | 01-19 | 01-20 | 01-21 | 01-22 | 01-23 | 01-24 |\n| 33  | 01-25 | 01-26 | 01-27 | 01-28 | 01-29 | 01-30 | 01-31 | 02-01 | 02-02 | 02-03 |\n| 34  | 02-04 | 02-05 | 02-06 | 02-07 | 02-08 | 02-09 | 02-10 | 02-11 | 02-12 | 02-13 |\n| 35  | 02-14 | 02-15 | 02-16 | 02-17 | 02-18 | 02-19 | 02-20 | 02-21 | 02-22 | 02-23 |\n| 36  | 02-24 | 02-25 | 02-26 | 02-27 | 02-28 | 02-29 |       |       |       |       |\n\n: `Doty` number to Gregorian calendar date conversion {#tbl-doty2greg}\n:::\n\n### Gregorian calendar date conversion {#sec-conv}\n\nIn addition to using a conversion table like @tbl-greg2doty, we can convert between Gregorian calendar dates and `Decalendar` `doty` dates programmatically. The code in @exm-coor is derived from the [`days_from_civil`](http://howardhinnant.github.io/date_algorithms.html#days_from_civil) and [`civil_from_days`](http://howardhinnant.github.io/date_algorithms.html#civil_from_days) algorithms described by [Howard Hinnant](https://howardhinnant.github.io/) in [*chrono-Compatible Low-Level Date Algorithms*](http://howardhinnant.github.io/date_algorithms.html) [-@hinnant2014]. The output of the `greg2doty` function is a `doty`, while its inverse function, `doty2greg`, returns an array containing a month and a `dotm` number.\n\n::: {#exm-coor}\n:::\n\n#### JavaScript\n\n##### `greg2doty`\n\n\n```{javascript}\n#| tags: [greg2doty]\nfunction greg2doty(month = 1, day = 1) {\n    return Math.floor(\n        (153 * (month > 2 ? month - 3 : month + 9) + 2) / 5 + day - 1\n)}\n\ngreg2doty()\n```\n\n\n##### `doty2greg`\n\n\n```{javascript}\n#| tags: [doty2greg]\nfunction doty2greg(doty = 306) {\n    const m = Math.floor((5 * doty + 2) / 153);\n    return [Math.floor(m < 10 ? m + 3 : m - 9), Math.floor(doty - (153 * m + 2) / 5 + 2)];\n}\n\ndoty2greg()\n```\n\n\n#### Julia\n\n##### `greg2doty`\n\n\n```{julia}\n#| tags: [greg2doty]\nfunction greg2doty(month=1, day=1)\n    Int(floor((153 * (month > 2 ? month - 3 : month + 9) + 2) / 5 + day - 1))\nend\n\ngreg2doty()\n```\n\n\n##### `doty2greg`\n\n\n```{julia}\n#| tags: [doty2greg]\nfunction doty2greg(doty = 306)\n    m = floor((5 * doty + 2) / 153);\n    return Int(m < 10 ? m + 3 : m - 9), Int(floor(doty - (153 * m + 2) / 5 + 2))\nend\n\ndoty2greg()\n```\n\n\n#### Python\n\n##### `greg2doty`\n\n\n```{python}\n#| tags: [greg2doty]\ndef greg2doty(month=1, day=1):\n    return (153 * (month - 3 if month > 2 else month + 9) + 2) // 5 + day - 1\n\ngreg2doty()\n```\n\n\n##### `doty2greg`\n\n\n```{python}\n#| tags: [doty2greg]\ndef doty2greg(doty=306):\n    m = (5 * doty + 2) // 153\n    return m + 3 if m < 10 else m - 9, doty - (153 * m + 2) // 5 + 1\n\ndoty2greg()\n```\n\n\n#### R\n\n##### `greg2doty`\n\n::: {#989d4dfc .cell tags='[\"greg2doty\"]' execution_count=1}\n``` {.r .cell-code}\ngreg2doty <- function(month = 1, day = 1) {\n    floor((153 * (ifelse(month > 2, month - 3, month + 9)) + 2) / 5 + day - 1)\n}\n\ngreg2doty()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n306\n```\n:::\n:::\n\n\n##### `doty2greg`\n\n::: {#66c902cf .cell tags='[\"doty2greg\"]' execution_count=2}\n``` {.r .cell-code}\ndoty2greg <- function(doty = 306) {\n    m <- floor((5 * doty + 2) / 153)\n    c(ifelse(m < 10, m + 3, m - 9), floor(doty - (153 * m + 2) / 5 + 2))\n}\ndoty2greg()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<style>\n.list-inline {list-style: none; margin:0; padding: 0}\n.list-inline>li {display: inline-block}\n.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n</style>\n<ol class=list-inline><li>1</li><li>1</li></ol>\n```\n:::\n:::\n\n\n:::\n\n### Gregorian calendar months and years {#sec-gregm}\n\n`Decalendar` only uses months for converting to and from Gregorian calendar dates. Nevertheless, discussing months can help to explain how `Decalendar` works. The `Decalendar` year ends with January and February, as shown in @tbl-gregm. During these two months, the `Decalendar` year is 1 less than the Gregorian calendar year. To obtain a `Decalendar` year (`dy`) from a Gregorian calendar year (`gy`) and month number (`gm`), we subtract 1 from `gy` if `gm` is less than 3 ($dy = gy - [gm < 3]$). To obtain a Gregorian calendar year (`gy`) from a `Decalendar` year (`dy`) and `doty`, we add 1 to `dy` if `doty` is greater than 305 ($gy = dy + [dm > 305]$). Code to convert between `Decalendar` and Gregorian calendar years is provided in @exm-gregm.\n\n#### @tbl-gregm\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| dm  | gm  | Month     |\n|-----|-----|-----------|\n| 0   | 3   | March     |\n| 1   | 4   | April     |\n| 2   | 5   | May       |\n| 3   | 6   | June      |\n| 4   | 7   | July      |\n| 5   | 8   | August    |\n| 6   | 9   | September |\n| 7   | 10  | October   |\n| 8   | 11  | November  |\n| 9   | 12  | December  |\n| 10  | 1   | January   |\n| 11  | 2   | February  |\n\n: The numeric values of months in `Decalendar` and the Gregorian calendar {#tbl-gregm}\n:::\n\n::: {#exm-gregm}\n:::\n\n#### JavaScript\n\n##### `greg2year`\n\n\n```{javascript}\n#| tags: [greg2year]\nfunction greg2year(year = 1970, month = 1) { return year - (month < 3) }\n\nconsole.log(greg2year());\n```\n\n\n##### `doty2year`\n\n\n```{javascript}\n#| tags: [doty2year]\nfunction doty2year(year = 1969, doty = 306) { return year + (doty > 305) }\n\nconsole.log(doty2year());\n```\n\n\n#### Julia\n\n##### `greg2year`\n\n\n```{julia}\n#| tags: [greg2year]\nfunction greg2year(year=1970, month=1)\n    year - (month < 3)\nend\n\ngreg2year()\n```\n\n\n##### `doty2year`\n\n\n```{julia}\n#| tags: [doty2year]\nfunction doty2year(year=1969, doty=306)\n    year + (doty > 305)\nend\n\ndoty2year()\n```\n\n\n#### Python\n\n##### `greg2year`\n\n\n```{python}\n#| tags: [greg2year]\ndef greg2year(year=1970, month=1):\n    return year - (month < 3)\n\ngreg2year()\n```\n\n\n##### `doty2year`\n\n\n```{python}\n#| tags: [doty2year]\ndef doty2year(year=1969, doty=306):\n    return year + (doty > 305)\n\ndoty2year()\n```\n\n\n#### R\n\n##### `greg2year`\n\n::: {#63fdfb34 .cell tags='[\"greg2year\"]' execution_count=3}\n``` {.r .cell-code}\ngreg2year <- function(year = 1970, month = 1) {\n    year - (month < 3)\n}\n\ngreg2year()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n1969\n```\n:::\n:::\n\n\n##### `doty2year`\n\n::: {#d57778b9 .cell tags='[\"doty2year\"]' execution_count=4}\n``` {.r .cell-code}\ndoty2year <- function(year = 1969, doty = 306) {\n    year + (doty > 305)\n}\n\ndoty2year()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n1970\n```\n:::\n:::\n\n\n:::\n\n### Leap years {#sec-gregl}\n\nA leap year has 366 days in both `Decalendar` and the Gregorian calendar. `Day` `365` is Leap Day in `Decalendar` and is synonymous with February 29, the Gregorian calendar leap day. `Decalendar` positions Leap Day, `Day` `365`, at the end of the year, which requires an adjustment of the Gregorian calendar definition of a leap year. To check if a `Decalendar` year is a leap, we must first add 1 to the year before plugging it into @eq-gregl or the [`year2bool`](http://howardhinnant.github.io/date_algorithms.html#is_leap) function in [@exm-gregl; @hinnant2014].\n\nInterestingly, years from negative `deco` dates do not need any adjustment. The first day of `Year` `1999` is `1999+000` or `2000-366`, while the last day is `1999+365` or `2000-001`. `Year` `1999` is a leap year from the perspective of the positive `deco` dates, `1999+000` and `1999+365`, because it goes from `Day` `0` to `Day` `365`. In the context of the negative `deco` dates,`2000-366` and `2000-001`, `Year` `2000` is a leap year because it goes from `Day` `-366` to `Day` `-1`.\n\n$$y \\mod 4 = 0 \\land year \\mod 100 \\neq 0 \\lor year \\mod 400 = 0$$ {#eq-gregl}\n\n::: {#exm-gregl}\n:::\n\n#### JavaScript\n\n##### `leap`\n\n\n```{javascript}\n#| tags: [leap]\nfunction year2bool(year = 1970) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\n\nyear2bool()\n```\n\n\n#### Julia\n\n##### `leap`\n\n\n```{julia}\n#| tags: [leap]\nfunction year2bool(year=1970)\n    year % 4 == 0 && year % 100 != 0 || year % 400 == 0\nend\n\nyear2bool()\n```\n\n\n#### Python\n\n##### `leap`\n\n\n```{python}\n#| tags: [leap]\ndef year2bool(year=1970):\n    return year % 4 == 0 and year % 100 != 0 or year % 400 == 0\n\nyear2bool()\n```\n\n\n#### R\n\n##### `leap`\n\n::: {#b0a2451f .cell tags='[\"leap\"]' execution_count=5}\n``` {.r .cell-code}\nyear2bool <- function(year = 1970) {\n    year %% 4 == 0 & year %% 100 != 0 | year %% 400 == 0\n}\n\nyear2bool()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\nFALSE\n```\n:::\n:::\n\n\n:::\n\n## ISO 8601 {#sec-iso}\n\n### Years {#sec-isoy}\n\nBoth `Decalendar` and [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) dates show [years](https://en.wikipedia.org/wiki/ISO_8601#Years) as 4-digit numbers. Unlike ISO 8601, `Decalendar` does not require years to be included in dates. As shown in @tbl-2x2, `Decalendar` `deco` dates include years while `doty` dates do not. Year 0 in both `Decalendar` and ISO 8601 is 1 BCE (Before Common Era) in the Gregorian calendar. The first day of Year 0 in `Decalendar`, `0000+000`, is called the `Decalendar` epoch and translates to March 1, 1 BCE in the Gregorian calendar. The first day of Year 0 according to ISO 8601 is `-0001+306` in `Decalendar` and January 1, 1 BCE in the Gregorian calendar.\n\n### Ordinal dates {#sec-isoo}\n\n`Deco` dates (`year+day`) are very similar to [ISO 8601 ordinal (`isoo`) dates](https://en.wikipedia.org/wiki/ISO_8601#Ordinal_dates) (`year-day`). Like `Decalendar` `doties`, `isoo` dates count the number of days since the start of the year. Unlike ordinal dates, `doties` are [zero-based](https://en.wikipedia.org/wiki/Zero-based_numbering) and do not differ across common and leap years. The `deco` date can be easily obtained from the `isoo` date using the calculations shown in @eq-isoo1, @eq-isoo2, and @exm-isoo. These calculation shift the `isoo` date by 60 or 61 days to account for the 2-month difference between `Decalendar` and the Gregorian calendar.\n\nIn @exm-isoo, the `isoo2doty` and `doty2isoo` functions convert between ISO 8601 ordinal day numbers and `doties`. We use the `year2bool` function from @exm-gregl in @exm-isoo to correct for the fact that Leap Day shifts ISO 8601 ordinal day numbers by 1 day in leap years. To be clear, we only have to take Leap Day into account when dealing with `isoo` dates. `Decalendar` `doties` are the same in common and leap years, because Leap Day is at the end of the `Decalendar` year.\n\n$$(isoordinal + 305 - year2bool(year)) \\mod 365$$ {#eq-isoo1}\n\n$$(doty + 60 + year2bool(year + 1)) \\mod 365$$ {#eq-isoo2}\n\n::: {#exm-isoo}\n:::\n\n#### JavaScript\n\n##### `isoo2doty`\n\n\n```{javascript}\n#| tags: [isoo2doty]\nfunction isoo2doty(yd = \"1970-001\") {\n    const [year, day] = yd.includes(\"-\") ? yd.split(\"-\") : yd.split(/(?=\\d{4})/);\n    return [parseInt(year) - (parseInt(day) < (60 + year2bool(year - 1))),\n        (parseInt(day) + 305 - year2bool(year)) % 365]\n}\n\nconsole.log(isoo2doty())\n```\n\n\n##### `isoo2deco`\n\n\n```{javascript}\n#| tags: [isoo2deco]\nfunction isoo2deco(yd = \"1970-001\") {\n    const [year, doty] = isoo2doty(yd).map(i => i.toString())\n    return `${year.padStart(4, \"0\")}+${doty.padStart(3, \"0\")}`\n}\n\nconsole.log(isoo2deco())\n```\n\n\n##### `doty2isoo`\n\n\n```{javascript}\n#| tags: [doty2isoo]\nfunction doty2isoo(year = 1969, doty = 306) {\n    return `${doty2year(year, doty).toString().padStart(4, \"0\")}-${\n    ((doty + 60 + year2bool(year + 1)) % 365).toString().padStart(3, \"0\")}`\n}\n\nconsole.log(doty2isoo());\n```\n\n\n#### Julia\n\n##### `isoo2year`\n\n\n```{julia}\n#| tags: [isoo2doty]\nfunction isoo2year(year=1970, day=1)\n    year - (day < (60 + year2bool(year - 1)))\nend\n\nisoo2year()\n```\n\n\n##### `isoo2doty`\n\n\n```{julia}\n#| tags: [isoo2doty]\nfunction isoo2doty(year=1970, day=1)\n    (day + 305 - year2bool(year)) % 365\nend\n\n\"$(lpad(isoo2year(), 4, '0'))+$(lpad(isoo2doty(), 3, '0'))\"\n```\n\n\n##### `doty2isoo`\n\n\n```{julia}\n#| tags: [doty2isoo]\nfunction doty2isoo(year=1970, doty=0)\n    (doty + 60 + year2bool(year + 1)) % 365\nend\n\n\"$(lpad(doty2year(), 4, '0'))+$(lpad(doty2isoo(), 3, '0'))\"\n```\n\n\n#### Python\n\n##### `isoo2year`\n\n\n```{python}\n#| tags: [isoo2year]\ndef isoo2year(year=1970, day=1):\n    return year - (day < (60 + year2bool(year - 1)))\n\nisoo2year()\n```\n\n\n##### `isoo2doty`\n\n\n```{python}\n#| tags: [isoo2doty]\ndef isoo2doty(year=1970, day=1):\n    return (day + 305 - year2bool(year)) % 365\n\nf\"{isoo2year():>04}+{isoo2doty():>03}\"\n```\n\n\n##### `doty2isoo`\n\n\n```{python}\n#| tags: [doty2isoo]\ndef doty2isoo(year=1970, doty=0):\n    return (doty + 60 + year2bool(year + 1)) % 365\n\nf\"{doty2year():>04}+{doty2isoo():>03}\"\n```\n\n\n#### R\n\n##### `isoo2year`\n\n::: {#09aefb1b .cell tags='[\"isoo2year\"]' execution_count=6}\n``` {.r .cell-code}\nisoo2year <- function(year = 1970, day = 1) {\n    year - (day < (60 + year2bool(year - 1)))\n}\n\nisoo2year()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n1969\n```\n:::\n:::\n\n\n##### `isoo2doty`\n\n::: {#24069823 .cell tags='[\"isoo2doty\"]' execution_count=7}\n``` {.r .cell-code}\nisoo2doty <- function(year = 1970, day = 1) {\n    (day + 305 - year2bool(year)) %% 365\n}\n\npaste0(sprintf(\"%04d\", isoo2year()), \"+\", sprintf(\"%03d\", isoo2doty()))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n'1969+306'\n```\n:::\n:::\n\n\n##### `doty2isoo`\n\n::: {#c225c42a .cell tags='[\"doty2isoo\"]' execution_count=8}\n``` {.r .cell-code}\ndoty2isoo <- function(year = 1970, doty = 0) {\n    (doty + 60 + year2bool(year + 1)) %% 365\n}\n\npaste0(sprintf(\"%04d\", doty2year()), \"+\", sprintf(\"%03d\", doty2isoo()))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n'1970+060'\n```\n:::\n:::\n\n\n:::\n\n### Calendar dates {#sec-isoc}\n\nISO 8601 [calendar dates (`isoc`)](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) consist of a four-digit year, a two-digit month, and a two-digit `dotm` separated by hyphens (`year-mm-dd`). This format is the current widely accepted standard for displaying Gregorian calendar dates. We can combine code from @exm-coor and @exm-gregm to convert between `deco` dates and `isoc` dates, as shown in @exm-isoc. The code in @exm-isoc formats the output of the `greg2year` and `greg2doty` functions into `deco` dates and the output of the `doty2year` and `doty2greg` functions into `isoc` dates.\n\nAs mentioned in @sec-coor, `Decalendar` uses `doties` as dates instead of month and day-of-the-month (`dotm`) numbers, but if required, Gregorian calendar dates can be provided in the `Decalendar` calendar (`decc`, pronounced \"deck-see\") format (`year+m+dd`), which is very similar to the `isoc` date format. The `decc` format is described in @sec-dotm. Examples of the `decc` format are provided in @sec-dotex. To be clear, the `decc` format is only used to display Gregorian calendar dates and otherwise does not play any role in `Decalendar`.\n\n::: {#exm-isoc}\n:::\n\n#### JavaScript\n\n##### `greg2deco`\n\n\n```{javascript}\n#| tags: [greg2deco]\nfunction greg2deco(year = 1970, month = 1, day = 1) {\n    return `${greg2year(year, month).toString().padStart(4, \"0\")}+${\n        greg2doty(month, day).toString().padStart(3, \"0\")}`;\n}\n```\n\n\n##### `doty2isoc`\n\n\n```{javascript}\n#| tags: [doty2isoc]\nfunction doty2isoc(year = 1969, doty = 306) {\n    return `${doty2year().toString().padStart(4, \"0\")}-${\n        doty2greg().map(\n            i => i.toString().padStart(2, \"0\")\n        ).join(\"-\")}`;\n}\n```\n\n\n##### `greg2isoc`\n\n\n```{javascript}\n#| tags: [greg2isoc]\nfunction greg2isoc(year = 1970, month = 1, day = 1) {\n    return `${year.toString().padStart(4, \"0\")}-${\n        month.toString().padStart(2, \"0\")}-${\n        day.toString().padStart(2, \"0\")}`;\n}\n```\n\n\n#### Julia\n\n##### `deco` date\n\n\n```{julia}\n#| tags: [decdate]\n\"$(lpad(greg2year(), 4, '0'))+$(lpad(greg2doty(), 3, '0'))\"\n```\n\n\n##### ISO 8601 date\n\n\n```{julia}\n#| tags: [isodate]\n\"$(lpad(doty2year(), 4, '0'))-$(join(map((x) -> lpad(x, 2, '0'), doty2greg()), '-'))\"\n```\n\n\n#### Python\n\n##### `deco` date\n\n\n```{python}\n#| tags: [decdate]\nf\"{greg2year():>04}+{greg2doty():<3}\"\n```\n\n\n##### ISO 8601 date\n\n\n```{python}\n#| tags: [isodate]\nf\"{doty2year():>04}-{'-'.join(map(lambda i: str(i).rjust(2, '0'), doty2greg()))}\"\n```\n\n\n#### R\n\n##### `deco` date\n\n::: {#2dbcbe0e .cell tags='[\"decdate\"]' execution_count=9}\n``` {.r .cell-code}\npaste0(\n    sprintf(\"%04d\", greg2year()), \"+\",\n    sprintf(\"%03d\", greg2doty())\n    )\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n'1969+306'\n```\n:::\n:::\n\n\n##### ISO 8601 date\n\n::: {#110569d8 .cell tags='[\"isodate\"]' execution_count=10}\n``` {.r .cell-code}\npaste0(sprintf(\"%04d\", doty2year()), \"-\",\n    paste(sprintf(\"%02d\", doty2greg()), collapse = '-')\n    )\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n'1970-01-01'\n```\n:::\n:::\n\n\n:::\n\n### Time zones {#sec-isoz}\n\n`Isoc` dates can be combined with the [ISO 8601 time (`isot`) format](https://en.wikipedia.org/wiki/ISO_8601#Times) (`hh:mm:ss`) to form `isoc` timestamps. Likewise, `deco` dates can be combined with `Declock` times to form `deco` timestamps. Both `deco` (`year+day.clockZ`) and `isoc` (`year-mm-ddThh:mm:ssZ`) timestamps can end in a `Z`. This `Z` is a [military time zone code](https://en.wikipedia.org/wiki/Military_time_zone#Description) that represents the [UTC+00:00](https://en.wikipedia.org/wiki/UTC+00:00) time zone, which is the basis of [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).\n\n`Deco` timestamps that are synchronized with UTC can either end in `Z` (`year+day.clockZ`) or `+0` (`year+day.clock+0`). Noon UTC can be written `.5Z` or `.5+0` in `Declock` and 12:00:00Z, 120000Z, 12:00:00+00, or 120000+00 as per ISO 8601. The code in @exm-isoz converts between UTC offsets and military time zone codes. @sec-zone provides more information on `Declock` time zones.\n\n::: {#exm-isoz}\n:::\n\n#### JavaScript\n\n##### hour2zone\n\n\n```{javascript}\n#| tags: [hour2zone]\nfunction hour2zone(hour = 0) {\n    return hour == 0 ? \"Z\"\n        : hour > 0 && hour < 10 ? String.fromCharCode(hour + 64)\n        : hour > 9 && hour < 13 ? String.fromCharCode(hour + 65)\n        : hour < 0 && hour > -13 ? String.fromCharCode(Math.abs(hour) + 77)\n        : \"J\";\n}\n\nconsole.log(hour2zone(-new Date().getTimezoneOffset() / 60))\n```\n\n\n##### `zone2hour`\n\n\n```{javascript}\n#| tags: [zone2hour]\nfunction zone2hour(zone = \"Z\") {\n    return (zone = zone.toUpperCase()) == \"Z\" ? 0\n        : zone > \"@\" && zone < \"J\" ? zone.charCodeAt() - 64\n        : zone > \"J\" && zone < \"N\" ? zone.charCodeAt() - 65\n        : zone < \"Z\" && zone > \"M\" ? -(zone.charCodeAt() - 77)\n        : zone;\n}\n\nconsole.log(zone2hour(hour2zone(-new Date().getTimezoneOffset() / 60)))\n```\n\n\n#### Julia\n\n##### `hour2zone`\n\n\n```{julia}\n#| tags: [hour2zone]\n# import Pkg; Pkg.add(\"TimeZones\")\n# using TimeZones\n# localzone()\nfunction hour2zone(hour=0)\n    (\n        hour == 0 ? \"Z\" :\n        hour > 0 && hour < 10 ? Char(hour + 64) :\n        hour > 9 && hour < 13 ? Char(hour + 65) :\n        hour < 0 && hour > -13 ? Char(abs(hour) + 77) : \"J\";\n    )\nend\n\nhour2zone()\n```\n\n\n##### `zone2hour`\n\n\n```{julia}\n#| tags: [zone2hour]\nfunction zone2hour(zone=\"Z\")\n    (\n        (zone = uppercase(string(zone))) == \"Z\" ? 0 :\n        zone > \"@\" && zone < \"J\" ? Int(codepoint(only(zone))) - 64 :\n        zone > \"J\" && zone < \"N\" ? Int(codepoint(only(zone))) - 65 :\n        zone < \"Z\" && zone > \"M\" ? -(Int(codepoint(only(zone))) - 77) : zone;\n    )\nend\n\nzone2hour()\n```\n\n\n#### Python\n\n##### `hour2zone`\n\n\n```{python}\n#| tags: [hour2zone]\n# import time\n# print(int(-time.timezone / 3600))\ndef hour2zone(hour=0):\n    return (\n        \"Z\" if hour == 0 else\n        chr(hour + 64) if 0 < hour < 10 else\n        chr(hour + 65) if 9 < hour < 13 else\n        chr(abs(hour) + 77) if -13 < hour < 0 else \"J\"\n    )\n\nhour2zone()\n```\n\n\n##### `zone2hour`\n\n\n```{python}\n#| tags: [zone2hour]\ndef zone2hour(zone=\"Z\"):\n    return (\n    0 if (zone := zone.upper()) == \"Z\" else\n        ord(zone) - 64 if \"@\" < zone < \"J\" else\n        ord(zone) - 65 if \"J\" < zone < \"N\" else\n        -(ord(zone) - 77) if \"M\" < zone < \"Z\" else zone\n    )\n\nzone2hour()\n```\n\n\n#### R\n\n##### `hour2zone`\n\n::: {#7197739b .cell tags='[\"hour2zone\"]' execution_count=11}\n``` {.r .cell-code}\n# Sys.timezone()\nhour2zone <- function(hour = 0) {\n    ifelse(hour == 0, \"Z\",\n    ifelse(hour > 0 && hour < 10, intToUtf8(hour + 64),\n    ifelse(hour > 9 && hour < 13, intToUtf8(hour + 65),\n    ifelse(hour < 0 && hour > -13, intToUtf8(abs(hour) + 77), \"J\"))))\n}\n\nhour2zone()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n'Z'\n```\n:::\n:::\n\n\n##### `zone2hour`\n\n::: {#0afb535e .cell tags='[\"zone2hour\"]' execution_count=12}\n``` {.r .cell-code}\nzone2hour <- function(zone = \"Z\") {\n    ifelse((zone <- toupper(zone)) == \"Z\", 0,\n    ifelse(zone > \"@\" && zone < \"J\", utf8ToInt(zone) - 64,\n    ifelse(zone > \"J\" && zone < \"N\", utf8ToInt(zone) - 65,\n    ifelse(zone < \"Z\" && zone > \"M\", -(utf8ToInt(zone) - 77), zone))))\n}\n\nzone2hour()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n0\n```\n:::\n:::\n\n\n:::\n\n### Times {#sec-isot}\n\nThe formula for conversion of standard time to `Declock` time is shown in @eq-declock. The value of `x` in @eq-declock. can be modified to obtain different units, which are displayed in @tbl-isot. To convert `Declock` time into standard time, we first convert into hours using @eq-hour and the appropriate `x` value from @tbl-isot. Then, we convert hours into minutes with @eq-minute and minutes into seconds with @eq-second The `hmso2doty` and `doty2hmso` functions in @exm-isot uses these formulas to convert between standard time and `Declock` time.\n\n$$declock = \\frac{hour}{24} + \\frac{minute}{1440} + \\frac{second}{86400} \\cdot 10^x$$ {#eq-declock}\n\n$$hour = declock \\cdot 24 \\cdot 10^x$$ {#eq-hour}\n\n$$minute = \\frac{hour - \\lfloor hour \\rfloor}{60}$$ {#eq-minute}\n\n$$second = \\frac{minute - \\lfloor minute \\rfloor}{60}$$ {#eq-second}\n\n#### @tbl-isot\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| x   | units   |\n|-----|---------|\n| -1  | deks    |\n| 0   | days    |\n| 1   | dimes   |\n| 2   | cents   |\n| 3   | mils    |\n| 4   | phrases |\n| 5   | beats   |\n| 6   | mics    |\n\n: The powers of ten of units based on days {#tbl-isot}\n:::\n\n::: {#exm-isot}\n:::\n\n#### JavaScript\n\n##### `hmso2doty`\n\n\n```{javascript}\n#| tags: [hmso2doty]\nfunction hmso2doty(hour = 1, minute = 0, second = 0) {\n    return hour / 24 + minute / 1440 + second / 86400\n}\n\nconsole.log(hmso2doty())\n```\n\n\n##### `hmso2isot`\n\n\n```{javascript}\n#| tags: [hmso2isot]\nfunction hmso2isot(hour = 1, minute = 0, second = 0) {\n    return hour / 24 + minute / 1440 + second / 86400\n}\n\nconsole.log(hmso2isot())\n```\n\n\n#### Julia\n\n##### `time`\n\n##### `hmso2doty`\n\n\n```{julia}\n#| tags: [hmso2doty]\nfunction hmso2doty(hour=1, minute=0, second=0)\n    hour / 24 + minute / 1440 + second / 86400\nend\n\nhmso2doty()\n```\n\n\n##### `doty2hmso`\n\n\n```{julia}\n#| tags: [doty2hmso]\nfunction doty2hmso(doty=1/24)\n    hour = doty * 24\n    floorHour = floor(hour)\n    minute = (hour - floorHour) / 60\n    floorMinute = floor(minute)\n    return floorHour, floorMinute, (minute - floorMinute) / 60\nend\n\ndoty2hmso()\n```\n\n\n#### Python\n\n##### `hmso2doty`\n\n\n```{python}\n#| tags: [hmso2doty]\ndef hmso2doty(hour=1, minute=0, second=0):\n    return hour / 24 + minute / 1440 + second / 86400\n\nhmso2doty()\n```\n\n\n##### `doty2hmso`\n\n\n```{python}\n#| tags: [doty2hmso]\ndef doty2hmso(doty = 1/24):\n    hour = doty * 24\n    floorHour = hour.__floor__()\n    minute = (hour - floorHour) / 60\n    floorMinute = minute.__floor__()\n    return floorHour, floorMinute, (minute - floorMinute) / 60\n\ndoty2hmso()\n```\n\n\n#### R\n\n##### `hmso2doty`\n\n::: {#04b0cdb5 .cell tags='[\"hmso2doty\"]' execution_count=13}\n``` {.r .cell-code}\nhmso2doty <- function(hour = 1, minute = 0, second = 0) {\n    hour / 24 + minute / 1440 + second / 86400\n}\n\nhmso2doty()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n0.0416666666666667\n```\n:::\n:::\n\n\n##### `doty2hmso`\n\n::: {#e6252b56 .cell tags='[\"doty2hmso\"]' execution_count=14}\n``` {.r .cell-code}\ndoty2hmso <- function(doty = 1 / 24) {\n    hour <- doty * 24\n    floorHour <- floor(hour)\n    minute <- (hour - floorHour) / 60\n    floorMinute <- floor(minute)\n    c(floorHour, floorMinute, (minute - floorMinute) / 60)\n}\n\ndoty2hmso()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<style>\n.list-inline {list-style: none; margin:0; padding: 0}\n.list-inline>li {display: inline-block}\n.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n</style>\n<ol class=list-inline><li>1</li><li>0</li><li>0</li></ol>\n```\n:::\n:::\n\n\n:::\n\n### Timestamps {#sec-isos}\n\n`Decalendar` seeks to make months and weeks obsolete. Similarly, `Declock` aims to deprecate hours, minutes, and seconds in favor of [fractional days](https://en.wikipedia.org/wiki/Decimal_time#Fractional_days) (`.day`). `Deco` timestamps, which combine `Decalendar` dates and `Declock` times, are more concise and easier to read than ISO 8601 timestamps. An `isoc` timestamp that includes seconds is 20 characters long (`year-mm-ddThh:mm:ssZ`), while a `deco` timestamp with slightly greater precision is only 15 characters long (`year+day.clockZ`). ISO 8601 timestamps can omit delimiters except for the `T` which separates the date and the time (`yearmmddThhmmssZ`). Without delimiters, `isoc` timestamps become even more difficult to read and still cannot match the brevity of `Decalendar` timestamps.\n\nCoincidentally, an ISO 8601 ordinal (`isoo`) timestamp (`year-dayThh:mm:ssZ`) without delimiters (`yeardayThhmmssZ`) is the same length as a `deco` timestamp (`year+day.clockZ`). `Deco` timestamps cannot exist without delimiters, because removing the plus sign (`+`) from a `deco` timestamp turns it into a `doty` number (`ddddddd.clock`). If we removed the `+` from the `deco` timestamp `1969+306.00000`, we would obtain the `doty` number `1969306.00000` would represent midnight 1969306 days from the beginning of the current year. The rules for `deco` timestamp interpretation are summarized by the code in the `deco2doty` function in @exm-unixp.\n\nTo create a `deco` timestamp, we can use the `doty2deco` or the `greg2deco` functions as shown in @exm-isos. Similarly, @exm-isos also shows how to create an `isoc` timestamp with the `doty2isoc` and `doty2isoc` functions. All of these timestamp creation functions assume that the provided times are in the UTC+00:00 time zone or `Zone` `0` and need to be adjusted to the provided time zone by adding the appropriate time zone offset to the timestamp. @sec-unixb and @sec-unixp further discuss timestamps and provide functions for building, parsing, and converting timestamps.\n\n::: {#exm-isos}\n:::\n\n#### JavaScript\n\n##### `doty2deco`\n\n\n```{javascript}\n#| tags: [doty2deco]\nfunction doty2deco(year = 1969, doty = 306, zone = 0) {\n    return `${year.toString().padStart(4, \"0\")}+${\n        doty.toString().padStart(3, \"0\")}`;\n}\n```\n\n\n##### `hmso2doty`\n\n\n```{javascript}\n#| tags: [hmso2doty]\nfunction hmso2doty(hour = 1, minute = 0, second = 0) {\n    return hour / 24 + minute / 1440 + second / 86400\n}\n```\n\n\n##### `hmso2deco`\n\n\n```{javascript}\n#| tags: [hmso2deco]\nfunction hmso2deco(hour = 0, minute = 0, second = 0) {\n    return (Math.round(hmso2doty(hour, minute, second)\n        * 1e5) / 1e5).toString().padStart(5, '0')\n}\n```\n\n\n##### `doty2hmso`\n\n\n```{javascript}\n#| tags: [doty2hmso]\nfunction doty2hmso(doty = 1 / 24) {\n    doty = doty - Math.floor(doty)\n    const hour = doty * 24,\n        floorHour = Math.floor(hour),\n        minute = (hour - floorHour) / 60,\n        floorMinute = Math.floor(minute);\n        return [floorHour, floorMinute, (minute - floorMinute) / 60]\n}\n```\n\n```{javascript}\n#| tags: [doty2isoc]\nfunction doty2isoc(year = 1969, doty = 306) {\n    year = Math.floor(year)\n    doty = Math.floor(doty)\n    return `${(year + (doty > 305)).toString().padStart(4, \"0\")}-${\n        doty2greg(doty).map(\n            i => i.toString().padStart(2, \"0\")\n        ).join(\"-\")}`;\n}\n```\n\n\n#### Julia\n\n##### `time`\n\n##### `hmso2doty`\n\n\n```{julia}\n#| tags: [hmso2doty]\nfunction hmso2doty(hour=1, minute=0, second=0)\n    hour / 24 + minute / 1440 + second / 86400\nend\n\n\"$(lpad(greg2year(), 4, '0'))+$(lpad(greg2doty(), 3, '0')).$(\n    lpad(Int(round(hmso2doty(0) * 1e5)), 5, '0')))\"\n```\n\n\n##### `doty2hmso`\n\n\n```{julia}\n#| tags: [doty2hmso]\nfunction doty2hmso(doty=1/24)\n    hour = doty * 24\n    floorHour = floor(hour)\n    minute = (hour - floorHour) / 60\n    floorMinute = floor(minute)\n    return floorHour, floorMinute, (minute - floorMinute) / 60\nend\n\n\n\"$(lpad(doty2year(), 4, '0'))-$(join(\n    map((x) -> lpad(x, 2, '0'\n), doty2greg()), '-'))T$(join(\n    map((x) -> lpad(Int(x), 2, '0'\n), doty2hmso(0)), ':')))\"\n```\n\n\n#### Python\n\n##### `hmso2doty`\n\n\n```{python}\n#| tags: [hmso2doty]\ndef hmso2doty(hour=1, minute=0, second=0):\n    return hour / 24 + minute / 1440 + second / 86400\n\nf\"{greg2year():>04}+{greg2doty():>03}.{round(hmso2doty(0) * 1e6):>05}\"\n```\n\n\n##### `doty2hmso`\n\n\n```{python}\n#| tags: [doty2hmso]\ndef doty2hmso(doty = 1/24):\n    hour = doty * 24\n    floorHour = hour.__floor__()\n    minute = (hour - floorHour) / 60\n    floorMinute = minute.__floor__()\n    return floorHour, floorMinute, (minute - floorMinute) / 60\n\n(\n    f\"{doty2year():>04}-{'-'.join(map(lambda i: str(i).rjust(2, '0'), doty2greg()))}\"\n    f\"T{':'.join(map(lambda i: str(round(i)).rjust(2, '0'), doty2hmso(0)))}\"\n)\n```\n\n\n#### R\n\n##### `hmso2doty`\n\n::: {#d504f79e .cell tags='[\"hmso2doty\"]' execution_count=15}\n``` {.r .cell-code}\nhmso2doty <- function(hour = 1, minute = 0, second = 0) {\n    hour / 24 + minute / 1440 + second / 86400\n}\n\npaste0(\n    sprintf(\"%04d\", greg2year()), \"+\",\n    sprintf(\"%03d\", greg2doty()), \".\",\n    sprintf(\"%05d\", round(hmso2doty(0) * 1e5)))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n'1969+306.00000'\n```\n:::\n:::\n\n\n##### `doty2hmso`\n\n::: {#86a7a69c .cell tags='[\"doty2hmso\"]' execution_count=16}\n``` {.r .cell-code}\ndoty2hmso <- function(doty = 1 / 24) {\n    hour <- doty * 24\n    floorHour <- floor(hour)\n    minute <- (hour - floorHour) / 60\n    floorMinute <- floor(minute)\n    c(floorHour, floorMinute, (minute - floorMinute) / 60)\n}\n\npaste0(sprintf(\"%04d\", doty2year()), \"-\",\n    paste(sprintf(\"%02d\", doty2greg()), collapse = \"-\"), \"T\",\n    paste(sprintf(\"%02d\", doty2hmso()), collapse = \":\")\n    )\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n'1970-01-01T01:00:00'\n```\n:::\n:::\n\n\n:::\n\n### Time intervals {#sec-isoi}\n\nISO 8601 specifies three methods of unequivocally representing [time intervals](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals), `start/stop`, `start/span`, and `span/stop`. The `Decalendar` equivalents of these three time interval representations are `start:stop`, `start>span`, and `stop<span`. Notably, the `start/stop` syntax is used in Google Calendar \"Add to Calendar\" links (`https://calendar.google.com/calendar/render?action=TEMPLATE&dates=start/stop`). Clicking on an \"Add to Calendar\" link opens an web browser interface for adding an event to an online calendar. The `greg2link` and `doty2link` functions in @exm-isoi create such links for Google, Outlook, Office 365, and Yahoo online calendars.\n\n::: {#exm-isoi}\n:::\n\n### Repeating time intervals {#sec-isor}\n\nISO 8601 time intervals can be made to repeat with the `Rn/` prefix (`Rn/start/stop`, `Rn/start/span`, `Rn/span/stop`), where `n` is the number of repetitions. Such [repeating time intervals](https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals) are always consecutive and never overlap. The first three 6-hour intervals of 1970 could be written `R3/1970-01-01T00:00:00Z/T06` as per ISO 8601. This time interval in `Decalendar` could be written `1969+306>.75>.25>0`. Unlike ISO 8601, `Decalendar` allows for the creation of non-consecutive and overlapping recurring intervals. If we wanted to include 3-hour breaks in between the three 6-hour intervals, we could write `1969+306>1>.25>.125`. Similarly, the three 6-hour intervals could be made to overlap by 3 hours by writing `1969+306>.5>.25<.125`.\n\nThe `Decalendar` time interval representations above are called `spreads` and were inspired by the concept of [array slicing](https://en.wikipedia.org/wiki/Array_slicing) from computer programming. `Decalendar` allows for the use of both `slices` (`start:stop:step`) and `spreads` (`start>span>split>space`) to create time intervals. [Slicing of dates and times](https://pandas.pydata.org/pandas-docs/version/1.1/user_guide/timeseries.html#indexing) is fully implemented in the [Pandas Python library](https://pandas.pydata.org/). The pandas code shown in @exm-isor uses slicing to obtain the start times of the last three 6-hour intervals in Gregorian calendar year 1970, which is `1970+305>.75>.25>0` in `Decalendar` and `R3/1970-12-31T06:00:00Z/T06` as per ISO 8601.\n\n::: {#exm-isor}\n:::\n\n\n```{python}\n#| tags: [intervals]\nimport pandas as pd\n\npd.date_range(\"1970\", \"1971\", freq=\"6H\")[-4:-1]\n```\n\n\n## Julian dates {#sec-jd}\n\nA [Julian date](https://en.wikipedia.org/wiki/Julian_day#:~:text=The%20Julian%20date%20(JD)%20of%20any%20instant%20is%20the%20Julian%20day%20number%20plus%20the%20fraction%20of%20a%20day%20since%20the%20preceding%20noon%20in%20Universal%20Time.) is the number of [fractional days](https://en.wikipedia.org/wiki/Decimal_time#Fractional_days) since `-4713+268.5`, which is noon on November 24, 4714 BC in the Gregorian calendar and January 1, 4713 BC in the Julian calendar. The analogous date format in `Decalendar` is the day-of-the-[era](https://en.wikipedia.org/wiki/Calendar_era) (`dote`). Both Julian dates and days-of-the-era (`dotes`) count days from a starting point called an [epoch](https://en.wikipedia.org/wiki/Epoch). The `Decalendar` epoch is `0000+000.0`, which is midnight on March 1, 1 BC in the Gregorian calendar. To convert a Julian date into a `dote`, we simply subtract 1721120.5 days ($dote = julian - 1721120.5$).\n\nLike Julian dates, `dotes` are very useful for date and time calculations. @eq-dote shows how a year and a `doty` can be turned into a `dote`. The conversion of a `dote` into a year and `doty` requires calculations adapted from the [\"civil_from_days\" algorithm](http://howardhinnant.github.io/date_algorithms.html#civil_from_days) from [@hinnant2014]. Briefly, the `dote` is used to obtain the [solar cycle](https://en.wikipedia.org/wiki/Solar_cycle_(calendar)#:~:text=400%2Dyear%20cycle%20of%20the%20Gregorian%20calendar%20with%20respect%20to%20the%20week.) in @eq-cycl, which is then plugged into @eq-dotc and @eq-yotc to calculate the `day-of-the-cycle` in (`dotc`) and the `year-of-the-cycle` (`yotc`) in @eq-yotc. @eq-year takes the `yotc` and the solar cycle and yields the year, while @eq-doty generates the `doty` from the `yotc` and the `dotc`.\n\n$$dote = doty + (365 \\cdot year + \\lfloor \\frac{year}{4} \\rfloor - \\lfloor \\frac{year}{100} \\rfloor + \\lfloor \\frac{year}{400} \\rfloor)$$ {#eq-dote}\n\n$$cycle = \\lfloor \\frac{\\begin{cases}dote&{\\text{if } dote \\geq 0;}\\\\dote-146096&{\\text{otherwise.}}\\end{cases}}{146097} \\rfloor$$ {#eq-cycl}\n\n$$dotc = days - cycle \\cdot 146097$$ {#eq-dotc}\n\n$$yotc = \\lfloor \\frac{dotc - \\lfloor \\frac{dotc}{1460} \\rfloor + \\lfloor \\frac{dotc}{36524} \\rfloor - \\lfloor \\frac{dotc}{146096} \\rfloor}{365} \\rfloor$$ {#eq-yotc}\n\n$$year = yotc + cycle * 400$$ {#eq-year}\n\n$$doty = \\lfloor dotc - (365 \\cdot yotc + \\lfloor \\frac{yotc}{4} \\rfloor - \\lfloor \\frac{yotc}{100} \\rfloor + \\lfloor \\frac{yotc}{400} \\rfloor) \\rfloor$$ {#eq-doty}\n\nThe conversion between `doty` and `dote` is the most important calculation in `Decalendar` because it defines the behavior of positive and negative `deco` dates and stamps. The arithmetic\n\n::: {#exm-jd}\n:::\n\n#### JavaScript\n\n##### `doty2dote`\n\n\n```{javascript}\n#| tags: [doty2dote]\nfunction doty2dote(year = 1969, doty = 306) {\n    return doty + Math.floor(year * 365 + Math.floor(year / 4) - Math.floor(year / 100) + Math.floor(year / 400));\n}\n\nconsole.log(doty2dote());\n```\n\n\n#### Julia\n\n##### `unix`\n\n##### `doty2dote`\n\n\n```{julia}\n#| tags: [doty2dote]\nfunction doty2dote(s=0, ms=0)\n    days = s / 86400 + ms / 86400000 + 719468\n    dote = days - (era = floor((days >= 0 ? days : days - 146096) / 146097)) * 146097\n    year = Int(floor((dote - dote / 1460 + dote / 36524 - dote / 146096) / 365) + era * 400)\n    year, days - floor(year * 365 + year / 4 - year / 100 + year / 400)\nend\n\ny, d = doty2dote(time())\nday = Int(floor(d))\n\"$(lpad(y, 4, '0'))+$(lpad(day, 3, '0')).$(lpad(Int(round((d - day) * 1e5)), 5, '0'))+0\"\n```\n\n\n#### Python\n\n##### `doty2dote`\n\n\n```{python}\n#| tags: [doty2dote]\nfrom time import time\n\ndef doty2dote(s=0, ms=0):\n    days = s / 86400 + ms / 86400000 + 719468\n    dote = days - (era := (days if days >= 0 else days - 146096) // 146097) * 146097\n    year = int((dote - dote / 1460 + dote / 36524 - dote / 146096) // 365 + era * 400)\n    return year, days - (year * 365 + year / 4 - year / 100 + year / 400).__floor__()\n\ny, d = doty2dote(time())\nf\"{y:>04}+{(day := d.__floor__()):>03}.{round((d - day) * 1e5):>05}+0\"\n```\n\n\n#### R\n\n##### `doty2dote`\n\n::: {#d317ba21 .cell tags='[\"doty2dote\"]' execution_count=17}\n``` {.r .cell-code}\ndoty2dote <- function(s = 0, ms = 0) {\n    days = s / 86400 + ms / 86400000 + 719468\n    dote = days - (era = floor(ifelse(days >= 0, days, days - 146096) / 146097)) * 146097\n    year = floor((dote - dote / 1460 + dote / 36524 - dote / 146096) / 365) + era * 400\n    c(year, days - floor(year * 365 + year / 4 - year / 100 + year / 400))\n}\n\nyd <- doty2dote(as.numeric(Sys.time()))\n\npaste0(sprintf(\"%04d\", yd[1]), \"+\",\n       sprintf(\"%03d\", (day = floor(yd[2]))), \".\",\n       sprintf(\"%05d\", round((yd[2] - day) * 1e5)), \"+0\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n'2023+248.78203+0'\n```\n:::\n:::\n\n\n:::\n\n## UNIX time {#sec-unix}\n\n### Julian time conversion to UNIX time {#sec-unixj}\n\nBuilding on the conversion of Julian dates into `dotes` and `doties`, it may be easiest to obtain the official definition of `deco` dates and `Declock` times is based on UNIX time. UNIX time is the number of seconds since the UNIX Epoch, which is `1969+306.0` in `Decalendar` or midnight in the [UTC+0](https://en.wikipedia.org/wiki/List_of_UTC_offsets#UTC%C2%B100:00,_Z) time zone on January 1, 1970 in the Gregorian calendar. A day is exactly 86,400 seconds (100,000 `beats`) long in UNIX time, Julian dates, `deco` dates, and `Declock` times. To obtain UNIX time from a Julian Date, we subtract 2440587.5 from the Julian Date and multiply by 86400 as shown in @eq-unixj.\n\n$$unix = (JD − 2440587.5) \\cdot 86400$$ {#eq-unixj}\n\n### UNIX time conversion to `deco` date {#sec-unixd}\n\nTo calculate `deco` dates directly from UNIX time, we can use a calculation adapted the 2014 article entitled [\"chrono-Compatible Low-Level Date Algorithms\"](http://howardhinnant.github.io/date_algorithms.html#civil_from_days) by [Howard Hinnant](https://howardhinnant.github.io/) [-@hinnant2014]. Briefly, the seconds (or milliseconds) in UNIX time are first converted to `days` ($days = seconds \\div 86400$). Then, the `days` are used to obtain the `era` (@eq-cycl), `day-of-the-era` (@eq-dote), `year` (@eq-year), and `doty` (@eq-doty).\n\n### UNIX time conversion to `Decalendar` timestamp {#sec-unixt}\n\nTo obtain fractional days, we have to sum up all of the days in previous years and subtract this sum from `days` to obtain the current `Decalendar` ordinal (`deco`) timestamp as shown in @eq-unixt. The code in @exm-unixt converts UNIX time into a `deco` timestamp in the `Zone` `0` time zone by passing the current UNIX timestamp to the `unix2doty` function. If we call this function without arguments (`unix2doty()`) the result will be the year and `doty` of the UNIX Epoch: 1969 and 306. To see @exm-unixt in action, visit this [CodePen](https://codepen.io/maptv/pen/oNJZeea) which displays the current `deco` (`year+day.clock`) and `isoc` (`year-mm-ddThh:mm:ss`) timestamps.\n\n$$time = year \\cdot 365 + \\sum_{n=1}^{year} \\left[ \\begin{array}{c}\ny \\mod 4 = 0 \\\\\n\\land y \\mod 100 \\neq 0 \\\\\n\\lor y \\mod 400 = 0 \\end{array} \\right]$$ {#eq-unixt}\n\n::: {#exm-unixt}\n:::\n\n#### JavaScript\n\n##### `unix2doty`\n\n\n```{javascript}\n#| tags: [unix2doty]\nfunction unix2doty(ms = 0) {\n    const days = ms / 86400000 + 719468,\n        dote = days - (era = Math.floor((days >= 0 ? days : days - 146096) / 146097)) * 146097,\n        year = Math.floor((dote - dote / 1460 + dote / 36524 - dote / 146096) / 365) + era * 400;\n    return [year, days - Math.floor(year * 365 + year / 4 - year / 100 + year / 400)];\n}\n\nconst [year, doty] = unix2doty(Date.now());\nconsole.log(\n    `${year.toString().padStart(4, \"0\")}+${\n    (day = Math.floor(doty)).toString().padStart(3, \"0\")}.${\n    (Math.round((doty - day) * 1e5)).toString().padStart(5, \"0\")}+0`\n    );\n```\n\n\n#### Julia\n\n##### `unix`\n\n##### `unix2doty`\n\n\n```{julia}\n#| tags: [unix2doty]\nfunction unix2doty(s=0, ms=0)\n    days = s / 86400 + ms / 86400000 + 719468\n    dote = days - (era = floor((days >= 0 ? days : days - 146096) / 146097)) * 146097\n    year = Int(floor((dote - dote / 1460 + dote / 36524 - dote / 146096) / 365) + era * 400)\n    year, days - floor(year * 365 + year / 4 - year / 100 + year / 400)\nend\n\ny, d = unix2doty(time())\nday = Int(floor(d))\n\"$(lpad(y, 4, '0'))+$(lpad(day, 3, '0')).$(lpad(Int(round((d - day) * 1e5)), 5, '0'))+0\"\n```\n\n\n#### Python\n\n##### `unix2doty`\n\n\n```{python}\n#| tags: [unix2doty]\nfrom time import time\n\ndef unix2doty(s=0, ms=0):\n    days = s / 86400 + ms / 86400000 + 719468\n    dote = days - (era := (days if days >= 0 else days - 146096) // 146097) * 146097\n    year = int((dote - dote / 1460 + dote / 36524 - dote / 146096) // 365 + era * 400)\n    return year, days - (year * 365 + year / 4 - year / 100 + year / 400).__floor__()\n\ny, d = unix2doty(time())\nf\"{y:>04}+{(day := d.__floor__()):>03}.{round((d - day) * 1e5):>05}+0\"\n```\n\n\n#### R\n\n##### `unix2doty`\n\n::: {#a9bd008a .cell tags='[\"unix2doty\"]' execution_count=18}\n``` {.r .cell-code}\nunix2doty <- function(s = 0, ms = 0) {\n    days = s / 86400 + ms / 86400000 + 719468\n    dote = days - (era = floor(ifelse(days >= 0, days, days - 146096) / 146097)) * 146097\n    year = floor((dote - dote / 1460 + dote / 36524 - dote / 146096) / 365) + era * 400\n    c(year, days - floor(year * 365 + year / 4 - year / 100 + year / 400))\n}\n\nyd <- unix2doty(as.numeric(Sys.time()))\n\npaste0(sprintf(\"%04d\", yd[1]), \"+\",\n       sprintf(\"%03d\", (day = floor(yd[2]))), \".\",\n       sprintf(\"%05d\", round((yd[2] - day) * 1e5)), \"+0\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n'2023+248.78203+0'\n```\n:::\n:::\n\n\n#### Lua\n\n``` lua\nfunction unix2doty(ms)\n    local days = ms / 86400000 + 719468\n    local era = (days >= 0 and days or days - 146096) // 146097\n    local dote = days - era * 146097\n    local year = math.floor((dote - dote / 1460 + dote / 36524 - dote / 146096) / 365) + era * 400\n    return math.floor(year), days - math.floor(year * 365 + year / 4 - year / 100 + year / 400)\nend\n\nprint(unix2doty(0))\n```\n\n``` lua\nfunction unix2deco(ms)\n    year, doty = unix2doty(ms)\n    return string.format(\"%s+%s\", math.floor(year), math.floor(doty))\nend\n\nprint(unix2deco(0))\n```\n\n#### CopyQ\n\n``` javascript\ncopyq:\nfunction unix2doty(ms = 0) {\n    const days = ms / 86400000 + 719468,\n        dote = days - (era = Math.floor((days >= 0 ? days : days - 146096) / 146097)) * 146097,\n        year = Math.floor((dote - dote / 1460 + dote / 36524 - dote / 146096) / 365) + era * 400;\n    return [year, days - Math.floor(year * 365 + year / 4 - year / 100 + year / 400)];\n}\n\nconst [year, doty] = unix2doty(Date.now()),\n    datetime = `${year.toString().padStart(4, \"0\")}+${\n    (day = Math.floor(doty)).toString().padStart(3, \"0\")}.${\n    (Math.round((doty - day) * 1e5)).toString().padStart(5, \"0\")}+0`;\n\ncopy(datetime)\ncopySelection(datetime)\npaste()\n```\n\n:::\n\n### Building timestamps {#sec-unixb}\n\nThe code in @exm-unixt creates a `Decalendar` ordinal (`deco`) timestamp from UNIX time. @exm-unixb encapsulates this code in a function called `unix2deco`. The `deco` timestamps converted from UNIX time are all in the `Zone` `0` time zone. To switch to a different time zone, we should pass the year and `doty` we obtain from the `unix2doty` function to the `doty2deco` function from @exm-isot along with the desired time zone.\n\n::: {#exm-unixb}\n:::\n\n#### JavaScript\n\n##### `unix2deco`\n\n\n```{javascript}\n#| tags: [unix2deco]\nfunction unix2deco(ms = 0) {\n    const [year, doty] = unix2doty(ms);\n    return `${year.toString().padStart(4, \"0\")}+${\n        (day = Math.floor(doty)).toString().padStart(3, \"0\")}.${\n        (Math.round((doty - day) * 1e5)).toString().padStart(5, \"0\")}+0`\n};\n\nconsole.log(unix2deco())\n```\n\n\n#### Julia\n\n##### `unix`\n\n##### `unix2deco`\n\n\n```{julia}\n#| tags: [unix2deco]\nfunction unix2deco(s=0, ms=0)\n    y, d = unix2doty(time())\n    day = Int(floor(d))\n    \"$(lpad(y, 4, '0'))+$(lpad(day, 3, '0')).$(lpad(Int(round((d - day) * 1e5)), 5, '0'))+0\"\nend\n\nunix2deco()\n```\n\n\n#### Python\n\n##### `unix2deco`\n\n\n```{python}\n#| tags: [unix2deco]\nfrom time import time\n\ndef unix2deco(s=0, ms=0):\n    y, d = unix2doty(time())\n    return f\"{y:>04}+{(day := d.__floor__()):>03}.{round((d - day) * 1e5):>05}+0\"\n\nunix2deco()\n```\n\n\n#### R\n\n##### `unix2deco`\n\n::: {#0cf49e36 .cell tags='[\"unix2deco\"]' execution_count=19}\n``` {.r .cell-code}\nunix2deco <- function(s = 0, ms = 0) {\n    yd <- unix2deco(as.numeric(Sys.time()))\n    paste0(sprintf(\"%04d\", yd[1]), \"+\",\n           sprintf(\"%03d\", (day = floor(yd[2]))), \".\",\n           sprintf(\"%05d\", round((yd[2] - day) * 1e5)), \"+0\"\n    )\n}\n\nunix2deco()\n```\n:::\n\n\n:::\n\n### Parsing timestamps {#sec-unixp}\n\nTo extract the components of a `Decalendar` timestamp, we can use the `parse_dec` function in @exm-isos. Parsing timestamps is the first step before any later processes such as timestamp arithmetic or conversion between timestamp formats. The `parse_dec` function returns a year, a `doty`, and a fractional day time zone offset. The year and time zone offset can be omitted in the timestamp provided to `parse_dec`. If not specified in the timestamp, the year is the current year and the time zone offset is 0.\n\n::: {#exm-unixp}\n:::\n\n#### JavaScript\n\n##### `parse_dec`\n\n\n```{javascript}\n#| tags: [parse_dec]\nfunction parse_dec(timestamp = \"1969+306.00000Z\") {\n    const arr = timestamp.toString().split(/(?=[+-]|[a-zA-Z])/, 3);\n    switch (arr.length) {\n        case 1: return [unix2doty(Date.now())[0], parseFloat(arr[0]), 0];\n        case 2: return (/^[a-zA-Z]+$/.test(arr[1]))\n            ? [unix2doty(Date.now())[0], parseFloat(arr[0]), zone2hour(arr[1]) / 24]\n            : [parseInt(arr[0]), parseFloat(arr[1]), 0];\n    };\n    return [parseInt(arr[0]), parseFloat(arr[1]), /^[a-zA-Z]+$/.test(arr[2])\n        ? zone2hour(arr[2]) / 24\n        : parseFloat(arr[2].replace(/([+-])/, \"$1\\.\"))];\n}\n\nconsole.log(parse_dec());\n```\n\n\n:::\n\n# Dot formats {#sec-format}\n\nThe `stamps` shown above are in the decimal days of the year (`.y`) format, which is the main `Decalendar` format. In addition to the `.y` format, there are 2 other supplemental `datetime` formats, which are based on decimal days of the month (`decc`), and decimal days of the week (`.w`). @tbl-format summarizes the three decimal day-of-the ( `dot` or `.`) formats:\n\n#### @tbl-format\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Day of the | `.` | General Form      | Specific Example  |\n|------------|-----|-------------------|-------------------|\n| Year       | `y` | `year±day.day±z`  | `1999+365.500-3`  |\n| Month      | `m` | `year±m±dd.day±z` | `1999+B+29.500-3` |\n| Week       | `w` | `year±ww±d.day±z` | `1999+52+5.500-3` |\n\n: The three dot formats {#tbl-format}\n:::\n\nIn @tbl-format , `day` is the 3-digit day of the year (`doty`) number, `dd` is the 2-digit day of the month (`dotm`) number, `d` is the 1-digit day of the week (`dotw`) number, and `.day` is the time in `mils`.\n\n## The `.m` format {#sec-dotm}\n\nThe `m` in the `.m` format is the 1-digit month number and is the double-digit `dotm`. To fit all of the months in a single digit, `m` is in [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) form (Base16 encoded). This means that the first 10 months are represented by the numbers 0 through 9 ([zero-based numbering](https://en.wikipedia.org/wiki/Zero-based_numbering)) while the last two months of the year are represented by the letters \"A\" and \"B\" instead of numbers. The `.m` format is similar to the [ISO8601 calendar date](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) format (year-mm-dd).\n\nThe [ordinal numerals](https://en.wikipedia.org/wiki/Ordinal_numeral) of September, October, November, and December in `Decalendar` (Sep=7th, Oct=8th, Nov=9th, Dec=10th) match the [numeral prefixes](https://en.m.wikipedia.org/wiki/Numeral_prefix#Table_of_number_prefixes_in_English) in their names (Sep=7, Oct=8, Nov=9, Dec=10). The `m` value of a month is based on its cardinal number in `Decalendar`, which is 1 less than its ordinal number (Sep=6, Oct=7, Nov=8, Dec=9).\n\nTo convert a double-digit Gregorian calendar month number (`mm`) into a single-digit `Decalendar` `m` value, we subtract 3 if `mm` is greater than 2, add 9 if not, as shown in @eq-dotm1, and then encode into hexadecimal (Base16). To do the inverse (convert `m` to `mm`), we decode from hexadecimal, add 3 to `m` values less than 10 and subtract 9 from other `m` values, as shown in @eq-dotm2. After hexadecimal encoding, January is represented by `A` and February is represented by `B` (mnemonic: `jAn`=January, `feB`=February).\n\n$$m = \\begin{cases}mm - 3&{\\text{if } month > 2;}\\\\mm + 9&{\\text{otherwise.}}\\end{cases}$$ {#eq-dotm1}\n\n$$m = \\begin{cases}month + 3&{\\text{if } month < 10;}\\\\month - 9&{\\text{otherwise.}}\\end{cases}$$ {#eq-dotm2}\n\n## The `decw` format {#sec-dotw}\n\nThe week number in the `decw` format, `ww`, ranges from 0 to 53 or -54 to -1. Weeks in the `decw` format start from Sunday. @tbl-dotw shows the possible `dotw` values, which range from 0 to 6 or -7 to -1.\n\n#### @tbl-dotw\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Day       | Pos | Neg |\n|-----------|-----|-----|\n| Sunday    | 0   | -7  |\n| Monday    | 1   | -6  |\n| Tuesday   | 2   | -5  |\n| Wednesday | 3   | -4  |\n| Thursday  | 4   | -3  |\n| Friday    | 5   | -2  |\n| Saturday  | 6   | -1  |\n\n: The weeks in the `decw` format {#tbl-dotw}\n:::\n\n## Dot format examples {#sec-dotex}\n\n@tbl-dotex builds on the example from @sec-zone to compare all three `.` formats. The 3 `.` formats differ only in their approach to the date, not the time. Therefore, the times below are all shown to 1-digit `dime` precision (same as time zones) instead of the typical 3-digit `mil` precision. In Mexico City, the time is `+5-3` or `-5-3`, while the time in London is `+8+0` or `-2+0` and time in Tokyo is `+2+4` or `-8+4`.\n\n#### @tbl-dotex\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Day of the | `.` | Mexico City     | London          | Tokyo           |\n|------------|-----|-----------------|-----------------|-----------------|\n| Year       | `y` | `1999+365.5-3`  | `1999+365.8+0`  | `2000+000.2+4`  |\n| Year       | `y` | `2000-001.5-3`  | `2000-001.2+0`  | `2001-365.8+4`  |\n| Month      | `m` | `1999+B+29.5-3` | `1999+B+29.8+0` | `2000+0+00.2+4` |\n| Month      | `m` | `2000-1-01.5-3` | `2000-1-01.2+0` | `2001-C-31.8+4` |\n| Week       | `w` | `1999+52+2.5-3` | `1999+52+2.8+0` | `2000+00+3.2+4` |\n| Week       | `w` | `2000-01-5.5-3` | `2000-01-5.2+0` | `2001-53-4.8+4` |\n\n: The time in Mexico City, London, and Tokyo in all three dot formats {#tbl-dotex}\n:::\n\nIn @tbl-dotex, the `.m` format tells us that the month in Tokyo is January (`Month` `0`) and the month in Mexico City and London is December (`Month` `B`). We could say the `.m` dates in Mexico City and London as \"Year 1999 Month B Day 29\" or \"Year 1999 Month -1 Day -1\" and the Tokyo date as \"Year 2000 Month 0 Day 0\" or \"Year 2000 Month -C Day -31\".\n\nThe `decw` format always starts the year with `Week` `0`, but the year can start on any day of the week. @tbl-dotex shows that the year 2000 starts on a Saturday (`Week` `0` `Day` `6`). The `decw` dates in Mexico City and London could be said \"Year 1999 Week 52 Day 2\" or \"Year 1999 Week -1 Day -5\", while the date in Tokyo could be pronounced \"Year 2000 Week 0 Day 3\" or \"Year 2000 Week -52 Day -4\" in Tokyo.\n\nIn contrast to the `.m` and the `decw` formats, the dates in the `.y` format are one character shorter and a little easier to say. The spoken form of the `.y` date in Mexico City and London is \"Year 1999 Day 365\" or \"Year 1999 Day -1\" and the spoken form of the Tokyo date is \"Year 2000 Day 0\" or \"Year 2000 Day -365\".\n\n## `Deks` {#sec-dek}\n\nEven though it provides formats for months and weeks, `Decalendar` envisions a world in which these units are replaced by `deks`. In terms of scale, `deks` are somewhere between a week and a month, precisely half a day less than a week and a half (1.5 weeks - 0.5 days) and approximately a third of month. `Deks` could provide the functionality of both weeks and months if we followed a `dekly` schedule instead of `weekly` and `monthly` schedules. The transition to a `dekly` schedule would be a massive undertaking, but could start with the creation of the digital infrastructure needed for the new system. Every desktop and mobile application that uses dates could be adapted to optionally use `deks` instead of weeks and months.\n\n### Days of the `dek` {#sec-dotd}\n\nA major difficulty with the Gregorian calendar is that the date is disconnected from the day of the week. In contrast, the day of the `dek` (`dotd`) is simply the last digit of the day number in the `.y` format. For example, the first day of the year (`Day` `0`) is always a `Nulday`, the last day of common years (`Day` `364`) is always an `Quaday`, and the last day of leap years (`Day` `365`) is always a `Penday`. The day number allows us to distinguish workdays from restdays. `Decalendar` defines `Triday`, `Quaday`, `Octday`, and `Ennday` as restdays, which means that days with numbers that end in 3, 4, 8, or 9 are days off from work and school. Each `dek` consists of 2 `pents` (`pentadays`), each `pent` has 3 workdays called the `trep` (`trepalium`) and 2 restdays called the `pentend`. In total, there are 219 workdays and 146 restdays in a `Decalendar` year, not counting the only obligatory holiday, Leap Day (`Day` `365`).\n\n### Workdays {#sec-work}\n\nThe Gregorian calendar has many more workdays, 260 in common years and 261 in leap year. Despite having many fewer workdays and many more restdays, workers following `Decalendar` would actually spent slightly more time at work overall, because the `Decalendar` workday goes from `Dot` `3` to `Dot` `7` and thus is 4 `dimes` (9.6 hours) long, 6.6̅ `cents` (96 minutes) longer than the typical 9-to-5 work schedule (`Dot` `375` to `Dot` `7083̅`). In other words, this work schedule starts 75 `mils` (1.8 hours) earlier than 9AM (`Dot` `375`) and ends 8.3̅ `mils` (12 minutes) earlier than 5PM (`Dot` `7083̅`). In a typical 40-hour workweek, workers spend 23.80952381 `cents` per day at work on average, which adds up to 8.6̅ `deks` (260\\*8/240) per common year and 8.7 `deks` ($261 \\times 8 \\div 240$) per leap year. In contrast, workers following `Decalendar` spend 24 `cents` per day at work on average, which totals up to 87.6 `days` ($219 \\times .4$) spent at work every year. The default approach of `Decalendar` is to compensate for having more restdays with longer workdays.\n\n### Schedules {#sec-sched}\n\n#### Pently schedules {#sec-pently}\n\nIf necessary, the length of the workday and the number of workdays in the `dek` can be adjusted according to different schedules. As mentioned above, each half of the `dek` is called a `pent`. Each `pent` can have its own `pently` schedule. The expectation is that workers will work for 12 `dimes` per `pent`. It is possible to split those 12 `dimes` over the course of 5, 4, 3, or 2 days in each `pent`. @tbl-pently displays how the number of workdays and restdays in a `pent` affects the start time, end time, and duration of the workday. The different `pently` schedules are named after the number of workdays per `pent`. People can switch between `pently` schedules every `pent` as needed, but everyone should follow the `Schedule` `3` by default. `Schedule` `3` has 3 workdays and 2 restdays in each `pent`. Each `Schedule` `3` workday starts at `Dot` `3`, ends at `Dot` `7`, and lasts 4 `dimes`.\n\n#### @tbl-pently\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Schedule | Workdays | Restdays | Start | End | Duration |\n|----------|----------|----------|-------|-----|----------|\n| 2        | 2        | 3        | .2    | .8  | .6       |\n| 3        | 3        | 2        | .3    | .7  | .4       |\n| 4        | 4        | 1        | .35   | .65 | .3       |\n| 5        | 5        | 0        | .38   | .62 | .24      |\n\n: The characteristics of the pently schedules {#tbl-pently}\n:::\n\n#### Daily schedules {#sec-daily}\n\n`Decalendar` recommends waking up at `Dot` `2` and going to bed at `Dot` `8`. This recommendation allots 4 `dimes` (9.6 hours) for falling asleep and sleeping. To keep daily schedules symmetrical, the time spent awake should be split evenly before and after work. People following `Schedule` `3` would thus have 10 `cents` (2.4 hours) to prepare for work and another 10 `cents` to prepare for bed. @tbl-daily shows the recommended `Schedule` `3` daily schedule. `Schedule` `4` and `Schedule` `5` allot even more time, 15 `cents` (3.6 hours) and 18 `cents` (4.32 hours), respectively, for before-work and after-work activities. The recommended sleep schedule does not fit well with `Schedule` `2`, but this incompatibility does not have to result in a sleep deficit. If the `Schedule` `2` workdays are not consecutive, people following `Schedule` `2` can catch up on sleep on their days off by going to bed early before and sleeping in after every workday.\n\n#### @tbl-daily\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Start | End | Duration | Description                  |\n|-------|-----|----------|------------------------------|\n| .2    | .3  | .1       | Wake up and prepare for work |\n| .3    | .7  | .4       | Work                         |\n| .7    | .8  | .1       | End work and prepare for bed |\n| .8    | .2  | .4       | Go to bed and sleep          |\n\n: The workday schedule {#tbl-daily}\n:::\n\n## Subyear units {#sec-subyear}\n\nIn addition to serving as a part of the Gregorian date coordinate system described above, months can also indicate the current season or quarter. `Deks` can also serve as indicator of subyear units like seasons.\n\n### Seasons {#sec-season}\n\nWe can use @tbl-greg2doty to convert any Gregorian calendar date to a positive `doty` number. This is especially useful for variable dates that have to be converted every year. For example, the dates of the solstices, the longest and shortest days of the year, vary slightly every year. Instead of calculating the exact `doty` number of the solstices ourselves we could translate from existing Gregorian calendar dates. Solstices and equinoxes (the points in between the solstices) are the basis of the some holidays, such as [Nowruz](https://en.wikipedia.org/wiki/Nowruz).\n\nThe dates of the solstices and the equinoxes can be used as definitions of the seasons. Each season has its opposite. The opposite of Spring is Fall and the opposite of Summer is Winter. These opposites are always occurring simultaneously, one opposing season in the Northern hemisphere and the other in the Southern hemisphere. @tbl-soleq lists the opposing seasons in the North and South columns (which correspond to the Northern and Southern hemispheres) and the approximate dates of the solstices and the equinoxes that mark the start of each season.\n\n#### @tbl-soleq\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Code | North  | South  | `doty` | `dotm` | Date         | Event              |\n|------|--------|--------|--------|--------|--------------|--------------------|\n| S0   | Spring | Fall   | 20     | 0+20   | March 21     | Northward Equinox  |\n| S1   | Summer | Winter | 110    | 3+18   | June 19      | Northward Solstice |\n| S2   | Fall   | Spring | 205    | 6+21   | September 22 | Southward Equinox  |\n| S3   | Winter | Summer | 295    | 9+20   | December 21  | Southward Solstice |\n\n: Solstice and equinox Gregorian calendar and `doty` dates {#tbl-soleq}\n:::\n\nUsing the information in @tbl-soleq, we can group the `deks` and `pents` in a year according to the seasons in which they occur. We identify `deks` using the first 2 digits of the 3-digit day number of any day in that `dek`. The `pent` number is twice the `dek` number plus one if the `dotd` is greater than 4 ($dek \\cdot 2 + dotd > 4$). For example, `Day` `19` is the last day in `Dek` `1` and `Pent` `3`, while `Day` `111` is the second day in `Dek` `11` and `Pent` `22`.\n\nWe can round up the start of the first season and round down the start of the second season to obtain the division of `pents` by season as summarized in @tbl-season It is important to note that the last season starts in `Pent` `59` of one year and ends with `Pent` `3` of the subsequent year. In common years, each season in @tbl-season has 18 `pents` (90 days), except for the season in the second row, which has 19 `pents` (95 days). In leap years, the season in the last row of @tbl-season has 18.2 pents (91 days).\n\n#### @tbl-season\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Code | North  | South  | First | Last | Duration |\n|------|--------|--------|-------|------|----------|\n| S0   | Spring | Fall   | 4     | 21   | 18       |\n| S1   | Summer | Winter | 22    | 40   | 19       |\n| S2   | Fall   | Spring | 41    | 58   | 18       |\n| S3   | Winter | Summer | 59    | 3    | 18       |\n\n: The `pents` that begin and end each season {#tbl-season}\n:::\n\n### `Qops`, `Delts`, `Eps` and `Waus` {#sec-qdew}\n\n#### `Qops` {#sec-q}\n\nIn contrast to the variable length of seasons, other `Decalendar` units are constant length. Of these constant length units, `qops` (`qoppas`, `ϟ`) are most like seasons. `Qops` divide the year into four parts, but unlike seasons, `qops` do not include `Pent` `72`, the last `pent` of the year. `Pent` `72` is not included in the last `qop` so that each `qop` is 9 `deks` and 90 days long. The omission of `Dek` `36` also maintains the pattern of alternating even and odd numbers in each row. This omission leaves out only 5 or 6 days per year, because `Dek` `36` overlaps with `Dek` `0`. @tbl-q shows the division of `deks` by `qop`.\n\n#### @tbl-q\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Code | First | Last |\n|------|-------|------|\n| Q0   | 0     | 8    |\n| Q1   | 9     | 17   |\n| Q2   | 18    | 26   |\n| Q3   | 27    | 35   |\n\n: The `deks` that begin and end each `qop` {#tbl-q}\n:::\n\n#### `Delts` {#sec-d}\n\nIn addition to `qops` shown above, `Decalendar` describes 3 other similar units called `delts` (`deltas`, `δ`), `eps` (`epsilons`, `ε`), and `waus` (`ϛ`). These units do not leave out as many days in each year, because they split the year by day, rather than by `dek`. `Delts`, `eps`, and `wau` split the year into 4, 5, and 6 parts, respectively. `Delts` are 91 days long and leave out one day at the end of common years and two days at the end of leap years. Just as above, leaving out a small number of days at the end of the year preserves a pattern that can be useful for remembering the days on which `delts` start and end. @tbl-d list the numbers of the days that begin and end each `delt`. In @tbl-q, not only do rows alternate between even and odd numbers, but the `delt` number is the last digit of both the start and the end day of the `delt`.\n\n#### @tbl-d\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Code | First | Last |\n|------|-------|------|\n| D0   | 0     | 90   |\n| D1   | 91    | 181  |\n| D2   | 182   | 272  |\n| D3   | 273   | 363  |\n\n: The days that begin and end each `delt` {#tbl-d}\n:::\n\n#### `Eps` {#sec-e}\n\nUnlike `delts`, `eps` are 73 days long and do not leave out any days from common years. `Qops`, `delts`, and `eps` all leave out leap days in leap years. @tbl-e list the numbers of the days that begin and end each `ep`.\n\n#### @tbl-e\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Code | First | Last |\n|------|-------|------|\n| E0   | 0     | 72   |\n| E1   | 73    | 145  |\n| E2   | 146   | 218  |\n| E3   | 219   | 291  |\n| E4   | 292   | 364  |\n\n: The days that begin and end each `ep` {#tbl-e}\n:::\n\n#### `Waus` {#sec-w}\n\nThe only unit that can include the leap year is a `wau` (`ϛ`), which is 61 days long and follows a similar pattern as a `delt`, except the last `wau` in common years is 1 day short than all the others. @tbl-w list the numbers of the days that begin and end each `wau`. As with `delts`, the `wau` number is the last digit of the numbers of its first and last day.\n\n#### @tbl-w\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Code | First | Last |\n|------|-------|------|\n| W0   | 0     | 60   |\n| W1   | 61    | 121  |\n| W2   | 122   | 182  |\n| W3   | 183   | 243  |\n| W4   | 244   | 304  |\n| W5   | 305   | 365  |\n\n: The days that begin and end each `wau` {#tbl-w}\n:::\n\nAll of the subyear unit codes can be preceded by a year and followed by a day number. The midpoint of common years is noon on the first day of `Delt` `2`, `D2+00.5` or `+182.5`, and the midpoint of leap years is midnight of the first day of `Wau` `3`, `W3+00.0` or `+183.0`. The first day of Spring in northern hemisphere and Fall in the southern hemisphere in the year 2000 is `2000S0+00` or `2000+020`, while the last day of this season is `2000S0+89` or `2000+109`. The subyear units are essentially date intervals, series of contiguous dates. `Decalendar` includes very powerful approaches to describing series of dates, times, and `stamps`.\n\n# Series {#sec-series}\n\nA single `doty` number, such as `Day` `0`, implies a duration on 1 day. We can indicate a duration of multiple days by listing consecutive days in a `series`. A `series` consists of dates, times, or `stamps` separated by commas (`,`). The items in a `series` should all be of the same type. In other words, `series` should be homogeneous and not mix dates, times, and `stamps`. The first 3 days of the year in the form of a `series` would be written `0,1,2`, while the last three days would be `-3,-2,-1`. The first half a day, from midnight to noon, could be written `0,.1,.2,.3,.4`.\n\n## Slices {#sec-slice}\n\nInstead of listing every single day in a `series`, we can \"slice\" from `Day` `0` up to but not including `Day` `3` by writing `:3`. `Simple` `slices` consist of a `start` and a `stop` separated by a colon (`start:stop`). When the `start` is omitted, `slices` begin at the first value, which in the context of a year is `Day` `0` and in the context of a day is midnight. Therefore, writing `:3` is the same as writing `0:3`, both represent the first 3 days of the year: `0,1,2`. Using this approach, we can shorten the series `0,.1,.2,.3,.4` to `:.5`. If we omit the `stop`, instead of the `start`, we would \"slice\" up to and including the last value.\n\nIn the context of `doty` dates, omitting the `stop` value obtains all of the days in the year after the `start`, because the default `stop` is the number of days in the year (`n`). For example, the `slice` `3:` has a `start` of `Day` `3` and a `stop` of `n`, and thus represents every day in the year except the first 3. The number of items we obtain from a `slice` is called a `span`. To calculate the `span`, we subtract the `start` from the `stop` ($stop-start$). In a common year, the `span` of `003:` is $n-3=362$, while in a leap year it would be $n-3=363$. If both the `start` and the `stop` are omitted, every day is included ($span=n-0$). @tbl-4slice lists the seasons, `qops`, and `delts` in the form of `slices`. The superscript plus sign (⁺) in @tbl-4slice indicates a number that has to be incremented in leap years.\n\n#### @tbl-4slice\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Index | Season   | Qop     | Delt    |\n|-------|----------|---------|---------|\n| 0     | 20:110   | :90     | :91     |\n| 1     | 110:205  | 90:180  | 91:182  |\n| 2     | 205:354  | 180:270 | 182:273 |\n| 3     | 295:385⁺ | 270:360 | 273:364 |\n\n: The slices that represent the 4-part subyear units {#tbl-4slice}\n:::\n\n## Steps {#sec-step}\n\nThe `simple` `slices` (`start:stop`) described above are a type of time `segment`, an unbroken time interval. To break up a `simple` `slice` into a non-consecutive `series`, we can add a `step` value and create a `stepped` `slice` (`start:stop:step`). `stepped` `slices` move in `step`-sized \"steps\" starting from `start`, skipping over $step-1$ items with each \"step\", keeping only items that are \"stepped\" on.\n\nIn other words, `stepped` `slices` keep items whose index (zero-based position) in the `slice` is evenly divisible by `step`. A `step` value of 1 keeps every item, because every index is divisible by 1, and a `step` of 2 keeps every other item, those with even-numbered indexes. `Day` `0` and every other third day in the year thereafter (`Day` `3`, `Day` `6`, etc.) can be represented by the `slice` `::3`.\n\nTo create a `series` of times on days throughout the year, we can use a `slice` with a `series` of `steps`. The `slice` `:365:1,1,3` represents all of the `Decalendar` workdays in a year. It is necessary to specify 365 as the `stop`, so that Leap Day (`Day` `365`) is not included as a workday in leap years. Similarly, `3::1,4` is a `seq` that represents all of the regular restdays, not including the Leap Day holiday.\n\n`stepped` `slices` cannot be included in `series`, because both use commas (`,`) and it would not possible to differentiate a `series` of `steps` from subsequent items in the `series`. The simple rule is that `slices` with more than 1 colon (`:`) cannot be part of a series. For example, `:365:1,1,3` is a `stepped` `slice` with a `series` of 3 `steps` rather than a series consisting of a `slice` and two numbers.\n\n## Spreads {#sec-spread}\n\nTo create `series` of consecutive items with breaks in between, it may be better to use a `spread` than a `slice`. `Simple` `spreads` consist of either a `start` and a `span` (`start>span`) separated by a greater-than sign (`>`) or a `stop` and a `span` (`stop<span`) separated by a less-than (`<`) sign. The default `start` and `stop` values are the same for both `slices` and `spreads`. We can `spread` forward from the default `start` to capture the first `span` days in a year. For example, the first 3 days in a year can be represented by the `spread` `>3`, which is synonymous with the `slice` `:3`. In this example, the `start` is 0, while the `stop` and the `span` are both 3. In addition to default `start` and `stop` values, `spreads` also have default `span` values. A `spread` that only uses default values (`>` or `<`) will include every day in the year ($span=n$). @tbl-4spread lists the seasons, `qops`, and `delts` in the form of `spreads`.\n\n#### @tbl-4spread\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Index | Season   | Qop     | Delt    |\n|-------|----------|---------|---------|\n| 0     | 20\\>90   | \\>90    | \\>91    |\n| 1     | 110\\>95  | 90\\>90  | 91\\>91  |\n| 2     | 205\\>90  | 180\\>90 | 182\\>91 |\n| 3     | 295\\>90⁺ | 270\\>90 | 273\\>91 |\n\n: The spreads that represent the 4-part subyear units {#tbl-4spread}\n:::\n\nIf we \"spread\" forward from a positive `start`, the default `span` is $n-start$. If we spread backward from a positive `stop`, the default `span` is `stop`. We can `spread` backward from the default `stop` to capture the last `span` days in a year. For example, `<3` represents the last 3 days of any year. We could also use a negative `start` of `-3`, the third to last day of any year, to create the `slice` `-3:` and the `spread` `-3>`, both of which are synonymous with `<3`. One advantage of `spreads` over `slices` is the ability to access days from the end of a year without negative numbers. A `span` value of zero does not return any items. Negative `span` values reverse the direction of the first sign, turning `start` into `stop` and vice versa.\n\n## Splits {#sec-split}\n\nAs with `stepped` `slices`, we can create non-consecutive `series` by \"splitting\" a `simple` `spread` (`start>span` or `stop<span`) into `split` `spread` (e.g. `start>span>split`) with a `split` value that works like the opposite of a `step`. While `steps` keep items that are \"stepped\" on, `splits` exclude items that are used to create the boundaries of the `splits`. The default `split` value is `span`, meaning that the entire `span` is included in one `split`.\n\nA `split` `spread` with a `split` value of 1 (`start>span>1`) is the same as a `stepped` `slice` with a `step` value of 2 (`start:stop:2`). `Split` values greater than 1 but less than `span` will yield a `series` of `segments`. If `split` is zero (`start>span>0`), the `split` `spread` will not return any items. A negative `split` value reverses the direction of the second greater-than sign (`start>span>-2` and `start>span<2` are synonymous). This can be useful when providing a series of `split` values. Negative `split` values reverse the direction of a `split` and a `split` value of zero skips a `split`. Just like `stepped` `slices`, `split` `spreads` cannot be included in a `series`, because every `split` can have a `series` of values.\n\nThe direction of the second sign in `split` `spreads` determines whether we begin creating splits from the `start` (`>`) or the `stop` (`<`) of the `span`. If the first two values (`start` and `span` or `stop` and `span`) are blank, the direction of the first sign does not matter and the first two signs can be combined into a \"much greater-than sign\" (`≫`), a \"much less-than sign\" (`≪`), a diamond (`♢`), or simply an `x`. The split spreads `≫4` and `♢4` are synonymous; both skip every 5th day to create groups of 4 days throughout the year starting with the first 4 days of the year `>4`. Notably, `≫4` and `♢4` will always end with a `segment` containing the last 4 days of common years, `360:364`, `360>4`, or `364<4`, even in leap years, because partial `splits` are not allowed.\n\n## Spaces {#sec-space}\n\nThe patterns described above require that `splits` are separated by the default `space` value of 1. We can specify a different `space` value in the form `start>span>split>space`. The `split` `spreads` `≫3>2` and `♢3>2` create 3-day `splits` separated by 2-day `spaces`. This is the pattern of workdays in the `Decalendar` system. The first `segment` of `≫3>2` and `♢3>2` can be written as `:3`, `>3`, or `3<`, while the last `segment` is `360:363`, `360>3`, or `363<3`. The workdays in the first `dek` of `≫3>2` and `♢3>2` can be written as the following `series` of `segments`: `:4,5:8`, `>3,5>3`, or `3<,8<3`. Unlike `stepped` `slices` and `split` `spreads`, `simple` `slices` and `simple` `spreads` can be used in `series`.\n\nA `space` value of 0 may also be useful. For example, `delts`, `qops`, `eps`, and `waus` can be summarized as `split` `spreads` as shown in @tbl-constant. When `space` is zero, the direction of the third sign does not matter. The `split` `spreads` `≫61>0`, `♢61>0`, `≫61<0`, and `♢61<0` all represents the `waus` in a year. `Waus` divide leap years evenly and `eps` divide common years evenly. Therefore, `x61>0` and `x61<0` can represent all of the `waus` in leap years, just like `x73>0` and `x73<0` can represent all of the `eps` in common years. The seasons can be described by a `spread` with a `series` of `splits` and a `space` of 0: `»90,95,90,90⁺>0`.\n\n#### @tbl-constant\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Unit | Spread  |\n|------|---------|\n| Delt | `≫91>0` |\n| Qop  | `≫90>0` |\n| Ep   | `≫73>0` |\n| Wau  | `≫61>0` |\n\n: The spreads that represent the constant length subyear units {#tbl-constant}\n:::\n\nIf `space` is greater than zero and the second and third sign are pointing in opposite directions, the resulting time `segments` will overlap. The `split` `spreads` `>1>.4<.2` and `<1<.4>.2` both result in the same 4 overlapping time `segments`: `:.4`, `.2:.6`, `.4:.8`, `.6:1`. Negative values can be used in a `series` of `spaces` to temporarily reverse the direction and intersperse overlapping and non-overlapping `segments`. The `split` `spread` `>1>.4<.2,-.1` yields two `segments` that overlap and one `segment` that does not overlap: `:.4`, `.2:.6`, `.6:1`.\n\nOverlapping segments could be used to plan work shifts that require a hand-off between teams. The segments created by `>1>.4<.2` are shifted by two `dimes` in relation to each other and overlap by 2 `dimes`. If these segments are in `Zone` `0` time, they represent the normal workday (`.3:.7`) for `Zone` `3` (`:.4`), `Zone` `1`(`.2:.6`), `Zone` `-1`(`.4:.8`), and `Zone` `-3`(`.6:1`). Each of these 4 segments could represent a team working during the normal workday in their respective time zone. All but the last team would have two dimes of overlap with the subsequent team.\n\n## Sequential spreads and slices {#sec-seq}\n\n`split` `spreads` can be combined with other `spreads` into `sequences` called `seq` `spreads` (`sequential` `spreads`). The intuition behind `seq` `spreads` and is that each item in the first (outer) `spread` serves as a starting point for the second (inner) `spread`. The main use of `seq` `spreads` is to first \"spread\" across days and then \"spread\" across times in those days. We can combine `≫3>2`, a `split` `spread` that represents the `Decalendar` workdays, with `.3>.4`, a `simple` `spread` that provides the `start` and `span` of the `Decalendar` workday, to obtain `≫3>2>.3>.4`, a `seq` `spread` that represents the time spent at work in a `Decalendar` year.\n\nIn this `seq` `spread`, the `split` is the number of workdays (`3`), the space is the number of restdays (`2`), the second-to-last number is the `start` of the workday (`.3`) and the last number is the workday `span` (`.4`). The `spread` `≫3>2>.3>.4` first starts at midnight of each workday, then moves forward 3 `dimes` to the new `start` of `Dot` `3`, and then \"spreads\" forward by a `span` of 4 `dimes` to the new `stop` of `Dot` `7`. We could replace the start of the workday in `≫3>2>.3>.4` with the end of workday if we reverse the last sign: `≫3>2>.7<.4`, because `.3>.4` and `.7<.4` are synonymous.\n\nWe combine the two `spreads` with `>` because we want to move forward from the beginning of each workday, instead of backward to the previous day. If we combined `≫3>2` and `.3>.4` with `<`, the resulting `spread` `≫3>2<.3>.4` would move backward from midnight of each workday to `Dot` `7` of each previous day and then \"spread\" forward to `Dot` `1` of each workday. We may want to use such a mixed direction `seq` `spreads` when dealing with time zones. If we lived in `Zone` `-3` and wanted to know how the workdays in `Zone` `4` translated into our time zone, we could take the `spread` `≫3>2>.3>.4` and move its `start` to 7 `dimes` earlier: `≫3>2<.4>.4`. `seq` `spreads` enable such time zone conversions without the use of negative numbers.\n\nThe `seq` `slice` equivalent of `≫3>2>.3>.4` is `:365:1,1,3:.3:.7`. `seq` `spreads` will always be a more succinct way for creating long consecutive sequences with breaks than `slices`. For example, to include a lunch break in the middle of work, we could simply add a `split` and a `space` to the `seq` `spread` above: `≫3>2>.3>.4>.18>.04`. To do the same with a `seq` `slice`, we have to create 17 steps of 0.01 and a step of .04: `:365:1,1,3:.3:.7:17*1%,4%`. Here, we are using the replication operator (`*`) to avoid writing 0.01 17 times and the percent operator (`%`) to save a few characters, but even so the `seq` `slice` is not as concise as the `seq` `spread`. @tbl-workday shows each part of this schedule in the form of `simple` `slices` and `simple` `spreads`.\n\n#### @tbl-workday\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| slice   | spread   | spread   | label |\n|---------|----------|----------|-------|\n| .30:.48 | .30\\>.18 | .48\\<.18 | work0 |\n| .48:.52 | .48\\>.04 | .52\\<.04 | lunch |\n| .52:.70 | .52\\>.18 | .70\\<.18 | work1 |\n\n: A workday schedule with a lunch break {#tbl-workday}\n:::\n\n## Pomodoro {#sec-pom}\n\nAnother real-life application of `spreads` can be to intersperse breaks in between periods of work as in the [Pomodoro technique](https://en.wikipedia.org/wiki/Pomodoro_Technique). The times spent working and resting can vary, but a reasonable translation of the original Pomodoro into the `Declock` units would be to have each `pomodoro` consist of 17 `mils` of work and 3 `mils` of rest, with a 17 `mil` break after every 4 `pomodoros`. To repeat 16 `pomodoros` throughout the `Decalendar` workday, we could use the following `seq` `spread`: `.3>.7>.08>.02⋙.017>.003`. Here, we use the \"very much greater-then sign\" (`⋙`) instead of a combination of a \"much greater-than sign\" (`≫`) and a greater-than sign (`>`). The `pomodoro` pattern is difficult to capture with a `slice` because we have to use `*` for the steps of the inner and the outer `slice`: `.3:.7:8*.01,.02:::17*.001,.003`.\n\n### Replication operator {#sec-rep}\n\nThe replication operator (`*`) is very useful for replacing repetitive values. For example, to divide any year into six parts we could use the `spread` `≫5*61,60⁺>0` to create 5 \"splits\" that are all 61 days long and one last \"split\" that is `60⁺` days (60 days in a common year or 61 days in a leap year) long. The `*` helps us avoid the repetitiveness of writing `≫61,61,61,61,61,60⁺>0`. In addition to being used in the `split` and `space` of a `split` `spread` or the `step` of a `stepped` `slice`, the `*` can also be used in the `span` of a `split` `spread` or the `stop` of a `stepped` `slice` to indicate has many cycles of `splits` or `steps` we want to complete. For example, `>4*>5*61,60⁺>0` indicates that we want 4 years (the current year and the 3 subsequent years) \"split\" into 6 parts for a total of 24 parts. In other words, `4*` means that we want to stop cycling after completing four yearly cycles. We can read `4*` out loud as \"four times\" because it means we intend to go through the yearly cycle \"four times\".\n\n### Percent, permil, and permyr operators {#sec-per}\n\nWe can make the `seq` `spread` above even shorter by using the `per` operators: `%`, `‰`, and `‱`. Most of the values in `.3>2*>.08>.02⋙.017>.003` are either percents (.01 or ¹/₁₀₀) or permils (.001 or ¹/₁₀₀₀) of a day, we can therefore rewrite this `seq` `spread` as `.3>2*>8%>2%⋙17‰>3‰`. It may be difficult to write the permil (`‰`) operator (hex: `2030`, html: `&permil;`, vim: `%0`, compose: `%o`), because it does not appear on a typical keyboard, so it is also possible to write `.3>2*>8%>2%⋙17‰>3‰` as `.3>2*>8%>2%⋙17m>3m`, with the letter `m`, which stands for `mil`, replacing `‰`. In addition to the percent (`%`) and permil (`‰`) operators, there is also the permyr (`‱`) operator, which is short for permyriad and represents `Declock` `phrases` (10⁻⁴).\n\n### Pently schedules as seq spreads, splices, and sleds {#sec-3s}\n\nWe can use `seq` `spreads` to describe the [`pently`schedules](#sched). `Schedule` `5` is particularly interesting because it includes all of the days of the year. `Spreads` that include every item can be written as `>` or `<`, but `seq` `spreads` must have at least 5 values. The `Schedule` `5` `seq` `spread` `≫≫.38>.24` has 4 blank values, which represent the default `start`, `span`, `split`, and `space`. Similarly, the `Schedule` `4` `seq` `spread` `≫4≫.35>.3` has 3 blank values, which represent the default `start`, `span`, and `space`. The `Schedule` `2` and `Schedule` `3` `seq` `spreads`, `≫2>3>.2>.6` and `≫3>2>.3>.4`, respectively, only have 2 blank values, the `start` and the `span`. As an alternative to `seq` `spreads` and `seq` `slices`, we can use `slice`-`spread` hybrids called `sleds` or `spread`-`slice` hybrids called `splices`. `Sleds` put the `slice` elements first (`start:stop:step:start>span>split>space`), while `splices` start with the `spread` elements (`start>span>split>space>start:stop:step`). The `pently` schedules are easiest to write as `seq` `spreads` and `splices`, as shown in @tbl-sched.\n\n#### @tbl-sched\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Schedule | seq spread    | splice       | sled                | seq slice           |\n|----------|---------------|--------------|---------------------|---------------------|\n| 2        | ≫2\\>3\\>.2\\>.6 | ≫2\\>3\\>.2:.8 | :365:1,4:.2\\>.6     | :365:1,4:.2:.8      |\n| 3        | ≫3\\>2\\>.3\\>.4 | ≫3\\>2\\>.3:.7 | :365:1,1,3:.3\\>.4   | :365:1,1,3:.3:.7    |\n| 4        | ≫4≫.35\\>.3    | ≫4≫.35:.65   | :365:3\\*1,2:.35\\>.3 | :365:3\\*1,2:.35:.65 |\n| 5        | ≫≫.38\\>.24    | ≫≫.38:.62    | :365::.38\\>.24      | :365::.38:.62       |\n\n: The seq spreads, splices, and sleds that represent the 4 pently schedules {#tbl-sched}\n:::\n\n## Yearly transition {#sec-trans}\n\n### Common years {#sec-transc}\n\nThe `pently` schedules are important for the transition between years. In common years, the last `dek` of the year (`Dek` `36`) contains the last `pent` of the current year (`Pent` `72`), and the first `pent` of the subsequent year (`Pent` `0`). If these two `pents` follow the default `pently` schedule, `Schedule` `3`, the natural rhythm of 3 workdays followed by 2 rest days continues undisrupted. @tbl-common shows the positive and negative `doties`, names, and types (work or rest) of the days in `Dek` `36` in common years. Notably, while the positive `doties` continue counting past the end of the year, the negative `doties` of the current year turn into the positive `doties` of the subsequent year. The negative `doties` in `Dek` `36` can thus serve as the bridge from the one year to the next.\n\n#### @tbl-common\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Pos | Neg | Name   | Type |\n|-----|-----|--------|------|\n| 360 | -5  | Nulday | work |\n| 361 | -4  | Unoday | work |\n| 362 | -3  | Duoday | work |\n| 363 | -2  | Triday | rest |\n| 364 | -1  | Quaday | rest |\n| 365 | 0   | Nulday | work |\n| 366 | 1   | Unoday | work |\n| 367 | 2   | Duoday | work |\n| 368 | 3   | Triday | rest |\n| 369 | 4   | Quaday | rest |\n\n: The days in Dek 36 in common years {#tbl-common}\n:::\n\n### Leap years {#sec-transl}\n\nIn leap years, `Dek` `36` contains the last 6 days of the current year and the first 4 days of the subsequent year. Interestingly, `Dek` `36` always contain 6 workdays and 4 restdays, just like every other `dek`, but in leaps years these days do not follow the typical order of `Schedule` `3`. Leap years end in 3 restdays instead of 2, because Leap Day (`Day` `365`) is always a holiday. Leap day is always a `Penday` and always followed by a `Nulday`. After Leap Day, the normal rhythm of `Schedule` `3` resumes. @tbl-leap shows the positive and negative `doties` of the days in `Dek` `36` in leap years, as well as their names and their types (work or rest).\n\n#### @tbl-leap\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Pos | Neg | Name   | Type |\n|-----|-----|--------|------|\n| 360 | -6  | Nulday | work |\n| 361 | -5  | Unoday | work |\n| 362 | -4  | Duoday | work |\n| 363 | -3  | Triday | rest |\n| 364 | -2  | Quaday | rest |\n| 365 | -1  | Penday | rest |\n| 366 | 0   | Nulday | work |\n| 367 | 1   | Unoday | work |\n| 368 | 2   | Duoday | work |\n| 369 | 3   | Triday | rest |\n\n: The days in Dek 36 in leap years {#tbl-leap}\n:::\n\n## Holidays {#sec-holiday}\n\nLeap Day is a important holiday because it occurs only once every four years except for years that start centuries not divisible by 400 and it results in the only time when there are 3 consecutive restdays in `Decalendar`. Another `Decalendar` holiday that only occurs in leap years is Dyad Day. At noon on Dyad Day, the positive and negative `.y` format `stamps` are the same (`+183.5` and `-183.5`), meaning that 183.5 days have passed in the year and 183.5 days remain in the year. Unlike Leap Day, Dyad Day is naturally a day off. Many Gregorian calendar holidays just so happen to also fall on the first day of a `pent` (`Nulday` or `Quaday`). @tbl-holiday lists 8 such holidays and their `doty`, `dotm`, and Gregorian calendar dates.\n\n#### @tbl-holiday\n\n::: {.callout-note collapse=\"true\" title=\"Click to toggle table expansion\" icon=\"false\"}\n| Name             | doty | dotm | date        |\n|------------------|------|------|-------------|\n| Cinco de Mayo    | 65   | 2+04 | May 5       |\n| Flag Day         | 105  | 3+13 | June 14     |\n| Juneteenth Day   | 110  | 3+18 | June 19     |\n| Independence Day | 125  | 4+03 | July 4      |\n| All Saints' Day  | 245  | 8+00 | November 1  |\n| Veterans' Day    | 255  | 8+10 | November 11 |\n| Boxing Day       | 300  | 9+25 | December 26 |\n| New Year's Eve   | 305  | 9+31 | December 31 |\n\n: Gregorian calendar holidays that happen to fall on `Decalendar` restdays {#tbl-holiday}\n:::\n\nAny holiday with a fixed (rather than floating) date in the Gregorian calendar can easily be added to `Decalendar`. Holidays with floating dates do not follow easily recognizable patterns. `Decalendar` recommends redefining such dates to always be on the same `doty` every year. For example, November 25 (`Day` `269`) is a sensible fixed date for Thanksgiving, because it is exactly 30 days before Christmas (December 25, `Day` `299`) and falls on a `Decalendar` restday. When assigning fixed dates to floating date holidays, we should choose `Decalendar` restdays to avoid disrupting the normal rhythm of the `pently` schedules. Instead of gaining days off because of holidays, workers should gain additional time off from their employers. In the United States, the 11 federal holidays (88 hours = 3.6̅ dimes) would translate to 9 `Schedule` `3` days offs (3.6 dimes).\n\n# References\n\n::: {#refs}\n:::\n\n# Appendix {#appendix}\n\n---\njupyter:\n  kernelspec:\n    display_name: R\n    language: R\n    name: ir\n  language_info:\n    codemirror_mode: r\n    file_extension: .r\n    mimetype: text/x-r-source\n    name: R\n    pygments_lexer: r\n    version: 4.3.1\n---\n",
    "supporting": [
      "dec_files/figure-ipynb"
    ],
    "filters": []
  }
}